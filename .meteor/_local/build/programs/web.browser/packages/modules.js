//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var meteorInstall = Package['modules-runtime'].meteorInstall;

var require = meteorInstall({"node_modules":{"meteor":{"modules":{"client.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/client.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("./install-packages.js");                                                                                      // 1
require("./stubs.js");                                                                                                 // 2
require("./process.js");                                                                                               // 3
require("./reify.js");                                                                                                 // 4
                                                                                                                       // 5
exports.addStyles = require("./css").addStyles;                                                                        // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"css.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/css.js                                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var doc = document;                                                                                                    // 1
var head = doc.getElementsByTagName("head").item(0);                                                                   // 2
                                                                                                                       // 3
exports.addStyles = function (css) {                                                                                   // 4
  var style = doc.createElement("style");                                                                              // 5
                                                                                                                       // 6
  style.setAttribute("type", "text/css");                                                                              // 7
                                                                                                                       // 8
  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                                   // 9
  var internetExplorerSheetObject =                                                                                    // 10
    style.sheet || // Edge/IE11.                                                                                       // 11
    style.styleSheet; // Older IEs.                                                                                    // 12
                                                                                                                       // 13
  if (internetExplorerSheetObject) {                                                                                   // 14
    internetExplorerSheetObject.cssText = css;                                                                         // 15
  } else {                                                                                                             // 16
    style.appendChild(doc.createTextNode(css));                                                                        // 17
  }                                                                                                                    // 18
                                                                                                                       // 19
  return head.appendChild(style);                                                                                      // 20
};                                                                                                                     // 21
                                                                                                                       // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"install-packages.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/install-packages.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function install(name, mainModule) {                                                                                   // 1
  var meteorDir = {};                                                                                                  // 2
                                                                                                                       // 3
  // Given a package name <name>, install a stub module in the                                                         // 4
  // /node_modules/meteor directory called <name>.js, so that                                                          // 5
  // require.resolve("meteor/<name>") will always return                                                               // 6
  // /node_modules/meteor/<name>.js instead of something like                                                          // 7
  // /node_modules/meteor/<name>/index.js, in the rare but possible event                                              // 8
  // that the package contains a file called index.js (#6590).                                                         // 9
                                                                                                                       // 10
  if (typeof mainModule === "string") {                                                                                // 11
    // Set up an alias from /node_modules/meteor/<package>.js to the main                                              // 12
    // module, e.g. meteor/<package>/index.js.                                                                         // 13
    meteorDir[name + ".js"] = mainModule;                                                                              // 14
  } else {                                                                                                             // 15
    // back compat with old Meteor packages                                                                            // 16
    meteorDir[name + ".js"] = function (r, e, module) {                                                                // 17
      module.exports = Package[name];                                                                                  // 18
    };                                                                                                                 // 19
  }                                                                                                                    // 20
                                                                                                                       // 21
  meteorInstall({                                                                                                      // 22
    node_modules: {                                                                                                    // 23
      meteor: meteorDir                                                                                                // 24
    }                                                                                                                  // 25
  });                                                                                                                  // 26
}                                                                                                                      // 27
                                                                                                                       // 28
// This file will be modified during computeJsOutputFilesMap to include                                                // 29
// install(<name>) calls for every Meteor package.                                                                     // 30
                                                                                                                       // 31
install("meteor");                                                                                                     // 32
install("meteor-base");                                                                                                // 33
install("mobile-experience");                                                                                          // 34
install("babel-compiler");                                                                                             // 35
install("ecmascript");                                                                                                 // 36
install("underscore");                                                                                                 // 37
install("base64");                                                                                                     // 38
install("modules-runtime");                                                                                            // 39
install("modules", "meteor/modules/client.js");                                                                        // 40
install("ecmascript-runtime");                                                                                         // 41
install("es5-shim", "meteor/es5-shim/client.js");                                                                      // 42
install("promise", "meteor/promise/client.js");                                                                        // 43
install("babel-runtime", "meteor/babel-runtime/babel-runtime.js");                                                     // 44
install("ecmascript-runtime-client", "meteor/ecmascript-runtime-client/runtime.js");                                   // 45
install("ejson", "meteor/ejson/ejson.js");                                                                             // 46
install("diff-sequence");                                                                                              // 47
install("geojson-utils", "meteor/geojson-utils/main.js");                                                              // 48
install("id-map");                                                                                                     // 49
install("random");                                                                                                     // 50
install("mongo-id");                                                                                                   // 51
install("ordered-dict");                                                                                               // 52
install("tracker");                                                                                                    // 53
install("minimongo", "meteor/minimongo/minimongo_client.js");                                                          // 54
install("check", "meteor/check/match.js");                                                                             // 55
install("retry");                                                                                                      // 56
install("callback-hook");                                                                                              // 57
install("ddp-common");                                                                                                 // 58
install("reload");                                                                                                     // 59
install("ddp-client", "meteor/ddp-client/namespace.js");                                                               // 60
install("ddp");                                                                                                        // 61
install("ddp-server");                                                                                                 // 62
install("allow-deny");                                                                                                 // 63
install("mongo-dev-server");                                                                                           // 64
install("insecure");                                                                                                   // 65
install("mongo");                                                                                                      // 66
install("blaze-html-templates");                                                                                       // 67
install("reactive-var");                                                                                               // 68
install("standard-minifier-css");                                                                                      // 69
install("standard-minifier-js");                                                                                       // 70
install("shell-server");                                                                                               // 71
install("autopublish");                                                                                                // 72
install("tmeasday:check-npm-versions", "meteor/tmeasday:check-npm-versions/check-npm-versions.js");                    // 73
install("react-meteor-data", "meteor/react-meteor-data/react-meteor-data.jsx");                                        // 74
install("deps");                                                                                                       // 75
install("aldeed:simple-schema");                                                                                       // 76
install("reactive-dict", "meteor/reactive-dict/migration.js");                                                         // 77
install("session");                                                                                                    // 78
install("jquery", "meteor/jquery/main.js");                                                                            // 79
install("observe-sequence");                                                                                           // 80
install("htmljs");                                                                                                     // 81
install("blaze");                                                                                                      // 82
install("spacebars");                                                                                                  // 83
install("templating-compiler");                                                                                        // 84
install("templating-runtime");                                                                                         // 85
install("templating");                                                                                                 // 86
install("markdown");                                                                                                   // 87
install("webapp", "meteor/webapp/webapp_client.js");                                                                   // 88
install("livedata");                                                                                                   // 89
install("dynamic-import", "meteor/dynamic-import/client.js");                                                          // 90
install("hot-code-push");                                                                                              // 91
install("launch-screen");                                                                                              // 92
install("ui");                                                                                                         // 93
install("autoupdate");                                                                                                 // 94
install("mdg:validation-error");                                                                                       // 95
                                                                                                                       // 96
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"process.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/process.js                                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
if (! global.process) {                                                                                                // 1
  try {                                                                                                                // 2
    // The application can run `npm install process` to provide its own                                                // 3
    // process stub; otherwise this module will provide a partial stub.                                                // 4
    global.process = require("process");                                                                               // 5
  } catch (missing) {                                                                                                  // 6
    global.process = {};                                                                                               // 7
  }                                                                                                                    // 8
}                                                                                                                      // 9
                                                                                                                       // 10
var proc = global.process;                                                                                             // 11
                                                                                                                       // 12
if (Meteor.isServer) {                                                                                                 // 13
  // Make require("process") work on the server in all versions of Node.                                               // 14
  meteorInstall({                                                                                                      // 15
    node_modules: {                                                                                                    // 16
      "process.js": function (r, e, module) {                                                                          // 17
        module.exports = proc;                                                                                         // 18
      }                                                                                                                // 19
    }                                                                                                                  // 20
  });                                                                                                                  // 21
} else {                                                                                                               // 22
  proc.platform = "browser";                                                                                           // 23
  proc.nextTick = proc.nextTick || Meteor._setImmediate;                                                               // 24
}                                                                                                                      // 25
                                                                                                                       // 26
if (typeof proc.env !== "object") {                                                                                    // 27
  proc.env = {};                                                                                                       // 28
}                                                                                                                      // 29
                                                                                                                       // 30
var hasOwn = Object.prototype.hasOwnProperty;                                                                          // 31
for (var key in meteorEnv) {                                                                                           // 32
  if (hasOwn.call(meteorEnv, key)) {                                                                                   // 33
    proc.env[key] = meteorEnv[key];                                                                                    // 34
  }                                                                                                                    // 35
}                                                                                                                      // 36
                                                                                                                       // 37
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"reify.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/reify.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Module = module.constructor;                                                                                       // 1
var Mp = Module.prototype;                                                                                             // 2
require("reify/lib/runtime").enable(Mp);                                                                               // 3
Mp.importSync = Mp.importSync || Mp.import;                                                                            // 4
Mp.import = Mp.import || Mp.importSync;                                                                                // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"stubs.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/modules/stubs.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var haveStubs = false;                                                                                                 // 1
try {                                                                                                                  // 2
  require.resolve("meteor-node-stubs");                                                                                // 3
  haveStubs = true;                                                                                                    // 4
} catch (noStubs) {}                                                                                                   // 5
                                                                                                                       // 6
if (haveStubs) {                                                                                                       // 7
  // When meteor-node-stubs is installed in the application's root                                                     // 8
  // node_modules directory, requiring it here installs aliases for stubs                                              // 9
  // for all Node built-in modules, such as fs, util, and http.                                                        // 10
  require("meteor-node-stubs");                                                                                        // 11
}                                                                                                                      // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"node_modules":{"reify":{"lib":{"runtime":{"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/modules/node_modules/reify/lib/runtime/index.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
// This module should be compatible with PhantomJS v1, just like the other files                                       // 3
// in reify/lib/runtime. Node 4+ features like const/let and arrow functions are                                       // 4
// not acceptable here, and importing any npm packages should be contemplated                                          // 5
// with extreme skepticism.                                                                                            // 6
                                                                                                                       // 7
var utils = require("./utils.js");                                                                                     // 8
var Entry = require("./entry.js");                                                                                     // 9
                                                                                                                       // 10
// The exports.enable method can be used to enable the Reify runtime for                                               // 11
// specific module objects, or for Module.prototype (where implemented),                                               // 12
// to make the runtime available throughout the entire module system.                                                  // 13
exports.enable = function (mod) {                                                                                      // 14
  if (typeof mod.export !== "function" ||                                                                              // 15
      typeof mod.importSync !== "function") {                                                                          // 16
    mod.export = moduleExport;                                                                                         // 17
    mod.exportDefault = moduleExportDefault;                                                                           // 18
    mod.runSetters = runSetters;                                                                                       // 19
    mod.watch = moduleWatch;                                                                                           // 20
                                                                                                                       // 21
    // Used for copying the properties of a namespace object to                                                        // 22
    // mod.exports to implement `export * from "module"` syntax.                                                       // 23
    mod.makeNsSetter = moduleMakeNsSetter;                                                                             // 24
                                                                                                                       // 25
    // To be deprecated:                                                                                               // 26
    mod.runModuleSetters = runSetters;                                                                                 // 27
    mod.importSync = importSync;                                                                                       // 28
                                                                                                                       // 29
    return true;                                                                                                       // 30
  }                                                                                                                    // 31
                                                                                                                       // 32
  return false;                                                                                                        // 33
};                                                                                                                     // 34
                                                                                                                       // 35
function moduleWatch(exported, setters, key) {                                                                         // 36
  utils.setESModule(this.exports);                                                                                     // 37
  Entry.getOrCreate(this.exports, this);                                                                               // 38
                                                                                                                       // 39
  if (utils.isObject(setters)) {                                                                                       // 40
    Entry.getOrCreate(exported).addSetters(this, setters, key);                                                        // 41
  }                                                                                                                    // 42
}                                                                                                                      // 43
                                                                                                                       // 44
// If key is provided, it will be used to identify the given setters so                                                // 45
// that they can be replaced if module.importSync is called again with the                                             // 46
// same key. This avoids potential memory leaks from import declarations                                               // 47
// inside loops. The compiler generates these keys automatically (and                                                  // 48
// deterministically) when compiling nested import declarations.                                                       // 49
function importSync(id, setters, key) {                                                                                // 50
  return this.watch(this.require(id), setters, key);                                                                   // 51
}                                                                                                                      // 52
                                                                                                                       // 53
// Register getter functions for local variables in the scope of an export                                             // 54
// statement. Pass true as the second argument to indicate that the getter                                             // 55
// functions always return the same values.                                                                            // 56
function moduleExport(getters, constant) {                                                                             // 57
  utils.setESModule(this.exports);                                                                                     // 58
  var entry = Entry.getOrCreate(this.exports, this);                                                                   // 59
  entry.addGetters(getters, constant);                                                                                 // 60
  if (this.loaded) {                                                                                                   // 61
    // If the module has already been evaluated, then we need to trigger                                               // 62
    // another round of entry.runSetters calls, which begins by calling                                                // 63
    // entry.runModuleGetters(module).                                                                                 // 64
    entry.runSetters();                                                                                                // 65
  }                                                                                                                    // 66
}                                                                                                                      // 67
                                                                                                                       // 68
// Register a getter function that always returns the given value.                                                     // 69
function moduleExportDefault(value) {                                                                                  // 70
  return this.export({                                                                                                 // 71
    default: function () {                                                                                             // 72
      return value;                                                                                                    // 73
    }                                                                                                                  // 74
  }, true);                                                                                                            // 75
}                                                                                                                      // 76
                                                                                                                       // 77
// Platform-specific code should find a way to call this method whenever                                               // 78
// the module system is about to return module.exports from require. This                                              // 79
// might happen more than once per module, in case of dependency cycles,                                               // 80
// so we want Module.prototype.runSetters to run each time.                                                            // 81
function runSetters(valueToPassThrough) {                                                                              // 82
  var entry = Entry.get(this.exports);                                                                                 // 83
  if (entry !== null) {                                                                                                // 84
    entry.runSetters();                                                                                                // 85
  }                                                                                                                    // 86
                                                                                                                       // 87
  if (this.loaded) {                                                                                                   // 88
    // If this module has finished loading, then we must create an Entry                                               // 89
    // object here, so that we can add this module to entry.ownerModules                                               // 90
    // by passing it as the second argument to Entry.getOrCreate.                                                      // 91
    Entry.getOrCreate(this.exports, this);                                                                             // 92
  }                                                                                                                    // 93
                                                                                                                       // 94
  // Assignments to exported local variables get wrapped with calls to                                                 // 95
  // module.runSetters, so module.runSetters returns the                                                               // 96
  // valueToPassThrough parameter to allow the value of the original                                                   // 97
  // expression to pass through. For example,                                                                          // 98
  //                                                                                                                   // 99
  //   export var a = 1;                                                                                               // 100
  //   console.log(a += 3);                                                                                            // 101
  //                                                                                                                   // 102
  // becomes                                                                                                           // 103
  //                                                                                                                   // 104
  //   module.export("a", () => a);                                                                                    // 105
  //   var a = 1;                                                                                                      // 106
  //   console.log(module.runSetters(a += 3));                                                                         // 107
  //                                                                                                                   // 108
  // This ensures module.runSetters runs immediately after the assignment,                                             // 109
  // and does not interfere with the larger computation.                                                               // 110
  return valueToPassThrough;                                                                                           // 111
}                                                                                                                      // 112
                                                                                                                       // 113
// Returns a function that takes a namespace object and copies the                                                     // 114
// properties of the namespace to module.exports, excluding any "default"                                              // 115
// property (by default, unless includeDefault is truthy), which is useful                                             // 116
// for implementing `export * from "module"`.                                                                          // 117
function moduleMakeNsSetter(includeDefault) {                                                                          // 118
  var module = this;                                                                                                   // 119
  // Discussion of why the "default" property is skipped:                                                              // 120
  // https://github.com/tc39/ecma262/issues/948                                                                        // 121
  return function (namespace) {                                                                                        // 122
    Object.keys(namespace).forEach(function (key) {                                                                    // 123
      if (includeDefault || key !== "default") {                                                                       // 124
        utils.copyKey(key, module.exports, namespace);                                                                 // 125
      }                                                                                                                // 126
    });                                                                                                                // 127
  };                                                                                                                   // 128
}                                                                                                                      // 129
                                                                                                                       // 130
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"utils.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/modules/node_modules/reify/lib/runtime/utils.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
// This module should be compatible with PhantomJS v1, just like the other files                                       // 3
// in reify/lib/runtime. Node 4+ features like const/let and arrow functions are                                       // 4
// not acceptable here, and importing any npm packages should be contemplated                                          // 5
// with extreme skepticism.                                                                                            // 6
                                                                                                                       // 7
var useSetPrototypeOf = typeof Object.setPrototypeOf === "function";                                                   // 8
var useSymbol = typeof Symbol === "function";                                                                          // 9
                                                                                                                       // 10
var esStrKey = "__esModule";                                                                                           // 11
var esSymKey = useSymbol ? Symbol.for(esStrKey) : null;                                                                // 12
var useToStringTag = useSymbol && typeof Symbol.toStringTag === "symbol";                                              // 13
var useGetOwnPropDesc =                                                                                                // 14
  typeof Object.getOwnPropertyDescriptor === "function";                                                               // 15
var hasOwn = Object.prototype.hasOwnProperty;                                                                          // 16
                                                                                                                       // 17
function copyKey(key, target, source) {                                                                                // 18
  if (useGetOwnPropDesc) {                                                                                             // 19
    var desc = Object.getOwnPropertyDescriptor(source, key);                                                           // 20
    desc.configurable = true; // Allow redefinition.                                                                   // 21
    Object.defineProperty(target, key, desc);                                                                          // 22
  } else {                                                                                                             // 23
    target[key] = source[key];                                                                                         // 24
  }                                                                                                                    // 25
}                                                                                                                      // 26
                                                                                                                       // 27
exports.copyKey = copyKey;                                                                                             // 28
                                                                                                                       // 29
// Returns obj[key] unless that property is defined by a getter function,                                              // 30
// in which case the getter function is returned.                                                                      // 31
exports.valueOrGetter = function (obj, key) {                                                                          // 32
  if (useGetOwnPropDesc && hasOwn.call(obj, key)) {                                                                    // 33
    var desc = Object.getOwnPropertyDescriptor(obj, key);                                                              // 34
    if (typeof desc.get === "function") {                                                                              // 35
      return desc.get;                                                                                                 // 36
    }                                                                                                                  // 37
  }                                                                                                                    // 38
                                                                                                                       // 39
  return obj[key];                                                                                                     // 40
};                                                                                                                     // 41
                                                                                                                       // 42
function getESModule(exported) {                                                                                       // 43
  if (isObjectLike(exported)) {                                                                                        // 44
    if (useSymbol && hasOwn.call(exported, esSymKey)) {                                                                // 45
      return !! exported[esSymKey];                                                                                    // 46
    }                                                                                                                  // 47
                                                                                                                       // 48
    if (hasOwn.call(exported, esStrKey)) {                                                                             // 49
      return !! exported[esStrKey];                                                                                    // 50
    }                                                                                                                  // 51
  }                                                                                                                    // 52
                                                                                                                       // 53
  return false;                                                                                                        // 54
}                                                                                                                      // 55
                                                                                                                       // 56
exports.getESModule = getESModule;                                                                                     // 57
                                                                                                                       // 58
function setESModule(exported) {                                                                                       // 59
  if (isObjectLike(exported)) {                                                                                        // 60
    if (useSymbol) {                                                                                                   // 61
      exported[esSymKey] = true;                                                                                       // 62
    } else if (! exported[esStrKey]) {                                                                                 // 63
      // Other module runtime systems may set exported.__esModule such                                                 // 64
      // that it can't be redefined, so we call Object.defineProperty only                                             // 65
      // when exported.__esModule is not already true.                                                                 // 66
      Object.defineProperty(exported, esStrKey, {                                                                      // 67
        configurable: true,                                                                                            // 68
        enumerable: false,                                                                                             // 69
        value: true,                                                                                                   // 70
        writable: false                                                                                                // 71
      });                                                                                                              // 72
    }                                                                                                                  // 73
  }                                                                                                                    // 74
}                                                                                                                      // 75
                                                                                                                       // 76
exports.setESModule = setESModule;                                                                                     // 77
                                                                                                                       // 78
function isObject(value) {                                                                                             // 79
  return typeof value === "object" && value !== null;                                                                  // 80
}                                                                                                                      // 81
                                                                                                                       // 82
exports.isObject = isObject;                                                                                           // 83
                                                                                                                       // 84
function isObjectLike(value) {                                                                                         // 85
  var type = typeof value;                                                                                             // 86
  return type === "function" || (type === "object" && value !== null);                                                 // 87
}                                                                                                                      // 88
                                                                                                                       // 89
exports.isObjectLike = isObjectLike;                                                                                   // 90
                                                                                                                       // 91
function createNamespace() {                                                                                           // 92
  var namespace = Object.create(null);                                                                                 // 93
                                                                                                                       // 94
  if (useToStringTag) {                                                                                                // 95
    Object.defineProperty(namespace, Symbol.toStringTag, {                                                             // 96
      value: "Module",                                                                                                 // 97
      configurable: false,                                                                                             // 98
      enumerable: false,                                                                                               // 99
      writable: false                                                                                                  // 100
    });                                                                                                                // 101
  }                                                                                                                    // 102
                                                                                                                       // 103
  setESModule(namespace);                                                                                              // 104
                                                                                                                       // 105
  return namespace;                                                                                                    // 106
}                                                                                                                      // 107
                                                                                                                       // 108
exports.createNamespace = createNamespace;                                                                             // 109
                                                                                                                       // 110
function setPrototypeOf(object, proto) {                                                                               // 111
  if (useSetPrototypeOf) {                                                                                             // 112
    Object.setPrototypeOf(object, proto);                                                                              // 113
  } else {                                                                                                             // 114
    object.__proto__ = proto;                                                                                          // 115
  }                                                                                                                    // 116
  return object;                                                                                                       // 117
}                                                                                                                      // 118
                                                                                                                       // 119
exports.setPrototypeOf = setPrototypeOf;                                                                               // 120
                                                                                                                       // 121
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"entry.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/modules/node_modules/reify/lib/runtime/entry.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
// This module should be compatible with PhantomJS v1, just like the other files                                       // 3
// in reify/lib/runtime. Node 4+ features like const/let and arrow functions are                                       // 4
// not acceptable here, and importing any npm packages should be contemplated                                          // 5
// with extreme skepticism.                                                                                            // 6
                                                                                                                       // 7
var utils = require("./utils.js");                                                                                     // 8
                                                                                                                       // 9
var GETTER_ERROR = {};                                                                                                 // 10
var NAN = {};                                                                                                          // 11
var UNDEFINED = {};                                                                                                    // 12
var hasOwn = Object.prototype.hasOwnProperty;                                                                          // 13
var keySalt = 0;                                                                                                       // 14
                                                                                                                       // 15
function Entry(exported) {                                                                                             // 16
  // The module.exports of the module this Entry is managing.                                                          // 17
  this.exports = exported;                                                                                             // 18
  // Getters for local variables exported from the managed module.                                                     // 19
  this.getters = Object.create(null);                                                                                  // 20
  // Setters for assigning to local variables in parent modules.                                                       // 21
  this.setters = Object.create(null);                                                                                  // 22
  // The normalized namespace object that importers receive when they use                                              // 23
  // `import * as namespace from "..."` syntax.                                                                        // 24
  this.namespace = utils.createNamespace();                                                                            // 25
  // Map from module.id string to module object for each module this Entry                                             // 26
  // is managing.                                                                                                      // 27
  this.ownerModules = Object.create(null);                                                                             // 28
  // Boolean indicating whether all the modules this Entry is managing                                                 // 29
  // have finished loading yet. Call entry.hasLoaded() to compute.                                                     // 30
  this._loaded = false;                                                                                                // 31
}                                                                                                                      // 32
                                                                                                                       // 33
var Ep = utils.setPrototypeOf(Entry.prototype, null);                                                                  // 34
                                                                                                                       // 35
var weakEntryMap = typeof WeakMap === "function"                                                                       // 36
  ? new WeakMap                                                                                                        // 37
  : new (function FakeWeakMap() {                                                                                      // 38
    // A barely functional WeakMap polyfill, just in case. This                                                        // 39
    // implementation needs to be logically correct only in the specific                                               // 40
    // ways that the Entry class uses it. It isn't even "weak" in the                                                  // 41
    // garbage-collection sense of the word, but that's fine.                                                          // 42
    var keys = [];                                                                                                     // 43
    var values = [];                                                                                                   // 44
                                                                                                                       // 45
    this.get = function (obj) {                                                                                        // 46
      var index = keys.indexOf(obj);                                                                                   // 47
      if (index >= 0) {                                                                                                // 48
        return values[index];                                                                                          // 49
      }                                                                                                                // 50
    };                                                                                                                 // 51
                                                                                                                       // 52
    this.set = function (obj, value) {                                                                                 // 53
      var index = keys.indexOf(obj);                                                                                   // 54
      if (index >= 0) {                                                                                                // 55
        values[index] = value;                                                                                         // 56
      } else {                                                                                                         // 57
        keys.push(obj);                                                                                                // 58
        values.push(value);                                                                                            // 59
      }                                                                                                                // 60
    };                                                                                                                 // 61
  });                                                                                                                  // 62
                                                                                                                       // 63
Entry.get = function (exported) {                                                                                      // 64
  if (utils.isObjectLike(exported)) {                                                                                  // 65
    var entry = weakEntryMap.get(exported);                                                                            // 66
    if (entry !== void 0) {                                                                                            // 67
      return entry;                                                                                                    // 68
    }                                                                                                                  // 69
  }                                                                                                                    // 70
  return null;                                                                                                         // 71
};                                                                                                                     // 72
                                                                                                                       // 73
Entry.getOrCreate = function (exported, mod) {                                                                         // 74
  var entry = getOrCreate(exported);                                                                                   // 75
                                                                                                                       // 76
  if (utils.isObject(mod)) {                                                                                           // 77
    entry.ownerModules[mod.id] = mod;                                                                                  // 78
  }                                                                                                                    // 79
                                                                                                                       // 80
  return entry;                                                                                                        // 81
};                                                                                                                     // 82
                                                                                                                       // 83
function getOrCreate(exported) {                                                                                       // 84
  if (! utils.isObjectLike(exported)) {                                                                                // 85
    // In case the child module modified module.exports, create a temporary                                            // 86
    // Entry object so that we can call the entry.addSetters method once,                                              // 87
    // which will trigger entry.runSetters(names), so that module.importSync                                           // 88
    // behaves as expected.                                                                                            // 89
    return new Entry(exported);                                                                                        // 90
  }                                                                                                                    // 91
                                                                                                                       // 92
  var entry = weakEntryMap.get(exported);                                                                              // 93
  if (entry !== void 0) {                                                                                              // 94
    return entry;                                                                                                      // 95
  }                                                                                                                    // 96
                                                                                                                       // 97
  var entry = new Entry(exported);                                                                                     // 98
  weakEntryMap.set(exported, entry);                                                                                   // 99
  return entry;                                                                                                        // 100
};                                                                                                                     // 101
                                                                                                                       // 102
function safeKeys(obj) {                                                                                               // 103
  var keys = Object.keys(obj);                                                                                         // 104
  var esModuleIndex = keys.indexOf("__esModule");                                                                      // 105
  if (esModuleIndex >= 0) {                                                                                            // 106
    keys.splice(esModuleIndex, 1);                                                                                     // 107
  }                                                                                                                    // 108
  return keys;                                                                                                         // 109
}                                                                                                                      // 110
                                                                                                                       // 111
Ep.addGetters = function (getters, constant) {                                                                         // 112
  var names = safeKeys(getters);                                                                                       // 113
  var nameCount = names.length;                                                                                        // 114
  constant = !! constant;                                                                                              // 115
                                                                                                                       // 116
  for (var i = 0; i < nameCount; ++i) {                                                                                // 117
    var name = names[i];                                                                                               // 118
    var getter = getters[name];                                                                                        // 119
                                                                                                                       // 120
    if (typeof getter === "function" &&                                                                                // 121
        // Should this throw if this.getters[name] exists?                                                             // 122
        ! (name in this.getters)) {                                                                                    // 123
      this.getters[name] = getter;                                                                                     // 124
      getter.constant = constant;                                                                                      // 125
      getter.runCount = 0;                                                                                             // 126
    }                                                                                                                  // 127
  }                                                                                                                    // 128
};                                                                                                                     // 129
                                                                                                                       // 130
Ep.addSetters = function (parent, setters, key) {                                                                      // 131
  var names = safeKeys(setters);                                                                                       // 132
  var nameCount = names.length;                                                                                        // 133
                                                                                                                       // 134
  if (! nameCount) {                                                                                                   // 135
    return;                                                                                                            // 136
  }                                                                                                                    // 137
                                                                                                                       // 138
  // If no key is provided, make a unique key. Otherwise, make sure the key is                                         // 139
  // distinct from keys provided by other parent modules.                                                              // 140
  key = key === void 0                                                                                                 // 141
    ? makeUniqueKey()                                                                                                  // 142
    : parent.id + ":" + key;                                                                                           // 143
                                                                                                                       // 144
  for (var i = 0; i < nameCount; ++i) {                                                                                // 145
    var name = names[i];                                                                                               // 146
    var setter = setters[name];                                                                                        // 147
                                                                                                                       // 148
    if (typeof setter === "function") {                                                                                // 149
      setter.parent = parent;                                                                                          // 150
      if (! (name in this.setters)) {                                                                                  // 151
        this.setters[name] = Object.create(null);                                                                      // 152
      }                                                                                                                // 153
      this.setters[name][key] = setter;                                                                                // 154
    }                                                                                                                  // 155
  }                                                                                                                    // 156
                                                                                                                       // 157
  this.runSetters(names);                                                                                              // 158
};                                                                                                                     // 159
                                                                                                                       // 160
Ep.runGetters = function (names) {                                                                                     // 161
  // Before running getters, copy anything added to the exports object                                                 // 162
  // over to the namespace. Values returned by getters take precedence                                                 // 163
  // over these values, but we don't want to miss anything.                                                            // 164
  syncExportsToNamespace(this, names);                                                                                 // 165
                                                                                                                       // 166
  if (names === void 0 ||                                                                                              // 167
      names.indexOf("*") >= 0) {                                                                                       // 168
    names = Object.keys(this.getters);                                                                                 // 169
  }                                                                                                                    // 170
                                                                                                                       // 171
  var nameCount = names.length;                                                                                        // 172
                                                                                                                       // 173
  for (var i = 0; i < nameCount; ++i) {                                                                                // 174
    var name = names[i];                                                                                               // 175
    var value = runGetter(this, name);                                                                                 // 176
                                                                                                                       // 177
    // If the getter is run without error, update both entry.namespace and                                             // 178
    // module.exports with the current value so that CommonJS require                                                  // 179
    // calls remain consistent with module.watch.                                                                      // 180
    if (value !== GETTER_ERROR) {                                                                                      // 181
      this.namespace[name] = value;                                                                                    // 182
      this.exports[name] = value;                                                                                      // 183
    }                                                                                                                  // 184
  }                                                                                                                    // 185
};                                                                                                                     // 186
                                                                                                                       // 187
function syncExportsToNamespace(entry, names) {                                                                        // 188
  var setDefault = false;                                                                                              // 189
                                                                                                                       // 190
  if (! utils.getESModule(entry.exports)) {                                                                            // 191
    // If the module entry is managing overrides module.exports, that                                                  // 192
    // value should be exposed as the .default property of the namespace,                                              // 193
    // unless module.exports is marked as an ECMASCript module.                                                        // 194
    entry.namespace.default = entry.exports;                                                                           // 195
    setDefault = true;                                                                                                 // 196
  }                                                                                                                    // 197
                                                                                                                       // 198
  if (! utils.isObjectLike(entry.exports)) {                                                                           // 199
    return;                                                                                                            // 200
  }                                                                                                                    // 201
                                                                                                                       // 202
  if (names === void 0 ||                                                                                              // 203
      names.indexOf("*") >= 0) {                                                                                       // 204
    names = Object.keys(entry.exports);                                                                                // 205
  }                                                                                                                    // 206
                                                                                                                       // 207
  names.forEach(function (key) {                                                                                       // 208
    // Don't set any properties for which a getter function exists in                                                  // 209
    // entry.getters, don't accidentally override entry.namespace.default,                                             // 210
    // and only copy own properties from entry.exports.                                                                // 211
    if (! hasOwn.call(entry.getters, key) &&                                                                           // 212
        ! (setDefault && key === "default") &&                                                                         // 213
        hasOwn.call(entry.exports, key)) {                                                                             // 214
      utils.copyKey(key, entry.namespace, entry.exports);                                                              // 215
    }                                                                                                                  // 216
  });                                                                                                                  // 217
}                                                                                                                      // 218
                                                                                                                       // 219
// Called by module.runSetters once the module this Entry is managing has                                              // 220
// finished loading.                                                                                                   // 221
Ep.hasLoaded = function () {                                                                                           // 222
  if (this._loaded) {                                                                                                  // 223
    return true;                                                                                                       // 224
  }                                                                                                                    // 225
                                                                                                                       // 226
  var ids = Object.keys(this.ownerModules);                                                                            // 227
  var idCount = ids.length;                                                                                            // 228
                                                                                                                       // 229
  for (var i = 0; i < idCount; ++i) {                                                                                  // 230
    var owner = this.ownerModules[ids[i]];                                                                             // 231
    if (! owner.loaded && owner.exports === this.exports) {                                                            // 232
      // At least one owner module whose exports are still ===                                                         // 233
      // this.exports has not finished loading, so this this Entry cannot                                              // 234
      // be marked as loaded yet.                                                                                      // 235
      return false;                                                                                                    // 236
    }                                                                                                                  // 237
  }                                                                                                                    // 238
                                                                                                                       // 239
  // Set entry._loaded = true only if all the modules in                                                               // 240
  // entry.ownerModules that are still associated with entry.exports have                                              // 241
  // finished loading.                                                                                                 // 242
  return this._loaded = true;                                                                                          // 243
};                                                                                                                     // 244
                                                                                                                       // 245
// Called whenever module.exports might have changed, to trigger any                                                   // 246
// setters associated with the newly exported values. The names parameter                                              // 247
// is optional; without it, all getters and setters will run.                                                          // 248
Ep.runSetters = function (names) {                                                                                     // 249
  // Make sure entry.namespace and module.exports are up to date before we                                             // 250
  // call getExportByName(entry, name).                                                                                // 251
  this.runGetters(names);                                                                                              // 252
                                                                                                                       // 253
  // Lazily-initialized object mapping parent module identifiers to parent                                             // 254
  // module objects whose setters we might need to run.                                                                // 255
  var parents;                                                                                                         // 256
                                                                                                                       // 257
  forEachSetter(this, names, function (setter, name, value) {                                                          // 258
    if (parents === void 0) {                                                                                          // 259
      parents = Object.create(null);                                                                                   // 260
    }                                                                                                                  // 261
    parents[setter.parent.id] = setter.parent;                                                                         // 262
                                                                                                                       // 263
    // The param order for setters is `value` then `name` because the `name`                                           // 264
    // param is only used by namespace exports.                                                                        // 265
    setter(value, name);                                                                                               // 266
  });                                                                                                                  // 267
                                                                                                                       // 268
  if (! parents) {                                                                                                     // 269
    return;                                                                                                            // 270
  }                                                                                                                    // 271
                                                                                                                       // 272
  // If any of the setters updated the module.exports of a parent module,                                              // 273
  // or updated local variables that are exported by that parent module,                                               // 274
  // then we must re-run any setters registered by that parent module.                                                 // 275
  var parentIDs = Object.keys(parents);                                                                                // 276
  var parentIDCount = parentIDs.length;                                                                                // 277
                                                                                                                       // 278
  for (var i = 0; i < parentIDCount; ++i) {                                                                            // 279
    // What happens if parents[parentIDs[id]] === module, or if                                                        // 280
    // longer cycles exist in the parent chain? Thanks to our setter.last                                              // 281
    // bookkeeping above, the runSetters broadcast will only proceed                                                   // 282
    // as far as there are any actual changes to report.                                                               // 283
    var parent = parents[parentIDs[i]];                                                                                // 284
    var parentEntry = Entry.get(parent.exports);                                                                       // 285
    if (parentEntry) {                                                                                                 // 286
      parentEntry.runSetters();                                                                                        // 287
    }                                                                                                                  // 288
  }                                                                                                                    // 289
};                                                                                                                     // 290
                                                                                                                       // 291
function callSetterIfNecessary(setter, name, value, callback) {                                                        // 292
  if (name === "__esModule") {                                                                                         // 293
    // Ignore setters asking for module.exports.__esModule.                                                            // 294
    return;                                                                                                            // 295
  }                                                                                                                    // 296
                                                                                                                       // 297
  var shouldCall = false;                                                                                              // 298
                                                                                                                       // 299
  if (setter.last === void 0) {                                                                                        // 300
    setter.last = Object.create(null);                                                                                 // 301
    // Always call the setter if it has never been called before.                                                      // 302
    shouldCall = true;                                                                                                 // 303
  }                                                                                                                    // 304
                                                                                                                       // 305
  function changed(name, value) {                                                                                      // 306
    var valueToCompare = value;                                                                                        // 307
    if (valueToCompare !== valueToCompare) {                                                                           // 308
      valueToCompare = NAN;                                                                                            // 309
    } else if (valueToCompare === void 0) {                                                                            // 310
      valueToCompare = UNDEFINED;                                                                                      // 311
    }                                                                                                                  // 312
                                                                                                                       // 313
    if (setter.last[name] === valueToCompare) {                                                                        // 314
      return false;                                                                                                    // 315
    }                                                                                                                  // 316
                                                                                                                       // 317
    setter.last[name] = valueToCompare;                                                                                // 318
    return true;                                                                                                       // 319
  }                                                                                                                    // 320
                                                                                                                       // 321
  if (name === "*") {                                                                                                  // 322
    var keys = safeKeys(value);                                                                                        // 323
    var keyCount = keys.length;                                                                                        // 324
    for (var i = 0; i < keyCount; ++i) {                                                                               // 325
      var key = keys[i];                                                                                               // 326
      // Evaluating value[key] is risky because the property might be                                                  // 327
      // defined by a getter function that logs a deprecation warning (or                                              // 328
      // worse) when evaluated. For example, Node uses this trick to                                                   // 329
      // display a deprecation warning whenever crypto.createCredentials                                               // 330
      // is accessed. Fortunately, when value[key] is defined by a getter                                              // 331
      // function, it's enough to check whether the getter function itself                                             // 332
      // has changed, since we are careful elsewhere to preserve getters                                               // 333
      // rather than prematurely evaluating them.                                                                      // 334
      if (changed(key, utils.valueOrGetter(value, key))) {                                                             // 335
        shouldCall = true;                                                                                             // 336
      }                                                                                                                // 337
    }                                                                                                                  // 338
  } else if (changed(name, value)) {                                                                                   // 339
    shouldCall = true;                                                                                                 // 340
  }                                                                                                                    // 341
                                                                                                                       // 342
  if (shouldCall) {                                                                                                    // 343
    // Only invoke the callback if we have not called this setter                                                      // 344
    // (with a value of this name) before, or the current value is                                                     // 345
    // different from the last value we passed to this setter.                                                         // 346
    return callback(setter, name, value);                                                                              // 347
  }                                                                                                                    // 348
}                                                                                                                      // 349
                                                                                                                       // 350
// Invoke the given callback once for every (setter, name, value) that needs to                                        // 351
// be called. Note that forEachSetter does not call any setters itself, only the                                       // 352
// given callback.                                                                                                     // 353
function forEachSetter(entry, names, callback) {                                                                       // 354
  var needToCheckNames = true;                                                                                         // 355
                                                                                                                       // 356
  if (names === void 0) {                                                                                              // 357
    names = Object.keys(entry.setters);                                                                                // 358
    needToCheckNames = false;                                                                                          // 359
  }                                                                                                                    // 360
                                                                                                                       // 361
  var nameCount = names.length;                                                                                        // 362
                                                                                                                       // 363
  for (var i = 0; i < nameCount; ++i) {                                                                                // 364
    var name = names[i];                                                                                               // 365
                                                                                                                       // 366
    if (needToCheckNames &&                                                                                            // 367
        ! hasOwn.call(entry.setters, name)) {                                                                          // 368
      continue;                                                                                                        // 369
    }                                                                                                                  // 370
                                                                                                                       // 371
    var setters = entry.setters[name];                                                                                 // 372
    var keys = Object.keys(setters);                                                                                   // 373
    var keyCount = keys.length;                                                                                        // 374
                                                                                                                       // 375
    for (var j = 0; j < keyCount; ++j) {                                                                               // 376
      var key = keys[j];                                                                                               // 377
      var value = getExportByName(entry, name);                                                                        // 378
                                                                                                                       // 379
      callSetterIfNecessary(setters[key], name, value, callback);                                                      // 380
                                                                                                                       // 381
      var getter = entry.getters[name];                                                                                // 382
      if (typeof getter === "function" &&                                                                              // 383
          // Sometimes a getter function will throw because it's called                                                // 384
          // before the variable it's supposed to return has been                                                      // 385
          // initialized, so we need to know that the getter function has                                              // 386
          // run to completion at least once.                                                                          // 387
          getter.runCount > 0 &&                                                                                       // 388
          getter.constant) {                                                                                           // 389
        // If we happen to know that this getter function has run                                                      // 390
        // successfully, and will never return a different value, then we                                              // 391
        // can forget the corresponding setter, because we've already                                                  // 392
        // reported that constant value. Note that we can't forget the                                                 // 393
        // getter, because we need to remember the original value in case                                              // 394
        // anyone tampers with entry.exports[name].                                                                    // 395
        delete setters[key];                                                                                           // 396
      }                                                                                                                // 397
    }                                                                                                                  // 398
  }                                                                                                                    // 399
}                                                                                                                      // 400
                                                                                                                       // 401
function getExportByName(entry, name) {                                                                                // 402
  if (name === "*") {                                                                                                  // 403
    return entry.namespace;                                                                                            // 404
  }                                                                                                                    // 405
                                                                                                                       // 406
  if (hasOwn.call(entry.namespace, name)) {                                                                            // 407
    return entry.namespace[name];                                                                                      // 408
  }                                                                                                                    // 409
                                                                                                                       // 410
  var exported = entry.exports;                                                                                        // 411
                                                                                                                       // 412
  if (name === "default" &&                                                                                            // 413
      ! (utils.getESModule(exported) &&                                                                                // 414
         "default" in exported)) {                                                                                     // 415
    return exported;                                                                                                   // 416
  }                                                                                                                    // 417
                                                                                                                       // 418
  if (exported == null) {                                                                                              // 419
    return;                                                                                                            // 420
  }                                                                                                                    // 421
                                                                                                                       // 422
  return exported[name];                                                                                               // 423
}                                                                                                                      // 424
                                                                                                                       // 425
function makeUniqueKey() {                                                                                             // 426
  return Math.random()                                                                                                 // 427
    .toString(36)                                                                                                      // 428
    // Add an incrementing salt to help track key ordering and also                                                    // 429
    // absolutely guarantee we never return the same key twice.                                                        // 430
    .replace("0.", ++keySalt + "$");                                                                                   // 431
}                                                                                                                      // 432
                                                                                                                       // 433
function runGetter(entry, name) {                                                                                      // 434
  var getter = entry.getters[name];                                                                                    // 435
  try {                                                                                                                // 436
    var result = getter();                                                                                             // 437
    ++getter.runCount;                                                                                                 // 438
    return result;                                                                                                     // 439
  } catch (e) {}                                                                                                       // 440
  return GETTER_ERROR;                                                                                                 // 441
}                                                                                                                      // 442
                                                                                                                       // 443
module.exports = Entry;                                                                                                // 444
                                                                                                                       // 445
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}}}},"babel-runtime":{"helpers":{"classCallCheck.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/classCallCheck.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
exports.default = function (instance, Constructor) {                                                                   // 5
  if (!(instance instanceof Constructor)) {                                                                            // 6
    throw new TypeError("Cannot call a class as a function");                                                          // 7
  }                                                                                                                    // 8
};                                                                                                                     // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"possibleConstructorReturn.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/possibleConstructorReturn.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _typeof2 = require("../helpers/typeof");                                                                           // 5
                                                                                                                       // 6
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = function (self, call) {                                                                              // 11
  if (!self) {                                                                                                         // 12
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");                             // 13
  }                                                                                                                    // 14
                                                                                                                       // 15
  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};                                                                                                                     // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"typeof.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/typeof.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _iterator = require("../core-js/symbol/iterator");                                                                 // 5
                                                                                                                       // 6
var _iterator2 = _interopRequireDefault(_iterator);                                                                    // 7
                                                                                                                       // 8
var _symbol = require("../core-js/symbol");                                                                            // 9
                                                                                                                       // 10
var _symbol2 = _interopRequireDefault(_symbol);                                                                        // 11
                                                                                                                       // 12
var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
                                                                                                                       // 14
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 15
                                                                                                                       // 16
exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);                                                      // 18
} : function (obj) {                                                                                                   // 19
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};                                                                                                                     // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"inherits.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/inherits.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _setPrototypeOf = require("../core-js/object/set-prototype-of");                                                   // 5
                                                                                                                       // 6
var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);                                                        // 7
                                                                                                                       // 8
var _create = require("../core-js/object/create");                                                                     // 9
                                                                                                                       // 10
var _create2 = _interopRequireDefault(_create);                                                                        // 11
                                                                                                                       // 12
var _typeof2 = require("../helpers/typeof");                                                                           // 13
                                                                                                                       // 14
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       // 15
                                                                                                                       // 16
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 17
                                                                                                                       // 18
exports.default = function (subClass, superClass) {                                                                    // 19
  if (typeof superClass !== "function" && superClass !== null) {                                                       // 20
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }                                                                                                                    // 22
                                                                                                                       // 23
  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {                                     // 24
    constructor: {                                                                                                     // 25
      value: subClass,                                                                                                 // 26
      enumerable: false,                                                                                               // 27
      writable: true,                                                                                                  // 28
      configurable: true                                                                                               // 29
    }                                                                                                                  // 30
  });                                                                                                                  // 31
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};                                                                                                                     // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"toConsumableArray.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/toConsumableArray.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _from = require("../core-js/array/from");                                                                          // 5
                                                                                                                       // 6
var _from2 = _interopRequireDefault(_from);                                                                            // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = function (arr) {                                                                                     // 11
  if (Array.isArray(arr)) {                                                                                            // 12
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {                                                   // 13
      arr2[i] = arr[i];                                                                                                // 14
    }                                                                                                                  // 15
                                                                                                                       // 16
    return arr2;                                                                                                       // 17
  } else {                                                                                                             // 18
    return (0, _from2.default)(arr);                                                                                   // 19
  }                                                                                                                    // 20
};                                                                                                                     // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"extends.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/helpers/extends.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _assign = require("../core-js/object/assign");                                                                     // 5
                                                                                                                       // 6
var _assign2 = _interopRequireDefault(_assign);                                                                        // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = _assign2.default || function (target) {                                                              // 11
  for (var i = 1; i < arguments.length; i++) {                                                                         // 12
    var source = arguments[i];                                                                                         // 13
                                                                                                                       // 14
    for (var key in source) {                                                                                          // 15
      if (Object.prototype.hasOwnProperty.call(source, key)) {                                                         // 16
        target[key] = source[key];                                                                                     // 17
      }                                                                                                                // 18
    }                                                                                                                  // 19
  }                                                                                                                    // 20
                                                                                                                       // 21
  return target;                                                                                                       // 22
};                                                                                                                     // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"core-js":{"symbol":{"iterator.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/symbol/iterator.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };                       // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"symbol.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/symbol.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };                                // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"object":{"set-prototype-of.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/object/set-prototype-of.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };               // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"create.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/object/create.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };                         // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"assign.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/object/assign.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };                         // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"array":{"from.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/core-js/array/from.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = { "default": require("core-js/library/fn/array/from"), __esModule: true };                            // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"package.json":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/package.json                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = {                                                                                                     // 1
  "_from": "babel-runtime@^6.26.0",                                                                                    // 2
  "_id": "babel-runtime@6.26.0",                                                                                       // 3
  "_inBundle": false,                                                                                                  // 4
  "_integrity": "sha1-llxwWGaOgrVde/4E/yM3vItWR/4=",                                                                   // 5
  "_location": "/babel-runtime",                                                                                       // 6
  "_phantomChildren": {},                                                                                              // 7
  "_requested": {                                                                                                      // 8
    "type": "range",                                                                                                   // 9
    "registry": true,                                                                                                  // 10
    "raw": "babel-runtime@^6.26.0",                                                                                    // 11
    "name": "babel-runtime",                                                                                           // 12
    "escapedName": "babel-runtime",                                                                                    // 13
    "rawSpec": "^6.26.0",                                                                                              // 14
    "saveSpec": null,                                                                                                  // 15
    "fetchSpec": "^6.26.0"                                                                                             // 16
  },                                                                                                                   // 17
  "_requiredBy": [                                                                                                     // 18
    "/"                                                                                                                // 19
  ],                                                                                                                   // 20
  "_resolved": "https://registry.npmjs.org/babel-runtime/-/babel-runtime-6.26.0.tgz",                                  // 21
  "_shasum": "965c7058668e82b55d7bfe04ff2337bc8b5647fe",                                                               // 22
  "_spec": "babel-runtime@^6.26.0",                                                                                    // 23
  "_where": "/home/victor/projetos/meteor-react-miniblog",                                                             // 24
  "author": {                                                                                                          // 25
    "name": "Sebastian McKenzie",                                                                                      // 26
    "email": "sebmck@gmail.com"                                                                                        // 27
  },                                                                                                                   // 28
  "bundleDependencies": false,                                                                                         // 29
  "dependencies": {                                                                                                    // 30
    "core-js": "^2.4.0",                                                                                               // 31
    "regenerator-runtime": "^0.11.0"                                                                                   // 32
  },                                                                                                                   // 33
  "deprecated": false,                                                                                                 // 34
  "description": "babel selfContained runtime",                                                                        // 35
  "devDependencies": {                                                                                                 // 36
    "babel-helpers": "^6.22.0",                                                                                        // 37
    "babel-plugin-transform-runtime": "^6.23.0"                                                                        // 38
  },                                                                                                                   // 39
  "license": "MIT",                                                                                                    // 40
  "name": "babel-runtime",                                                                                             // 41
  "repository": {                                                                                                      // 42
    "type": "git",                                                                                                     // 43
    "url": "https://github.com/babel/babel/tree/master/packages/babel-runtime"                                         // 44
  },                                                                                                                   // 45
  "version": "6.26.0"                                                                                                  // 46
};                                                                                                                     // 47
                                                                                                                       // 48
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"regenerator":{"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/babel-runtime/regenerator/index.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("regenerator-runtime");                                                                       // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"react":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/package.json                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "react";                                                                                                // 1
exports.version = "16.2.0";                                                                                            // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/index.js                                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
if (process.env.NODE_ENV === 'production') {                                                                           // 3
  module.exports = require('./cjs/react.production.min.js');                                                           // 4
} else {                                                                                                               // 5
  module.exports = require('./cjs/react.development.js');                                                              // 6
}                                                                                                                      // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cjs":{"react.production.min.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/cjs/react.production.min.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/** @license React v16.2.0                                                                                             // 1
 * react.production.min.js                                                                                             // 2
 *                                                                                                                     // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 *                                                                                                                     // 5
 * This source code is licensed under the MIT license found in the                                                     // 6
 * LICENSE file in the root directory of this source tree.                                                             // 7
 */                                                                                                                    // 8
                                                                                                                       // 9
'use strict';var m=require("object-assign"),n=require("fbjs/lib/emptyObject"),p=require("fbjs/lib/emptyFunction"),q="function"===typeof Symbol&&Symbol["for"],r=q?Symbol["for"]("react.element"):60103,t=q?Symbol["for"]("react.call"):60104,u=q?Symbol["for"]("react.return"):60105,v=q?Symbol["for"]("react.portal"):60106,w=q?Symbol["for"]("react.fragment"):60107,x="function"===typeof Symbol&&Symbol.iterator;
function y(a){for(var b=arguments.length-1,e="Minified React error #"+a+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d"+a,c=0;c<b;c++)e+="\x26args[]\x3d"+encodeURIComponent(arguments[c+1]);b=Error(e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");b.name="Invariant Violation";b.framesToPop=1;throw b;}
var z={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function A(a,b,e){this.props=a;this.context=b;this.refs=n;this.updater=e||z}A.prototype.isReactComponent={};A.prototype.setState=function(a,b){"object"!==typeof a&&"function"!==typeof a&&null!=a?y("85"):void 0;this.updater.enqueueSetState(this,a,b,"setState")};A.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};
function B(a,b,e){this.props=a;this.context=b;this.refs=n;this.updater=e||z}function C(){}C.prototype=A.prototype;var D=B.prototype=new C;D.constructor=B;m(D,A.prototype);D.isPureReactComponent=!0;function E(a,b,e){this.props=a;this.context=b;this.refs=n;this.updater=e||z}var F=E.prototype=new C;F.constructor=E;m(F,A.prototype);F.unstable_isAsyncReactComponent=!0;F.render=function(){return this.props.children};var G={current:null},H=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};
function J(a,b,e){var c,d={},g=null,k=null;if(null!=b)for(c in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=""+b.key),b)H.call(b,c)&&!I.hasOwnProperty(c)&&(d[c]=b[c]);var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){for(var h=Array(f),l=0;l<f;l++)h[l]=arguments[l+2];d.children=h}if(a&&a.defaultProps)for(c in f=a.defaultProps,f)void 0===d[c]&&(d[c]=f[c]);return{$$typeof:r,type:a,key:g,ref:k,props:d,_owner:G.current}}function K(a){return"object"===typeof a&&null!==a&&a.$$typeof===r}
function escape(a){var b={"\x3d":"\x3d0",":":"\x3d2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var L=/\/+/g,M=[];function N(a,b,e,c){if(M.length){var d=M.pop();d.result=a;d.keyPrefix=b;d.func=e;d.context=c;d.count=0;return d}return{result:a,keyPrefix:b,func:e,context:c,count:0}}function O(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>M.length&&M.push(a)}
function P(a,b,e,c){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case r:case t:case u:case v:g=!0}}if(g)return e(c,a,""===b?"."+Q(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+Q(d,k);g+=P(d,f,e,c)}else if(null===a||"undefined"===typeof a?f=null:(f=x&&a[x]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=
f.call(a),k=0;!(d=a.next()).done;)d=d.value,f=b+Q(d,k++),g+=P(d,f,e,c);else"object"===d&&(e=""+a,y("31","[object Object]"===e?"object with keys {"+Object.keys(a).join(", ")+"}":e,""));return g}function Q(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function R(a,b){a.func.call(a.context,b,a.count++)}
function S(a,b,e){var c=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?T(a,c,e,p.thatReturnsArgument):null!=a&&(K(a)&&(b=d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(L,"$\x26/")+"/")+e,a={$$typeof:r,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}),c.push(a))}function T(a,b,e,c,d){var g="";null!=e&&(g=(""+e).replace(L,"$\x26/")+"/");b=N(b,g,c,d);null==a||P(a,"",S,b);O(b)}
var U={Children:{map:function(a,b,e){if(null==a)return a;var c=[];T(a,c,null,b,e);return c},forEach:function(a,b,e){if(null==a)return a;b=N(null,null,b,e);null==a||P(a,"",R,b);O(b)},count:function(a){return null==a?0:P(a,"",p.thatReturnsNull,null)},toArray:function(a){var b=[];T(a,b,null,p.thatReturnsArgument);return b},only:function(a){K(a)?void 0:y("143");return a}},Component:A,PureComponent:B,unstable_AsyncComponent:E,Fragment:w,createElement:J,cloneElement:function(a,b,e){var c=m({},a.props),
d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=G.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)H.call(b,h)&&!I.hasOwnProperty(h)&&(c[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)c.children=e;else if(1<h){f=Array(h);for(var l=0;l<h;l++)f[l]=arguments[l+2];c.children=f}return{$$typeof:r,type:a.type,key:d,ref:g,props:c,_owner:k}},createFactory:function(a){var b=J.bind(null,a);b.type=a;return b},
isValidElement:K,version:"16.2.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:G,assign:m}},V=Object.freeze({default:U}),W=V&&U||V;module.exports=W["default"]?W["default"]:W;
                                                                                                                       // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"react.development.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react/cjs/react.development.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/** @license React v16.2.0                                                                                             // 1
 * react.development.js                                                                                                // 2
 *                                                                                                                     // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 *                                                                                                                     // 5
 * This source code is licensed under the MIT license found in the                                                     // 6
 * LICENSE file in the root directory of this source tree.                                                             // 7
 */                                                                                                                    // 8
                                                                                                                       // 9
'use strict';                                                                                                          // 10
                                                                                                                       // 11
                                                                                                                       // 12
                                                                                                                       // 13
if (process.env.NODE_ENV !== "production") {                                                                           // 14
  (function() {                                                                                                        // 15
'use strict';                                                                                                          // 16
                                                                                                                       // 17
var _assign = require('object-assign');                                                                                // 18
var emptyObject = require('fbjs/lib/emptyObject');                                                                     // 19
var invariant = require('fbjs/lib/invariant');                                                                         // 20
var warning = require('fbjs/lib/warning');                                                                             // 21
var emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 22
var checkPropTypes = require('prop-types/checkPropTypes');                                                             // 23
                                                                                                                       // 24
// TODO: this is special because it gets imported during build.                                                        // 25
                                                                                                                       // 26
var ReactVersion = '16.2.0';                                                                                           // 27
                                                                                                                       // 28
// The Symbol used to tag the ReactElement-like types. If there is no native Symbol                                    // 29
// nor polyfill, then a plain number is used for performance.                                                          // 30
var hasSymbol = typeof Symbol === 'function' && Symbol['for'];                                                         // 31
                                                                                                                       // 32
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;                                          // 33
var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;                                                // 34
var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;                                            // 35
var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;                                            // 36
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;                                        // 37
                                                                                                                       // 38
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;                                           // 39
var FAUX_ITERATOR_SYMBOL = '@@iterator';                                                                               // 40
                                                                                                                       // 41
function getIteratorFn(maybeIterable) {                                                                                // 42
  if (maybeIterable === null || typeof maybeIterable === 'undefined') {                                                // 43
    return null;                                                                                                       // 44
  }                                                                                                                    // 45
  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
  if (typeof maybeIterator === 'function') {                                                                           // 47
    return maybeIterator;                                                                                              // 48
  }                                                                                                                    // 49
  return null;                                                                                                         // 50
}                                                                                                                      // 51
                                                                                                                       // 52
/**                                                                                                                    // 53
 * WARNING: DO NOT manually require this module.                                                                       // 54
 * This is a replacement for `invariant(...)` used by the error code system                                            // 55
 * and will _only_ be required by the corresponding babel pass.                                                        // 56
 * It always throws.                                                                                                   // 57
 */                                                                                                                    // 58
                                                                                                                       // 59
/**                                                                                                                    // 60
 * Forked from fbjs/warning:                                                                                           // 61
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *                                                                                                                     // 63
 * Only change is we use console.warn instead of console.error,                                                        // 64
 * and do nothing when 'console' is not supported.                                                                     // 65
 * This really simplifies the code.                                                                                    // 66
 * ---                                                                                                                 // 67
 * Similar to invariant but only logs a warning if the condition is not met.                                           // 68
 * This can be used to log issues in development environments in critical                                              // 69
 * paths. Removing the logging code for production environments will keep the                                          // 70
 * same logic and follow the same code paths.                                                                          // 71
 */                                                                                                                    // 72
                                                                                                                       // 73
var lowPriorityWarning = function () {};                                                                               // 74
                                                                                                                       // 75
{                                                                                                                      // 76
  var printWarning = function (format) {                                                                               // 77
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {          // 78
      args[_key - 1] = arguments[_key];                                                                                // 79
    }                                                                                                                  // 80
                                                                                                                       // 81
    var argIndex = 0;                                                                                                  // 82
    var message = 'Warning: ' + format.replace(/%s/g, function () {                                                    // 83
      return args[argIndex++];                                                                                         // 84
    });                                                                                                                // 85
    if (typeof console !== 'undefined') {                                                                              // 86
      console.warn(message);                                                                                           // 87
    }                                                                                                                  // 88
    try {                                                                                                              // 89
      // --- Welcome to debugging React ---                                                                            // 90
      // This error was thrown as a convenience so that you can use this stack                                         // 91
      // to find the callsite that caused this warning to fire.                                                        // 92
      throw new Error(message);                                                                                        // 93
    } catch (x) {}                                                                                                     // 94
  };                                                                                                                   // 95
                                                                                                                       // 96
  lowPriorityWarning = function (condition, format) {                                                                  // 97
    if (format === undefined) {                                                                                        // 98
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');               // 99
    }                                                                                                                  // 100
    if (!condition) {                                                                                                  // 101
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];                                                                            // 103
      }                                                                                                                // 104
                                                                                                                       // 105
      printWarning.apply(undefined, [format].concat(args));                                                            // 106
    }                                                                                                                  // 107
  };                                                                                                                   // 108
}                                                                                                                      // 109
                                                                                                                       // 110
var lowPriorityWarning$1 = lowPriorityWarning;                                                                         // 111
                                                                                                                       // 112
var didWarnStateUpdateForUnmountedComponent = {};                                                                      // 113
                                                                                                                       // 114
function warnNoop(publicInstance, callerName) {                                                                        // 115
  {                                                                                                                    // 116
    var constructor = publicInstance.constructor;                                                                      // 117
    var componentName = constructor && (constructor.displayName || constructor.name) || 'ReactClass';                  // 118
    var warningKey = componentName + '.' + callerName;                                                                 // 119
    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {                                                         // 120
      return;                                                                                                          // 121
    }                                                                                                                  // 122
    warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\n\nPlease check the code for the %s component.', callerName, callerName, componentName);
    didWarnStateUpdateForUnmountedComponent[warningKey] = true;                                                        // 124
  }                                                                                                                    // 125
}                                                                                                                      // 126
                                                                                                                       // 127
/**                                                                                                                    // 128
 * This is the abstract API for an update queue.                                                                       // 129
 */                                                                                                                    // 130
var ReactNoopUpdateQueue = {                                                                                           // 131
  /**                                                                                                                  // 132
   * Checks whether or not this composite component is mounted.                                                        // 133
   * @param {ReactClass} publicInstance The instance we want to test.                                                  // 134
   * @return {boolean} True if mounted, false otherwise.                                                               // 135
   * @protected                                                                                                        // 136
   * @final                                                                                                            // 137
   */                                                                                                                  // 138
  isMounted: function (publicInstance) {                                                                               // 139
    return false;                                                                                                      // 140
  },                                                                                                                   // 141
                                                                                                                       // 142
  /**                                                                                                                  // 143
   * Forces an update. This should only be invoked when it is known with                                               // 144
   * certainty that we are **not** in a DOM transaction.                                                               // 145
   *                                                                                                                   // 146
   * You may want to call this when you know that some deeper aspect of the                                            // 147
   * component's state has changed but `setState` was not called.                                                      // 148
   *                                                                                                                   // 149
   * This will not invoke `shouldComponentUpdate`, but it will invoke                                                  // 150
   * `componentWillUpdate` and `componentDidUpdate`.                                                                   // 151
   *                                                                                                                   // 152
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 153
   * @param {?function} callback Called after component is updated.                                                    // 154
   * @param {?string} callerName name of the calling function in the public API.                                       // 155
   * @internal                                                                                                         // 156
   */                                                                                                                  // 157
  enqueueForceUpdate: function (publicInstance, callback, callerName) {                                                // 158
    warnNoop(publicInstance, 'forceUpdate');                                                                           // 159
  },                                                                                                                   // 160
                                                                                                                       // 161
  /**                                                                                                                  // 162
   * Replaces all of the state. Always use this or `setState` to mutate state.                                         // 163
   * You should treat `this.state` as immutable.                                                                       // 164
   *                                                                                                                   // 165
   * There is no guarantee that `this.state` will be immediately updated, so                                           // 166
   * accessing `this.state` after calling this method may return the old value.                                        // 167
   *                                                                                                                   // 168
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 169
   * @param {object} completeState Next state.                                                                         // 170
   * @param {?function} callback Called after component is updated.                                                    // 171
   * @param {?string} callerName name of the calling function in the public API.                                       // 172
   * @internal                                                                                                         // 173
   */                                                                                                                  // 174
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {                                // 175
    warnNoop(publicInstance, 'replaceState');                                                                          // 176
  },                                                                                                                   // 177
                                                                                                                       // 178
  /**                                                                                                                  // 179
   * Sets a subset of the state. This only exists because _pendingState is                                             // 180
   * internal. This provides a merging strategy that is not available to deep                                          // 181
   * properties which is confusing. TODO: Expose pendingState or don't use it                                          // 182
   * during the merge.                                                                                                 // 183
   *                                                                                                                   // 184
   * @param {ReactClass} publicInstance The instance that should rerender.                                             // 185
   * @param {object} partialState Next partial state to be merged with state.                                          // 186
   * @param {?function} callback Called after component is updated.                                                    // 187
   * @param {?string} Name of the calling function in the public API.                                                  // 188
   * @internal                                                                                                         // 189
   */                                                                                                                  // 190
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {                                     // 191
    warnNoop(publicInstance, 'setState');                                                                              // 192
  }                                                                                                                    // 193
};                                                                                                                     // 194
                                                                                                                       // 195
/**                                                                                                                    // 196
 * Base class helpers for the updating state of a component.                                                           // 197
 */                                                                                                                    // 198
function Component(props, context, updater) {                                                                          // 199
  this.props = props;                                                                                                  // 200
  this.context = context;                                                                                              // 201
  this.refs = emptyObject;                                                                                             // 202
  // We initialize the default updater but the real one gets injected by the                                           // 203
  // renderer.                                                                                                         // 204
  this.updater = updater || ReactNoopUpdateQueue;                                                                      // 205
}                                                                                                                      // 206
                                                                                                                       // 207
Component.prototype.isReactComponent = {};                                                                             // 208
                                                                                                                       // 209
/**                                                                                                                    // 210
 * Sets a subset of the state. Always use this to mutate                                                               // 211
 * state. You should treat `this.state` as immutable.                                                                  // 212
 *                                                                                                                     // 213
 * There is no guarantee that `this.state` will be immediately updated, so                                             // 214
 * accessing `this.state` after calling this method may return the old value.                                          // 215
 *                                                                                                                     // 216
 * There is no guarantee that calls to `setState` will run synchronously,                                              // 217
 * as they may eventually be batched together.  You can provide an optional                                            // 218
 * callback that will be executed when the call to setState is actually                                                // 219
 * completed.                                                                                                          // 220
 *                                                                                                                     // 221
 * When a function is provided to setState, it will be called at some point in                                         // 222
 * the future (not synchronously). It will be called with the up to date                                               // 223
 * component arguments (state, props, context). These values can be different                                          // 224
 * from this.* because your function may be called after receiveProps but before                                       // 225
 * shouldComponentUpdate, and this new state, props, and context will not yet be                                       // 226
 * assigned to this.                                                                                                   // 227
 *                                                                                                                     // 228
 * @param {object|function} partialState Next partial state or function to                                             // 229
 *        produce next partial state to be merged with current state.                                                  // 230
 * @param {?function} callback Called after state is updated.                                                          // 231
 * @final                                                                                                              // 232
 * @protected                                                                                                          // 233
 */                                                                                                                    // 234
Component.prototype.setState = function (partialState, callback) {                                                     // 235
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
  this.updater.enqueueSetState(this, partialState, callback, 'setState');                                              // 237
};                                                                                                                     // 238
                                                                                                                       // 239
/**                                                                                                                    // 240
 * Forces an update. This should only be invoked when it is known with                                                 // 241
 * certainty that we are **not** in a DOM transaction.                                                                 // 242
 *                                                                                                                     // 243
 * You may want to call this when you know that some deeper aspect of the                                              // 244
 * component's state has changed but `setState` was not called.                                                        // 245
 *                                                                                                                     // 246
 * This will not invoke `shouldComponentUpdate`, but it will invoke                                                    // 247
 * `componentWillUpdate` and `componentDidUpdate`.                                                                     // 248
 *                                                                                                                     // 249
 * @param {?function} callback Called after update is complete.                                                        // 250
 * @final                                                                                                              // 251
 * @protected                                                                                                          // 252
 */                                                                                                                    // 253
Component.prototype.forceUpdate = function (callback) {                                                                // 254
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');                                                      // 255
};                                                                                                                     // 256
                                                                                                                       // 257
/**                                                                                                                    // 258
 * Deprecated APIs. These APIs used to exist on classic React classes but since                                        // 259
 * we would like to deprecate them, we're not going to move them over to this                                          // 260
 * modern base class. Instead, we define a getter that warns if it's accessed.                                         // 261
 */                                                                                                                    // 262
{                                                                                                                      // 263
  var deprecatedAPIs = {                                                                                               // 264
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };                                                                                                                   // 267
  var defineDeprecationWarning = function (methodName, info) {                                                         // 268
    Object.defineProperty(Component.prototype, methodName, {                                                           // 269
      get: function () {                                                                                               // 270
        lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);  // 271
        return undefined;                                                                                              // 272
      }                                                                                                                // 273
    });                                                                                                                // 274
  };                                                                                                                   // 275
  for (var fnName in deprecatedAPIs) {                                                                                 // 276
    if (deprecatedAPIs.hasOwnProperty(fnName)) {                                                                       // 277
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);                                                        // 278
    }                                                                                                                  // 279
  }                                                                                                                    // 280
}                                                                                                                      // 281
                                                                                                                       // 282
/**                                                                                                                    // 283
 * Base class helpers for the updating state of a component.                                                           // 284
 */                                                                                                                    // 285
function PureComponent(props, context, updater) {                                                                      // 286
  // Duplicated from Component.                                                                                        // 287
  this.props = props;                                                                                                  // 288
  this.context = context;                                                                                              // 289
  this.refs = emptyObject;                                                                                             // 290
  // We initialize the default updater but the real one gets injected by the                                           // 291
  // renderer.                                                                                                         // 292
  this.updater = updater || ReactNoopUpdateQueue;                                                                      // 293
}                                                                                                                      // 294
                                                                                                                       // 295
function ComponentDummy() {}                                                                                           // 296
ComponentDummy.prototype = Component.prototype;                                                                        // 297
var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();                                           // 298
pureComponentPrototype.constructor = PureComponent;                                                                    // 299
// Avoid an extra prototype jump for these methods.                                                                    // 300
_assign(pureComponentPrototype, Component.prototype);                                                                  // 301
pureComponentPrototype.isPureReactComponent = true;                                                                    // 302
                                                                                                                       // 303
function AsyncComponent(props, context, updater) {                                                                     // 304
  // Duplicated from Component.                                                                                        // 305
  this.props = props;                                                                                                  // 306
  this.context = context;                                                                                              // 307
  this.refs = emptyObject;                                                                                             // 308
  // We initialize the default updater but the real one gets injected by the                                           // 309
  // renderer.                                                                                                         // 310
  this.updater = updater || ReactNoopUpdateQueue;                                                                      // 311
}                                                                                                                      // 312
                                                                                                                       // 313
var asyncComponentPrototype = AsyncComponent.prototype = new ComponentDummy();                                         // 314
asyncComponentPrototype.constructor = AsyncComponent;                                                                  // 315
// Avoid an extra prototype jump for these methods.                                                                    // 316
_assign(asyncComponentPrototype, Component.prototype);                                                                 // 317
asyncComponentPrototype.unstable_isAsyncReactComponent = true;                                                         // 318
asyncComponentPrototype.render = function () {                                                                         // 319
  return this.props.children;                                                                                          // 320
};                                                                                                                     // 321
                                                                                                                       // 322
/**                                                                                                                    // 323
 * Keeps track of the current owner.                                                                                   // 324
 *                                                                                                                     // 325
 * The current owner is the component who should own any components that are                                           // 326
 * currently being constructed.                                                                                        // 327
 */                                                                                                                    // 328
var ReactCurrentOwner = {                                                                                              // 329
  /**                                                                                                                  // 330
   * @internal                                                                                                         // 331
   * @type {ReactComponent}                                                                                            // 332
   */                                                                                                                  // 333
  current: null                                                                                                        // 334
};                                                                                                                     // 335
                                                                                                                       // 336
var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 337
                                                                                                                       // 338
var RESERVED_PROPS = {                                                                                                 // 339
  key: true,                                                                                                           // 340
  ref: true,                                                                                                           // 341
  __self: true,                                                                                                        // 342
  __source: true                                                                                                       // 343
};                                                                                                                     // 344
                                                                                                                       // 345
var specialPropKeyWarningShown;                                                                                        // 346
var specialPropRefWarningShown;                                                                                        // 347
                                                                                                                       // 348
function hasValidRef(config) {                                                                                         // 349
  {                                                                                                                    // 350
    if (hasOwnProperty.call(config, 'ref')) {                                                                          // 351
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;                                                 // 352
      if (getter && getter.isReactWarning) {                                                                           // 353
        return false;                                                                                                  // 354
      }                                                                                                                // 355
    }                                                                                                                  // 356
  }                                                                                                                    // 357
  return config.ref !== undefined;                                                                                     // 358
}                                                                                                                      // 359
                                                                                                                       // 360
function hasValidKey(config) {                                                                                         // 361
  {                                                                                                                    // 362
    if (hasOwnProperty.call(config, 'key')) {                                                                          // 363
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;                                                 // 364
      if (getter && getter.isReactWarning) {                                                                           // 365
        return false;                                                                                                  // 366
      }                                                                                                                // 367
    }                                                                                                                  // 368
  }                                                                                                                    // 369
  return config.key !== undefined;                                                                                     // 370
}                                                                                                                      // 371
                                                                                                                       // 372
function defineKeyPropWarningGetter(props, displayName) {                                                              // 373
  var warnAboutAccessingKey = function () {                                                                            // 374
    if (!specialPropKeyWarningShown) {                                                                                 // 375
      specialPropKeyWarningShown = true;                                                                               // 376
      warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }                                                                                                                  // 378
  };                                                                                                                   // 379
  warnAboutAccessingKey.isReactWarning = true;                                                                         // 380
  Object.defineProperty(props, 'key', {                                                                                // 381
    get: warnAboutAccessingKey,                                                                                        // 382
    configurable: true                                                                                                 // 383
  });                                                                                                                  // 384
}                                                                                                                      // 385
                                                                                                                       // 386
function defineRefPropWarningGetter(props, displayName) {                                                              // 387
  var warnAboutAccessingRef = function () {                                                                            // 388
    if (!specialPropRefWarningShown) {                                                                                 // 389
      specialPropRefWarningShown = true;                                                                               // 390
      warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }                                                                                                                  // 392
  };                                                                                                                   // 393
  warnAboutAccessingRef.isReactWarning = true;                                                                         // 394
  Object.defineProperty(props, 'ref', {                                                                                // 395
    get: warnAboutAccessingRef,                                                                                        // 396
    configurable: true                                                                                                 // 397
  });                                                                                                                  // 398
}                                                                                                                      // 399
                                                                                                                       // 400
/**                                                                                                                    // 401
 * Factory method to create a new React element. This no longer adheres to                                             // 402
 * the class pattern, so do not use new to call it. Also, no instanceof check                                          // 403
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check                                 // 404
 * if something is a React Element.                                                                                    // 405
 *                                                                                                                     // 406
 * @param {*} type                                                                                                     // 407
 * @param {*} key                                                                                                      // 408
 * @param {string|object} ref                                                                                          // 409
 * @param {*} self A *temporary* helper to detect places where `this` is                                               // 410
 * different from the `owner` when React.createElement is called, so that we                                           // 411
 * can warn. We want to get rid of owner and replace string `ref`s with arrow                                          // 412
 * functions, and as long as `this` and owner are the same, there will be no                                           // 413
 * change in behavior.                                                                                                 // 414
 * @param {*} source An annotation object (added by a transpiler or otherwise)                                         // 415
 * indicating filename, line number, and/or other information.                                                         // 416
 * @param {*} owner                                                                                                    // 417
 * @param {*} props                                                                                                    // 418
 * @internal                                                                                                           // 419
 */                                                                                                                    // 420
var ReactElement = function (type, key, ref, self, source, owner, props) {                                             // 421
  var element = {                                                                                                      // 422
    // This tag allow us to uniquely identify this as a React Element                                                  // 423
    $$typeof: REACT_ELEMENT_TYPE,                                                                                      // 424
                                                                                                                       // 425
    // Built-in properties that belong on the element                                                                  // 426
    type: type,                                                                                                        // 427
    key: key,                                                                                                          // 428
    ref: ref,                                                                                                          // 429
    props: props,                                                                                                      // 430
                                                                                                                       // 431
    // Record the component responsible for creating this element.                                                     // 432
    _owner: owner                                                                                                      // 433
  };                                                                                                                   // 434
                                                                                                                       // 435
  {                                                                                                                    // 436
    // The validation flag is currently mutative. We put it on                                                         // 437
    // an external backing store so that we can freeze the whole object.                                               // 438
    // This can be replaced with a WeakMap once they are implemented in                                                // 439
    // commonly used development environments.                                                                         // 440
    element._store = {};                                                                                               // 441
                                                                                                                       // 442
    // To make comparing ReactElements easier for testing purposes, we make                                            // 443
    // the validation flag non-enumerable (where possible, which should                                                // 444
    // include every environment we run tests in), so the test framework                                               // 445
    // ignores it.                                                                                                     // 446
    Object.defineProperty(element._store, 'validated', {                                                               // 447
      configurable: false,                                                                                             // 448
      enumerable: false,                                                                                               // 449
      writable: true,                                                                                                  // 450
      value: false                                                                                                     // 451
    });                                                                                                                // 452
    // self and source are DEV only properties.                                                                        // 453
    Object.defineProperty(element, '_self', {                                                                          // 454
      configurable: false,                                                                                             // 455
      enumerable: false,                                                                                               // 456
      writable: false,                                                                                                 // 457
      value: self                                                                                                      // 458
    });                                                                                                                // 459
    // Two elements created in two different places should be considered                                               // 460
    // equal for testing purposes and therefore we hide it from enumeration.                                           // 461
    Object.defineProperty(element, '_source', {                                                                        // 462
      configurable: false,                                                                                             // 463
      enumerable: false,                                                                                               // 464
      writable: false,                                                                                                 // 465
      value: source                                                                                                    // 466
    });                                                                                                                // 467
    if (Object.freeze) {                                                                                               // 468
      Object.freeze(element.props);                                                                                    // 469
      Object.freeze(element);                                                                                          // 470
    }                                                                                                                  // 471
  }                                                                                                                    // 472
                                                                                                                       // 473
  return element;                                                                                                      // 474
};                                                                                                                     // 475
                                                                                                                       // 476
/**                                                                                                                    // 477
 * Create and return a new ReactElement of the given type.                                                             // 478
 * See https://reactjs.org/docs/react-api.html#createelement                                                           // 479
 */                                                                                                                    // 480
function createElement(type, config, children) {                                                                       // 481
  var propName;                                                                                                        // 482
                                                                                                                       // 483
  // Reserved names are extracted                                                                                      // 484
  var props = {};                                                                                                      // 485
                                                                                                                       // 486
  var key = null;                                                                                                      // 487
  var ref = null;                                                                                                      // 488
  var self = null;                                                                                                     // 489
  var source = null;                                                                                                   // 490
                                                                                                                       // 491
  if (config != null) {                                                                                                // 492
    if (hasValidRef(config)) {                                                                                         // 493
      ref = config.ref;                                                                                                // 494
    }                                                                                                                  // 495
    if (hasValidKey(config)) {                                                                                         // 496
      key = '' + config.key;                                                                                           // 497
    }                                                                                                                  // 498
                                                                                                                       // 499
    self = config.__self === undefined ? null : config.__self;                                                         // 500
    source = config.__source === undefined ? null : config.__source;                                                   // 501
    // Remaining properties are added to a new props object                                                            // 502
    for (propName in config) {                                                                                         // 503
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {                         // 504
        props[propName] = config[propName];                                                                            // 505
      }                                                                                                                // 506
    }                                                                                                                  // 507
  }                                                                                                                    // 508
                                                                                                                       // 509
  // Children can be more than one argument, and those are transferred onto                                            // 510
  // the newly allocated props object.                                                                                 // 511
  var childrenLength = arguments.length - 2;                                                                           // 512
  if (childrenLength === 1) {                                                                                          // 513
    props.children = children;                                                                                         // 514
  } else if (childrenLength > 1) {                                                                                     // 515
    var childArray = Array(childrenLength);                                                                            // 516
    for (var i = 0; i < childrenLength; i++) {                                                                         // 517
      childArray[i] = arguments[i + 2];                                                                                // 518
    }                                                                                                                  // 519
    {                                                                                                                  // 520
      if (Object.freeze) {                                                                                             // 521
        Object.freeze(childArray);                                                                                     // 522
      }                                                                                                                // 523
    }                                                                                                                  // 524
    props.children = childArray;                                                                                       // 525
  }                                                                                                                    // 526
                                                                                                                       // 527
  // Resolve default props                                                                                             // 528
  if (type && type.defaultProps) {                                                                                     // 529
    var defaultProps = type.defaultProps;                                                                              // 530
    for (propName in defaultProps) {                                                                                   // 531
      if (props[propName] === undefined) {                                                                             // 532
        props[propName] = defaultProps[propName];                                                                      // 533
      }                                                                                                                // 534
    }                                                                                                                  // 535
  }                                                                                                                    // 536
  {                                                                                                                    // 537
    if (key || ref) {                                                                                                  // 538
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {                            // 539
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;              // 540
        if (key) {                                                                                                     // 541
          defineKeyPropWarningGetter(props, displayName);                                                              // 542
        }                                                                                                              // 543
        if (ref) {                                                                                                     // 544
          defineRefPropWarningGetter(props, displayName);                                                              // 545
        }                                                                                                              // 546
      }                                                                                                                // 547
    }                                                                                                                  // 548
  }                                                                                                                    // 549
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);                                 // 550
}                                                                                                                      // 551
                                                                                                                       // 552
/**                                                                                                                    // 553
 * Return a function that produces ReactElements of a given type.                                                      // 554
 * See https://reactjs.org/docs/react-api.html#createfactory                                                           // 555
 */                                                                                                                    // 556
                                                                                                                       // 557
                                                                                                                       // 558
function cloneAndReplaceKey(oldElement, newKey) {                                                                      // 559
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
                                                                                                                       // 561
  return newElement;                                                                                                   // 562
}                                                                                                                      // 563
                                                                                                                       // 564
/**                                                                                                                    // 565
 * Clone and return a new ReactElement using element as the starting point.                                            // 566
 * See https://reactjs.org/docs/react-api.html#cloneelement                                                            // 567
 */                                                                                                                    // 568
function cloneElement(element, config, children) {                                                                     // 569
  var propName;                                                                                                        // 570
                                                                                                                       // 571
  // Original props are copied                                                                                         // 572
  var props = _assign({}, element.props);                                                                              // 573
                                                                                                                       // 574
  // Reserved names are extracted                                                                                      // 575
  var key = element.key;                                                                                               // 576
  var ref = element.ref;                                                                                               // 577
  // Self is preserved since the owner is preserved.                                                                   // 578
  var self = element._self;                                                                                            // 579
  // Source is preserved since cloneElement is unlikely to be targeted by a                                            // 580
  // transpiler, and the original source is probably a better indicator of the                                         // 581
  // true owner.                                                                                                       // 582
  var source = element._source;                                                                                        // 583
                                                                                                                       // 584
  // Owner will be preserved, unless ref is overridden                                                                 // 585
  var owner = element._owner;                                                                                          // 586
                                                                                                                       // 587
  if (config != null) {                                                                                                // 588
    if (hasValidRef(config)) {                                                                                         // 589
      // Silently steal the ref from the parent.                                                                       // 590
      ref = config.ref;                                                                                                // 591
      owner = ReactCurrentOwner.current;                                                                               // 592
    }                                                                                                                  // 593
    if (hasValidKey(config)) {                                                                                         // 594
      key = '' + config.key;                                                                                           // 595
    }                                                                                                                  // 596
                                                                                                                       // 597
    // Remaining properties override existing props                                                                    // 598
    var defaultProps;                                                                                                  // 599
    if (element.type && element.type.defaultProps) {                                                                   // 600
      defaultProps = element.type.defaultProps;                                                                        // 601
    }                                                                                                                  // 602
    for (propName in config) {                                                                                         // 603
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {                         // 604
        if (config[propName] === undefined && defaultProps !== undefined) {                                            // 605
          // Resolve default props                                                                                     // 606
          props[propName] = defaultProps[propName];                                                                    // 607
        } else {                                                                                                       // 608
          props[propName] = config[propName];                                                                          // 609
        }                                                                                                              // 610
      }                                                                                                                // 611
    }                                                                                                                  // 612
  }                                                                                                                    // 613
                                                                                                                       // 614
  // Children can be more than one argument, and those are transferred onto                                            // 615
  // the newly allocated props object.                                                                                 // 616
  var childrenLength = arguments.length - 2;                                                                           // 617
  if (childrenLength === 1) {                                                                                          // 618
    props.children = children;                                                                                         // 619
  } else if (childrenLength > 1) {                                                                                     // 620
    var childArray = Array(childrenLength);                                                                            // 621
    for (var i = 0; i < childrenLength; i++) {                                                                         // 622
      childArray[i] = arguments[i + 2];                                                                                // 623
    }                                                                                                                  // 624
    props.children = childArray;                                                                                       // 625
  }                                                                                                                    // 626
                                                                                                                       // 627
  return ReactElement(element.type, key, ref, self, source, owner, props);                                             // 628
}                                                                                                                      // 629
                                                                                                                       // 630
/**                                                                                                                    // 631
 * Verifies the object is a ReactElement.                                                                              // 632
 * See https://reactjs.org/docs/react-api.html#isvalidelement                                                          // 633
 * @param {?object} object                                                                                             // 634
 * @return {boolean} True if `object` is a valid component.                                                            // 635
 * @final                                                                                                              // 636
 */                                                                                                                    // 637
function isValidElement(object) {                                                                                      // 638
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;                      // 639
}                                                                                                                      // 640
                                                                                                                       // 641
var ReactDebugCurrentFrame = {};                                                                                       // 642
                                                                                                                       // 643
{                                                                                                                      // 644
  // Component that is being worked on                                                                                 // 645
  ReactDebugCurrentFrame.getCurrentStack = null;                                                                       // 646
                                                                                                                       // 647
  ReactDebugCurrentFrame.getStackAddendum = function () {                                                              // 648
    var impl = ReactDebugCurrentFrame.getCurrentStack;                                                                 // 649
    if (impl) {                                                                                                        // 650
      return impl();                                                                                                   // 651
    }                                                                                                                  // 652
    return null;                                                                                                       // 653
  };                                                                                                                   // 654
}                                                                                                                      // 655
                                                                                                                       // 656
var SEPARATOR = '.';                                                                                                   // 657
var SUBSEPARATOR = ':';                                                                                                // 658
                                                                                                                       // 659
/**                                                                                                                    // 660
 * Escape and wrap key so it is safe to use as a reactid                                                               // 661
 *                                                                                                                     // 662
 * @param {string} key to be escaped.                                                                                  // 663
 * @return {string} the escaped key.                                                                                   // 664
 */                                                                                                                    // 665
function escape(key) {                                                                                                 // 666
  var escapeRegex = /[=:]/g;                                                                                           // 667
  var escaperLookup = {                                                                                                // 668
    '=': '=0',                                                                                                         // 669
    ':': '=2'                                                                                                          // 670
  };                                                                                                                   // 671
  var escapedString = ('' + key).replace(escapeRegex, function (match) {                                               // 672
    return escaperLookup[match];                                                                                       // 673
  });                                                                                                                  // 674
                                                                                                                       // 675
  return '$' + escapedString;                                                                                          // 676
}                                                                                                                      // 677
                                                                                                                       // 678
/**                                                                                                                    // 679
 * TODO: Test that a single child and an array with one item have the same key                                         // 680
 * pattern.                                                                                                            // 681
 */                                                                                                                    // 682
                                                                                                                       // 683
var didWarnAboutMaps = false;                                                                                          // 684
                                                                                                                       // 685
var userProvidedKeyEscapeRegex = /\/+/g;                                                                               // 686
function escapeUserProvidedKey(text) {                                                                                 // 687
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');                                                       // 688
}                                                                                                                      // 689
                                                                                                                       // 690
var POOL_SIZE = 10;                                                                                                    // 691
var traverseContextPool = [];                                                                                          // 692
function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {                                     // 693
  if (traverseContextPool.length) {                                                                                    // 694
    var traverseContext = traverseContextPool.pop();                                                                   // 695
    traverseContext.result = mapResult;                                                                                // 696
    traverseContext.keyPrefix = keyPrefix;                                                                             // 697
    traverseContext.func = mapFunction;                                                                                // 698
    traverseContext.context = mapContext;                                                                              // 699
    traverseContext.count = 0;                                                                                         // 700
    return traverseContext;                                                                                            // 701
  } else {                                                                                                             // 702
    return {                                                                                                           // 703
      result: mapResult,                                                                                               // 704
      keyPrefix: keyPrefix,                                                                                            // 705
      func: mapFunction,                                                                                               // 706
      context: mapContext,                                                                                             // 707
      count: 0                                                                                                         // 708
    };                                                                                                                 // 709
  }                                                                                                                    // 710
}                                                                                                                      // 711
                                                                                                                       // 712
function releaseTraverseContext(traverseContext) {                                                                     // 713
  traverseContext.result = null;                                                                                       // 714
  traverseContext.keyPrefix = null;                                                                                    // 715
  traverseContext.func = null;                                                                                         // 716
  traverseContext.context = null;                                                                                      // 717
  traverseContext.count = 0;                                                                                           // 718
  if (traverseContextPool.length < POOL_SIZE) {                                                                        // 719
    traverseContextPool.push(traverseContext);                                                                         // 720
  }                                                                                                                    // 721
}                                                                                                                      // 722
                                                                                                                       // 723
/**                                                                                                                    // 724
 * @param {?*} children Children tree container.                                                                       // 725
 * @param {!string} nameSoFar Name of the key path so far.                                                             // 726
 * @param {!function} callback Callback to invoke with each child found.                                               // 727
 * @param {?*} traverseContext Used to pass information throughout the traversal                                       // 728
 * process.                                                                                                            // 729
 * @return {!number} The number of children in this subtree.                                                           // 730
 */                                                                                                                    // 731
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {                                     // 732
  var type = typeof children;                                                                                          // 733
                                                                                                                       // 734
  if (type === 'undefined' || type === 'boolean') {                                                                    // 735
    // All of the above are perceived as null.                                                                         // 736
    children = null;                                                                                                   // 737
  }                                                                                                                    // 738
                                                                                                                       // 739
  var invokeCallback = false;                                                                                          // 740
                                                                                                                       // 741
  if (children === null) {                                                                                             // 742
    invokeCallback = true;                                                                                             // 743
  } else {                                                                                                             // 744
    switch (type) {                                                                                                    // 745
      case 'string':                                                                                                   // 746
      case 'number':                                                                                                   // 747
        invokeCallback = true;                                                                                         // 748
        break;                                                                                                         // 749
      case 'object':                                                                                                   // 750
        switch (children.$$typeof) {                                                                                   // 751
          case REACT_ELEMENT_TYPE:                                                                                     // 752
          case REACT_CALL_TYPE:                                                                                        // 753
          case REACT_RETURN_TYPE:                                                                                      // 754
          case REACT_PORTAL_TYPE:                                                                                      // 755
            invokeCallback = true;                                                                                     // 756
        }                                                                                                              // 757
    }                                                                                                                  // 758
  }                                                                                                                    // 759
                                                                                                                       // 760
  if (invokeCallback) {                                                                                                // 761
    callback(traverseContext, children,                                                                                // 762
    // If it's the only child, treat the name as if it was wrapped in an array                                         // 763
    // so that it's consistent if the number of children grows.                                                        // 764
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);                                          // 765
    return 1;                                                                                                          // 766
  }                                                                                                                    // 767
                                                                                                                       // 768
  var child;                                                                                                           // 769
  var nextName;                                                                                                        // 770
  var subtreeCount = 0; // Count of children found in the current subtree.                                             // 771
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;                                        // 772
                                                                                                                       // 773
  if (Array.isArray(children)) {                                                                                       // 774
    for (var i = 0; i < children.length; i++) {                                                                        // 775
      child = children[i];                                                                                             // 776
      nextName = nextNamePrefix + getComponentKey(child, i);                                                           // 777
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                             // 778
    }                                                                                                                  // 779
  } else {                                                                                                             // 780
    var iteratorFn = getIteratorFn(children);                                                                          // 781
    if (typeof iteratorFn === 'function') {                                                                            // 782
      {                                                                                                                // 783
        // Warn about using Maps as children                                                                           // 784
        if (iteratorFn === children.entries) {                                                                         // 785
          warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum());
          didWarnAboutMaps = true;                                                                                     // 787
        }                                                                                                              // 788
      }                                                                                                                // 789
                                                                                                                       // 790
      var iterator = iteratorFn.call(children);                                                                        // 791
      var step;                                                                                                        // 792
      var ii = 0;                                                                                                      // 793
      while (!(step = iterator.next()).done) {                                                                         // 794
        child = step.value;                                                                                            // 795
        nextName = nextNamePrefix + getComponentKey(child, ii++);                                                      // 796
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);                           // 797
      }                                                                                                                // 798
    } else if (type === 'object') {                                                                                    // 799
      var addendum = '';                                                                                               // 800
      {                                                                                                                // 801
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
      }                                                                                                                // 803
      var childrenString = '' + children;                                                                              // 804
      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
    }                                                                                                                  // 806
  }                                                                                                                    // 807
                                                                                                                       // 808
  return subtreeCount;                                                                                                 // 809
}                                                                                                                      // 810
                                                                                                                       // 811
/**                                                                                                                    // 812
 * Traverses children that are typically specified as `props.children`, but                                            // 813
 * might also be specified through attributes:                                                                         // 814
 *                                                                                                                     // 815
 * - `traverseAllChildren(this.props.children, ...)`                                                                   // 816
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`                                                          // 817
 *                                                                                                                     // 818
 * The `traverseContext` is an optional argument that is passed through the                                            // 819
 * entire traversal. It can be used to store accumulations or anything else that                                       // 820
 * the callback might find relevant.                                                                                   // 821
 *                                                                                                                     // 822
 * @param {?*} children Children tree object.                                                                          // 823
 * @param {!function} callback To invoke upon traversing each child.                                                   // 824
 * @param {?*} traverseContext Context for traversal.                                                                  // 825
 * @return {!number} The number of children in this subtree.                                                           // 826
 */                                                                                                                    // 827
function traverseAllChildren(children, callback, traverseContext) {                                                    // 828
  if (children == null) {                                                                                              // 829
    return 0;                                                                                                          // 830
  }                                                                                                                    // 831
                                                                                                                       // 832
  return traverseAllChildrenImpl(children, '', callback, traverseContext);                                             // 833
}                                                                                                                      // 834
                                                                                                                       // 835
/**                                                                                                                    // 836
 * Generate a key string that identifies a component within a set.                                                     // 837
 *                                                                                                                     // 838
 * @param {*} component A component that could contain a manual key.                                                   // 839
 * @param {number} index Index that is used if a manual key is not provided.                                           // 840
 * @return {string}                                                                                                    // 841
 */                                                                                                                    // 842
function getComponentKey(component, index) {                                                                           // 843
  // Do some typechecking here since we call this blindly. We want to ensure                                           // 844
  // that we don't block potential future ES APIs.                                                                     // 845
  if (typeof component === 'object' && component !== null && component.key != null) {                                  // 846
    // Explicit key                                                                                                    // 847
    return escape(component.key);                                                                                      // 848
  }                                                                                                                    // 849
  // Implicit key determined by the index in the set                                                                   // 850
  return index.toString(36);                                                                                           // 851
}                                                                                                                      // 852
                                                                                                                       // 853
function forEachSingleChild(bookKeeping, child, name) {                                                                // 854
  var func = bookKeeping.func,                                                                                         // 855
      context = bookKeeping.context;                                                                                   // 856
                                                                                                                       // 857
  func.call(context, child, bookKeeping.count++);                                                                      // 858
}                                                                                                                      // 859
                                                                                                                       // 860
/**                                                                                                                    // 861
 * Iterates through children that are typically specified as `props.children`.                                         // 862
 *                                                                                                                     // 863
 * See https://reactjs.org/docs/react-api.html#react.children.foreach                                                  // 864
 *                                                                                                                     // 865
 * The provided forEachFunc(child, index) will be called for each                                                      // 866
 * leaf child.                                                                                                         // 867
 *                                                                                                                     // 868
 * @param {?*} children Children tree container.                                                                       // 869
 * @param {function(*, int)} forEachFunc                                                                               // 870
 * @param {*} forEachContext Context for forEachContext.                                                               // 871
 */                                                                                                                    // 872
function forEachChildren(children, forEachFunc, forEachContext) {                                                      // 873
  if (children == null) {                                                                                              // 874
    return children;                                                                                                   // 875
  }                                                                                                                    // 876
  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);                             // 877
  traverseAllChildren(children, forEachSingleChild, traverseContext);                                                  // 878
  releaseTraverseContext(traverseContext);                                                                             // 879
}                                                                                                                      // 880
                                                                                                                       // 881
function mapSingleChildIntoContext(bookKeeping, child, childKey) {                                                     // 882
  var result = bookKeeping.result,                                                                                     // 883
      keyPrefix = bookKeeping.keyPrefix,                                                                               // 884
      func = bookKeeping.func,                                                                                         // 885
      context = bookKeeping.context;                                                                                   // 886
                                                                                                                       // 887
                                                                                                                       // 888
  var mappedChild = func.call(context, child, bookKeeping.count++);                                                    // 889
  if (Array.isArray(mappedChild)) {                                                                                    // 890
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);                    // 891
  } else if (mappedChild != null) {                                                                                    // 892
    if (isValidElement(mappedChild)) {                                                                                 // 893
      mappedChild = cloneAndReplaceKey(mappedChild,                                                                    // 894
      // Keep both the (mapped) and old keys if they differ, just as                                                   // 895
      // traverseAllChildren used to do for objects as children                                                        // 896
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }                                                                                                                  // 898
    result.push(mappedChild);                                                                                          // 899
  }                                                                                                                    // 900
}                                                                                                                      // 901
                                                                                                                       // 902
function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {                                        // 903
  var escapedPrefix = '';                                                                                              // 904
  if (prefix != null) {                                                                                                // 905
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';                                                               // 906
  }                                                                                                                    // 907
  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);                                 // 908
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);                                           // 909
  releaseTraverseContext(traverseContext);                                                                             // 910
}                                                                                                                      // 911
                                                                                                                       // 912
/**                                                                                                                    // 913
 * Maps children that are typically specified as `props.children`.                                                     // 914
 *                                                                                                                     // 915
 * See https://reactjs.org/docs/react-api.html#react.children.map                                                      // 916
 *                                                                                                                     // 917
 * The provided mapFunction(child, key, index) will be called for each                                                 // 918
 * leaf child.                                                                                                         // 919
 *                                                                                                                     // 920
 * @param {?*} children Children tree container.                                                                       // 921
 * @param {function(*, int)} func The map function.                                                                    // 922
 * @param {*} context Context for mapFunction.                                                                         // 923
 * @return {object} Object containing the ordered map of results.                                                      // 924
 */                                                                                                                    // 925
function mapChildren(children, func, context) {                                                                        // 926
  if (children == null) {                                                                                              // 927
    return children;                                                                                                   // 928
  }                                                                                                                    // 929
  var result = [];                                                                                                     // 930
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);                                                 // 931
  return result;                                                                                                       // 932
}                                                                                                                      // 933
                                                                                                                       // 934
/**                                                                                                                    // 935
 * Count the number of children that are typically specified as                                                        // 936
 * `props.children`.                                                                                                   // 937
 *                                                                                                                     // 938
 * See https://reactjs.org/docs/react-api.html#react.children.count                                                    // 939
 *                                                                                                                     // 940
 * @param {?*} children Children tree container.                                                                       // 941
 * @return {number} The number of children.                                                                            // 942
 */                                                                                                                    // 943
function countChildren(children, context) {                                                                            // 944
  return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);                                           // 945
}                                                                                                                      // 946
                                                                                                                       // 947
/**                                                                                                                    // 948
 * Flatten a children object (typically specified as `props.children`) and                                             // 949
 * return an array with appropriately re-keyed children.                                                               // 950
 *                                                                                                                     // 951
 * See https://reactjs.org/docs/react-api.html#react.children.toarray                                                  // 952
 */                                                                                                                    // 953
function toArray(children) {                                                                                           // 954
  var result = [];                                                                                                     // 955
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);                             // 956
  return result;                                                                                                       // 957
}                                                                                                                      // 958
                                                                                                                       // 959
/**                                                                                                                    // 960
 * Returns the first child in a collection of children and verifies that there                                         // 961
 * is only one child in the collection.                                                                                // 962
 *                                                                                                                     // 963
 * See https://reactjs.org/docs/react-api.html#react.children.only                                                     // 964
 *                                                                                                                     // 965
 * The current implementation of this function assumes that a single child gets                                        // 966
 * passed without a wrapper, but the purpose of this helper function is to                                             // 967
 * abstract away the particular structure of children.                                                                 // 968
 *                                                                                                                     // 969
 * @param {?object} children Child collection structure.                                                               // 970
 * @return {ReactElement} The first and only `ReactElement` contained in the                                           // 971
 * structure.                                                                                                          // 972
 */                                                                                                                    // 973
function onlyChild(children) {                                                                                         // 974
  !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
  return children;                                                                                                     // 976
}                                                                                                                      // 977
                                                                                                                       // 978
var describeComponentFrame = function (name, source, ownerName) {                                                      // 979
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
};                                                                                                                     // 981
                                                                                                                       // 982
function getComponentName(fiber) {                                                                                     // 983
  var type = fiber.type;                                                                                               // 984
                                                                                                                       // 985
  if (typeof type === 'string') {                                                                                      // 986
    return type;                                                                                                       // 987
  }                                                                                                                    // 988
  if (typeof type === 'function') {                                                                                    // 989
    return type.displayName || type.name;                                                                              // 990
  }                                                                                                                    // 991
  return null;                                                                                                         // 992
}                                                                                                                      // 993
                                                                                                                       // 994
/**                                                                                                                    // 995
 * ReactElementValidator provides a wrapper around a element factory                                                   // 996
 * which validates the props passed to the element. This is intended to be                                             // 997
 * used only in DEV and could be replaced by a static type checker for languages                                       // 998
 * that support it.                                                                                                    // 999
 */                                                                                                                    // 1000
                                                                                                                       // 1001
{                                                                                                                      // 1002
  var currentlyValidatingElement = null;                                                                               // 1003
                                                                                                                       // 1004
  var propTypesMisspellWarningShown = false;                                                                           // 1005
                                                                                                                       // 1006
  var getDisplayName = function (element) {                                                                            // 1007
    if (element == null) {                                                                                             // 1008
      return '#empty';                                                                                                 // 1009
    } else if (typeof element === 'string' || typeof element === 'number') {                                           // 1010
      return '#text';                                                                                                  // 1011
    } else if (typeof element.type === 'string') {                                                                     // 1012
      return element.type;                                                                                             // 1013
    } else if (element.type === REACT_FRAGMENT_TYPE) {                                                                 // 1014
      return 'React.Fragment';                                                                                         // 1015
    } else {                                                                                                           // 1016
      return element.type.displayName || element.type.name || 'Unknown';                                               // 1017
    }                                                                                                                  // 1018
  };                                                                                                                   // 1019
                                                                                                                       // 1020
  var getStackAddendum = function () {                                                                                 // 1021
    var stack = '';                                                                                                    // 1022
    if (currentlyValidatingElement) {                                                                                  // 1023
      var name = getDisplayName(currentlyValidatingElement);                                                           // 1024
      var owner = currentlyValidatingElement._owner;                                                                   // 1025
      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));     // 1026
    }                                                                                                                  // 1027
    stack += ReactDebugCurrentFrame.getStackAddendum() || '';                                                          // 1028
    return stack;                                                                                                      // 1029
  };                                                                                                                   // 1030
                                                                                                                       // 1031
  var VALID_FRAGMENT_PROPS = new Map([['children', true], ['key', true]]);                                             // 1032
}                                                                                                                      // 1033
                                                                                                                       // 1034
function getDeclarationErrorAddendum() {                                                                               // 1035
  if (ReactCurrentOwner.current) {                                                                                     // 1036
    var name = getComponentName(ReactCurrentOwner.current);                                                            // 1037
    if (name) {                                                                                                        // 1038
      return '\n\nCheck the render method of `' + name + '`.';                                                         // 1039
    }                                                                                                                  // 1040
  }                                                                                                                    // 1041
  return '';                                                                                                           // 1042
}                                                                                                                      // 1043
                                                                                                                       // 1044
function getSourceInfoErrorAddendum(elementProps) {                                                                    // 1045
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {                    // 1046
    var source = elementProps.__source;                                                                                // 1047
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');                                                           // 1048
    var lineNumber = source.lineNumber;                                                                                // 1049
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';                                              // 1050
  }                                                                                                                    // 1051
  return '';                                                                                                           // 1052
}                                                                                                                      // 1053
                                                                                                                       // 1054
/**                                                                                                                    // 1055
 * Warn if there's no key explicitly set on dynamic arrays of children or                                              // 1056
 * object keys are not valid. This allows us to keep track of children between                                         // 1057
 * updates.                                                                                                            // 1058
 */                                                                                                                    // 1059
var ownerHasKeyUseWarning = {};                                                                                        // 1060
                                                                                                                       // 1061
function getCurrentComponentErrorInfo(parentType) {                                                                    // 1062
  var info = getDeclarationErrorAddendum();                                                                            // 1063
                                                                                                                       // 1064
  if (!info) {                                                                                                         // 1065
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;          // 1066
    if (parentName) {                                                                                                  // 1067
      info = '\n\nCheck the top-level render call using <' + parentName + '>.';                                        // 1068
    }                                                                                                                  // 1069
  }                                                                                                                    // 1070
  return info;                                                                                                         // 1071
}                                                                                                                      // 1072
                                                                                                                       // 1073
/**                                                                                                                    // 1074
 * Warn if the element doesn't have an explicit key assigned to it.                                                    // 1075
 * This element is in an array. The array could grow and shrink or be                                                  // 1076
 * reordered. All children that haven't already been validated are required to                                         // 1077
 * have a "key" property assigned to it. Error statuses are cached so a warning                                        // 1078
 * will only be shown once.                                                                                            // 1079
 *                                                                                                                     // 1080
 * @internal                                                                                                           // 1081
 * @param {ReactElement} element Element that requires a key.                                                          // 1082
 * @param {*} parentType element's parent's type.                                                                      // 1083
 */                                                                                                                    // 1084
function validateExplicitKey(element, parentType) {                                                                    // 1085
  if (!element._store || element._store.validated || element.key != null) {                                            // 1086
    return;                                                                                                            // 1087
  }                                                                                                                    // 1088
  element._store.validated = true;                                                                                     // 1089
                                                                                                                       // 1090
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);                                            // 1091
  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {                                                              // 1092
    return;                                                                                                            // 1093
  }                                                                                                                    // 1094
  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;                                                             // 1095
                                                                                                                       // 1096
  // Usually the current owner is the offender, but if it accepts children as a                                        // 1097
  // property, it may be the creator of the child that's responsible for                                               // 1098
  // assigning it a key.                                                                                               // 1099
  var childOwner = '';                                                                                                 // 1100
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {                                     // 1101
    // Give the component that originally created this child.                                                          // 1102
    childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';                              // 1103
  }                                                                                                                    // 1104
                                                                                                                       // 1105
  currentlyValidatingElement = element;                                                                                // 1106
  {                                                                                                                    // 1107
    warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());
  }                                                                                                                    // 1109
  currentlyValidatingElement = null;                                                                                   // 1110
}                                                                                                                      // 1111
                                                                                                                       // 1112
/**                                                                                                                    // 1113
 * Ensure that every element either is passed in a static location, in an                                              // 1114
 * array with an explicit keys property defined, or in an object literal                                               // 1115
 * with valid key property.                                                                                            // 1116
 *                                                                                                                     // 1117
 * @internal                                                                                                           // 1118
 * @param {ReactNode} node Statically passed child of any type.                                                        // 1119
 * @param {*} parentType node's parent's type.                                                                         // 1120
 */                                                                                                                    // 1121
function validateChildKeys(node, parentType) {                                                                         // 1122
  if (typeof node !== 'object') {                                                                                      // 1123
    return;                                                                                                            // 1124
  }                                                                                                                    // 1125
  if (Array.isArray(node)) {                                                                                           // 1126
    for (var i = 0; i < node.length; i++) {                                                                            // 1127
      var child = node[i];                                                                                             // 1128
      if (isValidElement(child)) {                                                                                     // 1129
        validateExplicitKey(child, parentType);                                                                        // 1130
      }                                                                                                                // 1131
    }                                                                                                                  // 1132
  } else if (isValidElement(node)) {                                                                                   // 1133
    // This element was passed in a valid location.                                                                    // 1134
    if (node._store) {                                                                                                 // 1135
      node._store.validated = true;                                                                                    // 1136
    }                                                                                                                  // 1137
  } else if (node) {                                                                                                   // 1138
    var iteratorFn = getIteratorFn(node);                                                                              // 1139
    if (typeof iteratorFn === 'function') {                                                                            // 1140
      // Entry iterators used to provide implicit keys,                                                                // 1141
      // but now we print a separate warning for them later.                                                           // 1142
      if (iteratorFn !== node.entries) {                                                                               // 1143
        var iterator = iteratorFn.call(node);                                                                          // 1144
        var step;                                                                                                      // 1145
        while (!(step = iterator.next()).done) {                                                                       // 1146
          if (isValidElement(step.value)) {                                                                            // 1147
            validateExplicitKey(step.value, parentType);                                                               // 1148
          }                                                                                                            // 1149
        }                                                                                                              // 1150
      }                                                                                                                // 1151
    }                                                                                                                  // 1152
  }                                                                                                                    // 1153
}                                                                                                                      // 1154
                                                                                                                       // 1155
/**                                                                                                                    // 1156
 * Given an element, validate that its props follow the propTypes definition,                                          // 1157
 * provided by the type.                                                                                               // 1158
 *                                                                                                                     // 1159
 * @param {ReactElement} element                                                                                       // 1160
 */                                                                                                                    // 1161
function validatePropTypes(element) {                                                                                  // 1162
  var componentClass = element.type;                                                                                   // 1163
  if (typeof componentClass !== 'function') {                                                                          // 1164
    return;                                                                                                            // 1165
  }                                                                                                                    // 1166
  var name = componentClass.displayName || componentClass.name;                                                        // 1167
  var propTypes = componentClass.propTypes;                                                                            // 1168
  if (propTypes) {                                                                                                     // 1169
    currentlyValidatingElement = element;                                                                              // 1170
    checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);                                          // 1171
    currentlyValidatingElement = null;                                                                                 // 1172
  } else if (componentClass.PropTypes !== undefined && !propTypesMisspellWarningShown) {                               // 1173
    propTypesMisspellWarningShown = true;                                                                              // 1174
    warning(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
  }                                                                                                                    // 1176
  if (typeof componentClass.getDefaultProps === 'function') {                                                          // 1177
    warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
  }                                                                                                                    // 1179
}                                                                                                                      // 1180
                                                                                                                       // 1181
/**                                                                                                                    // 1182
 * Given a fragment, validate that it can only be provided with fragment props                                         // 1183
 * @param {ReactElement} fragment                                                                                      // 1184
 */                                                                                                                    // 1185
function validateFragmentProps(fragment) {                                                                             // 1186
  currentlyValidatingElement = fragment;                                                                               // 1187
                                                                                                                       // 1188
  var _iteratorNormalCompletion = true;                                                                                // 1189
  var _didIteratorError = false;                                                                                       // 1190
  var _iteratorError = undefined;                                                                                      // 1191
                                                                                                                       // 1192
  try {                                                                                                                // 1193
    for (var _iterator = Object.keys(fragment.props)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;                                                                                           // 1195
                                                                                                                       // 1196
      if (!VALID_FRAGMENT_PROPS.has(key)) {                                                                            // 1197
        warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());
        break;                                                                                                         // 1199
      }                                                                                                                // 1200
    }                                                                                                                  // 1201
  } catch (err) {                                                                                                      // 1202
    _didIteratorError = true;                                                                                          // 1203
    _iteratorError = err;                                                                                              // 1204
  } finally {                                                                                                          // 1205
    try {                                                                                                              // 1206
      if (!_iteratorNormalCompletion && _iterator['return']) {                                                         // 1207
        _iterator['return']();                                                                                         // 1208
      }                                                                                                                // 1209
    } finally {                                                                                                        // 1210
      if (_didIteratorError) {                                                                                         // 1211
        throw _iteratorError;                                                                                          // 1212
      }                                                                                                                // 1213
    }                                                                                                                  // 1214
  }                                                                                                                    // 1215
                                                                                                                       // 1216
  if (fragment.ref !== null) {                                                                                         // 1217
    warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());                     // 1218
  }                                                                                                                    // 1219
                                                                                                                       // 1220
  currentlyValidatingElement = null;                                                                                   // 1221
}                                                                                                                      // 1222
                                                                                                                       // 1223
function createElementWithValidation(type, props, children) {                                                          // 1224
  var validType = typeof type === 'string' || typeof type === 'function' || typeof type === 'symbol' || typeof type === 'number';
  // We warn in this case but don't throw. We expect the element creation to                                           // 1226
  // succeed and there will likely be errors in render.                                                                // 1227
  if (!validType) {                                                                                                    // 1228
    var info = '';                                                                                                     // 1229
    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {           // 1230
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }                                                                                                                  // 1232
                                                                                                                       // 1233
    var sourceInfo = getSourceInfoErrorAddendum(props);                                                                // 1234
    if (sourceInfo) {                                                                                                  // 1235
      info += sourceInfo;                                                                                              // 1236
    } else {                                                                                                           // 1237
      info += getDeclarationErrorAddendum();                                                                           // 1238
    }                                                                                                                  // 1239
                                                                                                                       // 1240
    info += getStackAddendum() || '';                                                                                  // 1241
                                                                                                                       // 1242
    warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info);
  }                                                                                                                    // 1244
                                                                                                                       // 1245
  var element = createElement.apply(this, arguments);                                                                  // 1246
                                                                                                                       // 1247
  // The result can be nullish if a mock or a custom function is used.                                                 // 1248
  // TODO: Drop this when these are no longer allowed as the type argument.                                            // 1249
  if (element == null) {                                                                                               // 1250
    return element;                                                                                                    // 1251
  }                                                                                                                    // 1252
                                                                                                                       // 1253
  // Skip key warning if the type isn't valid since our key validation logic                                           // 1254
  // doesn't expect a non-string/function type and can throw confusing errors.                                         // 1255
  // We don't want exception behavior to differ between dev and prod.                                                  // 1256
  // (Rendering will throw with a helpful message and as soon as the type is                                           // 1257
  // fixed, the key warnings will appear.)                                                                             // 1258
  if (validType) {                                                                                                     // 1259
    for (var i = 2; i < arguments.length; i++) {                                                                       // 1260
      validateChildKeys(arguments[i], type);                                                                           // 1261
    }                                                                                                                  // 1262
  }                                                                                                                    // 1263
                                                                                                                       // 1264
  if (typeof type === 'symbol' && type === REACT_FRAGMENT_TYPE) {                                                      // 1265
    validateFragmentProps(element);                                                                                    // 1266
  } else {                                                                                                             // 1267
    validatePropTypes(element);                                                                                        // 1268
  }                                                                                                                    // 1269
                                                                                                                       // 1270
  return element;                                                                                                      // 1271
}                                                                                                                      // 1272
                                                                                                                       // 1273
function createFactoryWithValidation(type) {                                                                           // 1274
  var validatedFactory = createElementWithValidation.bind(null, type);                                                 // 1275
  // Legacy hook TODO: Warn if this is accessed                                                                        // 1276
  validatedFactory.type = type;                                                                                        // 1277
                                                                                                                       // 1278
  {                                                                                                                    // 1279
    Object.defineProperty(validatedFactory, 'type', {                                                                  // 1280
      enumerable: false,                                                                                               // 1281
      get: function () {                                                                                               // 1282
        lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
        Object.defineProperty(this, 'type', {                                                                          // 1284
          value: type                                                                                                  // 1285
        });                                                                                                            // 1286
        return type;                                                                                                   // 1287
      }                                                                                                                // 1288
    });                                                                                                                // 1289
  }                                                                                                                    // 1290
                                                                                                                       // 1291
  return validatedFactory;                                                                                             // 1292
}                                                                                                                      // 1293
                                                                                                                       // 1294
function cloneElementWithValidation(element, props, children) {                                                        // 1295
  var newElement = cloneElement.apply(this, arguments);                                                                // 1296
  for (var i = 2; i < arguments.length; i++) {                                                                         // 1297
    validateChildKeys(arguments[i], newElement.type);                                                                  // 1298
  }                                                                                                                    // 1299
  validatePropTypes(newElement);                                                                                       // 1300
  return newElement;                                                                                                   // 1301
}                                                                                                                      // 1302
                                                                                                                       // 1303
var React = {                                                                                                          // 1304
  Children: {                                                                                                          // 1305
    map: mapChildren,                                                                                                  // 1306
    forEach: forEachChildren,                                                                                          // 1307
    count: countChildren,                                                                                              // 1308
    toArray: toArray,                                                                                                  // 1309
    only: onlyChild                                                                                                    // 1310
  },                                                                                                                   // 1311
                                                                                                                       // 1312
  Component: Component,                                                                                                // 1313
  PureComponent: PureComponent,                                                                                        // 1314
  unstable_AsyncComponent: AsyncComponent,                                                                             // 1315
                                                                                                                       // 1316
  Fragment: REACT_FRAGMENT_TYPE,                                                                                       // 1317
                                                                                                                       // 1318
  createElement: createElementWithValidation,                                                                          // 1319
  cloneElement: cloneElementWithValidation,                                                                            // 1320
  createFactory: createFactoryWithValidation,                                                                          // 1321
  isValidElement: isValidElement,                                                                                      // 1322
                                                                                                                       // 1323
  version: ReactVersion,                                                                                               // 1324
                                                                                                                       // 1325
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {                                                                // 1326
    ReactCurrentOwner: ReactCurrentOwner,                                                                              // 1327
    // Used by renderers to avoid bundling object-assign twice in UMD bundles:                                         // 1328
    assign: _assign                                                                                                    // 1329
  }                                                                                                                    // 1330
};                                                                                                                     // 1331
                                                                                                                       // 1332
{                                                                                                                      // 1333
  _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {                                                  // 1334
    // These should not be included in production.                                                                     // 1335
    ReactDebugCurrentFrame: ReactDebugCurrentFrame,                                                                    // 1336
    // Shim for React DOM 16.0.0 which still destructured (but not used) this.                                         // 1337
    // TODO: remove in React 17.0.                                                                                     // 1338
    ReactComponentTreeHook: {}                                                                                         // 1339
  });                                                                                                                  // 1340
}                                                                                                                      // 1341
                                                                                                                       // 1342
                                                                                                                       // 1343
                                                                                                                       // 1344
var React$2 = Object.freeze({                                                                                          // 1345
	default: React                                                                                                        // 1346
});                                                                                                                    // 1347
                                                                                                                       // 1348
var React$3 = ( React$2 && React ) || React$2;                                                                         // 1349
                                                                                                                       // 1350
// TODO: decide on the top-level export form.                                                                          // 1351
// This is hacky but makes it work with both Rollup and Jest.                                                          // 1352
var react = React$3['default'] ? React$3['default'] : React$3;                                                         // 1353
                                                                                                                       // 1354
module.exports = react;                                                                                                // 1355
  })();                                                                                                                // 1356
}                                                                                                                      // 1357
                                                                                                                       // 1358
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"object-assign":{"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/object-assign/index.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*                                                                                                                     // 1
object-assign                                                                                                          // 2
(c) Sindre Sorhus                                                                                                      // 3
@license MIT                                                                                                           // 4
*/                                                                                                                     // 5
                                                                                                                       // 6
'use strict';                                                                                                          // 7
/* eslint-disable no-unused-vars */                                                                                    // 8
var getOwnPropertySymbols = Object.getOwnPropertySymbols;                                                              // 9
var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 10
var propIsEnumerable = Object.prototype.propertyIsEnumerable;                                                          // 11
                                                                                                                       // 12
function toObject(val) {                                                                                               // 13
	if (val === null || val === undefined) {                                                                              // 14
		throw new TypeError('Object.assign cannot be called with null or undefined');                                        // 15
	}                                                                                                                     // 16
                                                                                                                       // 17
	return Object(val);                                                                                                   // 18
}                                                                                                                      // 19
                                                                                                                       // 20
function shouldUseNative() {                                                                                           // 21
	try {                                                                                                                 // 22
		if (!Object.assign) {                                                                                                // 23
			return false;                                                                                                       // 24
		}                                                                                                                    // 25
                                                                                                                       // 26
		// Detect buggy property enumeration order in older V8 versions.                                                     // 27
                                                                                                                       // 28
		// https://bugs.chromium.org/p/v8/issues/detail?id=4118                                                              // 29
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers                                               // 30
		test1[5] = 'de';                                                                                                     // 31
		if (Object.getOwnPropertyNames(test1)[0] === '5') {                                                                  // 32
			return false;                                                                                                       // 33
		}                                                                                                                    // 34
                                                                                                                       // 35
		// https://bugs.chromium.org/p/v8/issues/detail?id=3056                                                              // 36
		var test2 = {};                                                                                                      // 37
		for (var i = 0; i < 10; i++) {                                                                                       // 38
			test2['_' + String.fromCharCode(i)] = i;                                                                            // 39
		}                                                                                                                    // 40
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {                                                    // 41
			return test2[n];                                                                                                    // 42
		});                                                                                                                  // 43
		if (order2.join('') !== '0123456789') {                                                                              // 44
			return false;                                                                                                       // 45
		}                                                                                                                    // 46
                                                                                                                       // 47
		// https://bugs.chromium.org/p/v8/issues/detail?id=3056                                                              // 48
		var test3 = {};                                                                                                      // 49
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {                                                         // 50
			test3[letter] = letter;                                                                                             // 51
		});                                                                                                                  // 52
		if (Object.keys(Object.assign({}, test3)).join('') !==                                                               // 53
				'abcdefghijklmnopqrst') {                                                                                          // 54
			return false;                                                                                                       // 55
		}                                                                                                                    // 56
                                                                                                                       // 57
		return true;                                                                                                         // 58
	} catch (err) {                                                                                                       // 59
		// We don't expect any of the above to throw, but better to be safe.                                                 // 60
		return false;                                                                                                        // 61
	}                                                                                                                     // 62
}                                                                                                                      // 63
                                                                                                                       // 64
module.exports = shouldUseNative() ? Object.assign : function (target, source) {                                       // 65
	var from;                                                                                                             // 66
	var to = toObject(target);                                                                                            // 67
	var symbols;                                                                                                          // 68
                                                                                                                       // 69
	for (var s = 1; s < arguments.length; s++) {                                                                          // 70
		from = Object(arguments[s]);                                                                                         // 71
                                                                                                                       // 72
		for (var key in from) {                                                                                              // 73
			if (hasOwnProperty.call(from, key)) {                                                                               // 74
				to[key] = from[key];                                                                                               // 75
			}                                                                                                                   // 76
		}                                                                                                                    // 77
                                                                                                                       // 78
		if (getOwnPropertySymbols) {                                                                                         // 79
			symbols = getOwnPropertySymbols(from);                                                                              // 80
			for (var i = 0; i < symbols.length; i++) {                                                                          // 81
				if (propIsEnumerable.call(from, symbols[i])) {                                                                     // 82
					to[symbols[i]] = from[symbols[i]];                                                                                // 83
				}                                                                                                                  // 84
			}                                                                                                                   // 85
		}                                                                                                                    // 86
	}                                                                                                                     // 87
                                                                                                                       // 88
	return to;                                                                                                            // 89
};                                                                                                                     // 90
                                                                                                                       // 91
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"fbjs":{"lib":{"emptyObject.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/emptyObject.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 *                                                                                                                     // 3
 * This source code is licensed under the MIT license found in the                                                     // 4
 * LICENSE file in the root directory of this source tree.                                                             // 5
 *                                                                                                                     // 6
 */                                                                                                                    // 7
                                                                                                                       // 8
'use strict';                                                                                                          // 9
                                                                                                                       // 10
var emptyObject = {};                                                                                                  // 11
                                                                                                                       // 12
if (process.env.NODE_ENV !== 'production') {                                                                           // 13
  Object.freeze(emptyObject);                                                                                          // 14
}                                                                                                                      // 15
                                                                                                                       // 16
module.exports = emptyObject;                                                                                          // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"emptyFunction.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/emptyFunction.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 *                                                                                                                     // 5
 * This source code is licensed under the MIT license found in the                                                     // 6
 * LICENSE file in the root directory of this source tree.                                                             // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
function makeEmptyFunction(arg) {                                                                                      // 12
  return function () {                                                                                                 // 13
    return arg;                                                                                                        // 14
  };                                                                                                                   // 15
}                                                                                                                      // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * This function accepts and discards inputs; it has no side effects. This is                                          // 19
 * primarily useful idiomatically for overridable function endpoints which                                             // 20
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.                                             // 21
 */                                                                                                                    // 22
var emptyFunction = function emptyFunction() {};                                                                       // 23
                                                                                                                       // 24
emptyFunction.thatReturns = makeEmptyFunction;                                                                         // 25
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);                                                             // 26
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);                                                               // 27
emptyFunction.thatReturnsNull = makeEmptyFunction(null);                                                               // 28
emptyFunction.thatReturnsThis = function () {                                                                          // 29
  return this;                                                                                                         // 30
};                                                                                                                     // 31
emptyFunction.thatReturnsArgument = function (arg) {                                                                   // 32
  return arg;                                                                                                          // 33
};                                                                                                                     // 34
                                                                                                                       // 35
module.exports = emptyFunction;                                                                                        // 36
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"invariant.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/invariant.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 *                                                                                                                     // 3
 * This source code is licensed under the MIT license found in the                                                     // 4
 * LICENSE file in the root directory of this source tree.                                                             // 5
 *                                                                                                                     // 6
 */                                                                                                                    // 7
                                                                                                                       // 8
'use strict';                                                                                                          // 9
                                                                                                                       // 10
/**                                                                                                                    // 11
 * Use invariant() to assert state which your program assumes to be true.                                              // 12
 *                                                                                                                     // 13
 * Provide sprintf-style format (only %s is supported) and arguments                                                   // 14
 * to provide information about what broke and what you were                                                           // 15
 * expecting.                                                                                                          // 16
 *                                                                                                                     // 17
 * The invariant message will be stripped in production, but the invariant                                             // 18
 * will remain to ensure logic does not differ in production.                                                          // 19
 */                                                                                                                    // 20
                                                                                                                       // 21
var validateFormat = function validateFormat(format) {};                                                               // 22
                                                                                                                       // 23
if (process.env.NODE_ENV !== 'production') {                                                                           // 24
  validateFormat = function validateFormat(format) {                                                                   // 25
    if (format === undefined) {                                                                                        // 26
      throw new Error('invariant requires an error message argument');                                                 // 27
    }                                                                                                                  // 28
  };                                                                                                                   // 29
}                                                                                                                      // 30
                                                                                                                       // 31
function invariant(condition, format, a, b, c, d, e, f) {                                                              // 32
  validateFormat(format);                                                                                              // 33
                                                                                                                       // 34
  if (!condition) {                                                                                                    // 35
    var error;                                                                                                         // 36
    if (format === undefined) {                                                                                        // 37
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {                                                                                                           // 39
      var args = [a, b, c, d, e, f];                                                                                   // 40
      var argIndex = 0;                                                                                                // 41
      error = new Error(format.replace(/%s/g, function () {                                                            // 42
        return args[argIndex++];                                                                                       // 43
      }));                                                                                                             // 44
      error.name = 'Invariant Violation';                                                                              // 45
    }                                                                                                                  // 46
                                                                                                                       // 47
    error.framesToPop = 1; // we don't care about invariant's own frame                                                // 48
    throw error;                                                                                                       // 49
  }                                                                                                                    // 50
}                                                                                                                      // 51
                                                                                                                       // 52
module.exports = invariant;                                                                                            // 53
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"warning.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/warning.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2014-present, Facebook, Inc.                                                                          // 2
 *                                                                                                                     // 3
 * This source code is licensed under the MIT license found in the                                                     // 4
 * LICENSE file in the root directory of this source tree.                                                             // 5
 *                                                                                                                     // 6
 */                                                                                                                    // 7
                                                                                                                       // 8
'use strict';                                                                                                          // 9
                                                                                                                       // 10
var emptyFunction = require('./emptyFunction');                                                                        // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * Similar to invariant but only logs a warning if the condition is not met.                                           // 14
 * This can be used to log issues in development environments in critical                                              // 15
 * paths. Removing the logging code for production environments will keep the                                          // 16
 * same logic and follow the same code paths.                                                                          // 17
 */                                                                                                                    // 18
                                                                                                                       // 19
var warning = emptyFunction;                                                                                           // 20
                                                                                                                       // 21
if (process.env.NODE_ENV !== 'production') {                                                                           // 22
  var printWarning = function printWarning(format) {                                                                   // 23
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {          // 24
      args[_key - 1] = arguments[_key];                                                                                // 25
    }                                                                                                                  // 26
                                                                                                                       // 27
    var argIndex = 0;                                                                                                  // 28
    var message = 'Warning: ' + format.replace(/%s/g, function () {                                                    // 29
      return args[argIndex++];                                                                                         // 30
    });                                                                                                                // 31
    if (typeof console !== 'undefined') {                                                                              // 32
      console.error(message);                                                                                          // 33
    }                                                                                                                  // 34
    try {                                                                                                              // 35
      // --- Welcome to debugging React ---                                                                            // 36
      // This error was thrown as a convenience so that you can use this stack                                         // 37
      // to find the callsite that caused this warning to fire.                                                        // 38
      throw new Error(message);                                                                                        // 39
    } catch (x) {}                                                                                                     // 40
  };                                                                                                                   // 41
                                                                                                                       // 42
  warning = function warning(condition, format) {                                                                      // 43
    if (format === undefined) {                                                                                        // 44
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');               // 45
    }                                                                                                                  // 46
                                                                                                                       // 47
    if (format.indexOf('Failed Composite propType: ') === 0) {                                                         // 48
      return; // Ignore CompositeComponent proptype check.                                                             // 49
    }                                                                                                                  // 50
                                                                                                                       // 51
    if (!condition) {                                                                                                  // 52
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];                                                                            // 54
      }                                                                                                                // 55
                                                                                                                       // 56
      printWarning.apply(undefined, [format].concat(args));                                                            // 57
    }                                                                                                                  // 58
  };                                                                                                                   // 59
}                                                                                                                      // 60
                                                                                                                       // 61
module.exports = warning;                                                                                              // 62
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ExecutionEnvironment.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/ExecutionEnvironment.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 *                                                                                                                     // 3
 * This source code is licensed under the MIT license found in the                                                     // 4
 * LICENSE file in the root directory of this source tree.                                                             // 5
 *                                                                                                                     // 6
 */                                                                                                                    // 7
                                                                                                                       // 8
'use strict';                                                                                                          // 9
                                                                                                                       // 10
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);                 // 11
                                                                                                                       // 12
/**                                                                                                                    // 13
 * Simple, lightweight module assisting with the detection and context of                                              // 14
 * Worker. Helps avoid circular dependencies and allows code to reason about                                           // 15
 * whether or not they are in a Worker, even if they never include the main                                            // 16
 * `ReactWorker` dependency.                                                                                           // 17
 */                                                                                                                    // 18
var ExecutionEnvironment = {                                                                                           // 19
                                                                                                                       // 20
  canUseDOM: canUseDOM,                                                                                                // 21
                                                                                                                       // 22
  canUseWorkers: typeof Worker !== 'undefined',                                                                        // 23
                                                                                                                       // 24
  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),                                // 25
                                                                                                                       // 26
  canUseViewport: canUseDOM && !!window.screen,                                                                        // 27
                                                                                                                       // 28
  isInWorker: !canUseDOM // For now, this is true - might change in the future.                                        // 29
                                                                                                                       // 30
};                                                                                                                     // 31
                                                                                                                       // 32
module.exports = ExecutionEnvironment;                                                                                 // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"EventListener.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/EventListener.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 *                                                                                                                     // 5
 * This source code is licensed under the MIT license found in the                                                     // 6
 * LICENSE file in the root directory of this source tree.                                                             // 7
 *                                                                                                                     // 8
 * @typechecks                                                                                                         // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
var emptyFunction = require('./emptyFunction');                                                                        // 12
                                                                                                                       // 13
/**                                                                                                                    // 14
 * Upstream version of event listener. Does not take into account specific                                             // 15
 * nature of platform.                                                                                                 // 16
 */                                                                                                                    // 17
var EventListener = {                                                                                                  // 18
  /**                                                                                                                  // 19
   * Listen to DOM events during the bubble phase.                                                                     // 20
   *                                                                                                                   // 21
   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 22
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 23
   * @param {function} callback Callback function.                                                                     // 24
   * @return {object} Object with a `remove` method.                                                                   // 25
   */                                                                                                                  // 26
  listen: function listen(target, eventType, callback) {                                                               // 27
    if (target.addEventListener) {                                                                                     // 28
      target.addEventListener(eventType, callback, false);                                                             // 29
      return {                                                                                                         // 30
        remove: function remove() {                                                                                    // 31
          target.removeEventListener(eventType, callback, false);                                                      // 32
        }                                                                                                              // 33
      };                                                                                                               // 34
    } else if (target.attachEvent) {                                                                                   // 35
      target.attachEvent('on' + eventType, callback);                                                                  // 36
      return {                                                                                                         // 37
        remove: function remove() {                                                                                    // 38
          target.detachEvent('on' + eventType, callback);                                                              // 39
        }                                                                                                              // 40
      };                                                                                                               // 41
    }                                                                                                                  // 42
  },                                                                                                                   // 43
                                                                                                                       // 44
  /**                                                                                                                  // 45
   * Listen to DOM events during the capture phase.                                                                    // 46
   *                                                                                                                   // 47
   * @param {DOMEventTarget} target DOM element to register listener on.                                               // 48
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.                                                // 49
   * @param {function} callback Callback function.                                                                     // 50
   * @return {object} Object with a `remove` method.                                                                   // 51
   */                                                                                                                  // 52
  capture: function capture(target, eventType, callback) {                                                             // 53
    if (target.addEventListener) {                                                                                     // 54
      target.addEventListener(eventType, callback, true);                                                              // 55
      return {                                                                                                         // 56
        remove: function remove() {                                                                                    // 57
          target.removeEventListener(eventType, callback, true);                                                       // 58
        }                                                                                                              // 59
      };                                                                                                               // 60
    } else {                                                                                                           // 61
      if (process.env.NODE_ENV !== 'production') {                                                                     // 62
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }                                                                                                                // 64
      return {                                                                                                         // 65
        remove: emptyFunction                                                                                          // 66
      };                                                                                                               // 67
    }                                                                                                                  // 68
  },                                                                                                                   // 69
                                                                                                                       // 70
  registerDefault: function registerDefault() {}                                                                       // 71
};                                                                                                                     // 72
                                                                                                                       // 73
module.exports = EventListener;                                                                                        // 74
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getActiveElement.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/getActiveElement.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 *                                                                                                                     // 5
 * This source code is licensed under the MIT license found in the                                                     // 6
 * LICENSE file in the root directory of this source tree.                                                             // 7
 *                                                                                                                     // 8
 * @typechecks                                                                                                         // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
/* eslint-disable fb-www/typeof-undefined */                                                                           // 12
                                                                                                                       // 13
/**                                                                                                                    // 14
 * Same as document.activeElement but wraps in a try-catch block. In IE it is                                          // 15
 * not safe to call document.activeElement if there is nothing focused.                                                // 16
 *                                                                                                                     // 17
 * The activeElement will be null only if the document or document body is not                                         // 18
 * yet defined.                                                                                                        // 19
 *                                                                                                                     // 20
 * @param {?DOMDocument} doc Defaults to current document.                                                             // 21
 * @return {?DOMElement}                                                                                               // 22
 */                                                                                                                    // 23
function getActiveElement(doc) /*?DOMElement*/{                                                                        // 24
  doc = doc || (typeof document !== 'undefined' ? document : undefined);                                               // 25
  if (typeof doc === 'undefined') {                                                                                    // 26
    return null;                                                                                                       // 27
  }                                                                                                                    // 28
  try {                                                                                                                // 29
    return doc.activeElement || doc.body;                                                                              // 30
  } catch (e) {                                                                                                        // 31
    return doc.body;                                                                                                   // 32
  }                                                                                                                    // 33
}                                                                                                                      // 34
                                                                                                                       // 35
module.exports = getActiveElement;                                                                                     // 36
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"shallowEqual.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/shallowEqual.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 *                                                                                                                     // 3
 * This source code is licensed under the MIT license found in the                                                     // 4
 * LICENSE file in the root directory of this source tree.                                                             // 5
 *                                                                                                                     // 6
 * @typechecks                                                                                                         // 7
 *                                                                                                                     // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
/*eslint-disable no-self-compare */                                                                                    // 11
                                                                                                                       // 12
'use strict';                                                                                                          // 13
                                                                                                                       // 14
var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 15
                                                                                                                       // 16
/**                                                                                                                    // 17
 * inlined Object.is polyfill to avoid requiring consumers ship their own                                              // 18
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is                          // 19
 */                                                                                                                    // 20
function is(x, y) {                                                                                                    // 21
  // SameValue algorithm                                                                                               // 22
  if (x === y) {                                                                                                       // 23
    // Steps 1-5, 7-10                                                                                                 // 24
    // Steps 6.b-6.e: +0 != -0                                                                                         // 25
    // Added the nonzero y check to make Flow happy, but it is redundant                                               // 26
    return x !== 0 || y !== 0 || 1 / x === 1 / y;                                                                      // 27
  } else {                                                                                                             // 28
    // Step 6.a: NaN == NaN                                                                                            // 29
    return x !== x && y !== y;                                                                                         // 30
  }                                                                                                                    // 31
}                                                                                                                      // 32
                                                                                                                       // 33
/**                                                                                                                    // 34
 * Performs equality by iterating through keys on an object and returning false                                        // 35
 * when any key has values which are not strictly equal between the arguments.                                         // 36
 * Returns true when the values of all keys are strictly equal.                                                        // 37
 */                                                                                                                    // 38
function shallowEqual(objA, objB) {                                                                                    // 39
  if (is(objA, objB)) {                                                                                                // 40
    return true;                                                                                                       // 41
  }                                                                                                                    // 42
                                                                                                                       // 43
  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {                        // 44
    return false;                                                                                                      // 45
  }                                                                                                                    // 46
                                                                                                                       // 47
  var keysA = Object.keys(objA);                                                                                       // 48
  var keysB = Object.keys(objB);                                                                                       // 49
                                                                                                                       // 50
  if (keysA.length !== keysB.length) {                                                                                 // 51
    return false;                                                                                                      // 52
  }                                                                                                                    // 53
                                                                                                                       // 54
  // Test for A's keys different from B.                                                                               // 55
  for (var i = 0; i < keysA.length; i++) {                                                                             // 56
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {                                 // 57
      return false;                                                                                                    // 58
    }                                                                                                                  // 59
  }                                                                                                                    // 60
                                                                                                                       // 61
  return true;                                                                                                         // 62
}                                                                                                                      // 63
                                                                                                                       // 64
module.exports = shallowEqual;                                                                                         // 65
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"containsNode.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/containsNode.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 *                                                                                                                     // 5
 * This source code is licensed under the MIT license found in the                                                     // 6
 * LICENSE file in the root directory of this source tree.                                                             // 7
 *                                                                                                                     // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
var isTextNode = require('./isTextNode');                                                                              // 12
                                                                                                                       // 13
/*eslint-disable no-bitwise */                                                                                         // 14
                                                                                                                       // 15
/**                                                                                                                    // 16
 * Checks if a given DOM node contains or is another DOM node.                                                         // 17
 */                                                                                                                    // 18
function containsNode(outerNode, innerNode) {                                                                          // 19
  if (!outerNode || !innerNode) {                                                                                      // 20
    return false;                                                                                                      // 21
  } else if (outerNode === innerNode) {                                                                                // 22
    return true;                                                                                                       // 23
  } else if (isTextNode(outerNode)) {                                                                                  // 24
    return false;                                                                                                      // 25
  } else if (isTextNode(innerNode)) {                                                                                  // 26
    return containsNode(outerNode, innerNode.parentNode);                                                              // 27
  } else if ('contains' in outerNode) {                                                                                // 28
    return outerNode.contains(innerNode);                                                                              // 29
  } else if (outerNode.compareDocumentPosition) {                                                                      // 30
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);                                                      // 31
  } else {                                                                                                             // 32
    return false;                                                                                                      // 33
  }                                                                                                                    // 34
}                                                                                                                      // 35
                                                                                                                       // 36
module.exports = containsNode;                                                                                         // 37
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"isTextNode.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/isTextNode.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 *                                                                                                                     // 5
 * This source code is licensed under the MIT license found in the                                                     // 6
 * LICENSE file in the root directory of this source tree.                                                             // 7
 *                                                                                                                     // 8
 * @typechecks                                                                                                         // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
var isNode = require('./isNode');                                                                                      // 12
                                                                                                                       // 13
/**                                                                                                                    // 14
 * @param {*} object The object to check.                                                                              // 15
 * @return {boolean} Whether or not the object is a DOM text node.                                                     // 16
 */                                                                                                                    // 17
function isTextNode(object) {                                                                                          // 18
  return isNode(object) && object.nodeType == 3;                                                                       // 19
}                                                                                                                      // 20
                                                                                                                       // 21
module.exports = isTextNode;                                                                                           // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"isNode.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/isNode.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 *                                                                                                                     // 5
 * This source code is licensed under the MIT license found in the                                                     // 6
 * LICENSE file in the root directory of this source tree.                                                             // 7
 *                                                                                                                     // 8
 * @typechecks                                                                                                         // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
/**                                                                                                                    // 12
 * @param {*} object The object to check.                                                                              // 13
 * @return {boolean} Whether or not the object is a DOM node.                                                          // 14
 */                                                                                                                    // 15
function isNode(object) {                                                                                              // 16
  var doc = object ? object.ownerDocument || object : document;                                                        // 17
  var defaultView = doc.defaultView || window;                                                                         // 18
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}                                                                                                                      // 20
                                                                                                                       // 21
module.exports = isNode;                                                                                               // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"focusNode.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/focusNode.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 *                                                                                                                     // 3
 * This source code is licensed under the MIT license found in the                                                     // 4
 * LICENSE file in the root directory of this source tree.                                                             // 5
 *                                                                                                                     // 6
 */                                                                                                                    // 7
                                                                                                                       // 8
'use strict';                                                                                                          // 9
                                                                                                                       // 10
/**                                                                                                                    // 11
 * @param {DOMElement} node input/textarea to focus                                                                    // 12
 */                                                                                                                    // 13
                                                                                                                       // 14
function focusNode(node) {                                                                                             // 15
  // IE8 can throw "Can't move focus to the control because it is invisible,                                           // 16
  // not enabled, or of a type that does not accept the focus." for all kinds of                                       // 17
  // reasons that are too expensive and fragile to test.                                                               // 18
  try {                                                                                                                // 19
    node.focus();                                                                                                      // 20
  } catch (e) {}                                                                                                       // 21
}                                                                                                                      // 22
                                                                                                                       // 23
module.exports = focusNode;                                                                                            // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"hyphenateStyleName.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/hyphenateStyleName.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 *                                                                                                                     // 3
 * This source code is licensed under the MIT license found in the                                                     // 4
 * LICENSE file in the root directory of this source tree.                                                             // 5
 *                                                                                                                     // 6
 * @typechecks                                                                                                         // 7
 */                                                                                                                    // 8
                                                                                                                       // 9
'use strict';                                                                                                          // 10
                                                                                                                       // 11
var hyphenate = require('./hyphenate');                                                                                // 12
                                                                                                                       // 13
var msPattern = /^ms-/;                                                                                                // 14
                                                                                                                       // 15
/**                                                                                                                    // 16
 * Hyphenates a camelcased CSS property name, for example:                                                             // 17
 *                                                                                                                     // 18
 *   > hyphenateStyleName('backgroundColor')                                                                           // 19
 *   < "background-color"                                                                                              // 20
 *   > hyphenateStyleName('MozTransition')                                                                             // 21
 *   < "-moz-transition"                                                                                               // 22
 *   > hyphenateStyleName('msTransition')                                                                              // 23
 *   < "-ms-transition"                                                                                                // 24
 *                                                                                                                     // 25
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix                                         // 26
 * is converted to `-ms-`.                                                                                             // 27
 *                                                                                                                     // 28
 * @param {string} string                                                                                              // 29
 * @return {string}                                                                                                    // 30
 */                                                                                                                    // 31
function hyphenateStyleName(string) {                                                                                  // 32
  return hyphenate(string).replace(msPattern, '-ms-');                                                                 // 33
}                                                                                                                      // 34
                                                                                                                       // 35
module.exports = hyphenateStyleName;                                                                                   // 36
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"hyphenate.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/hyphenate.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 *                                                                                                                     // 5
 * This source code is licensed under the MIT license found in the                                                     // 6
 * LICENSE file in the root directory of this source tree.                                                             // 7
 *                                                                                                                     // 8
 * @typechecks                                                                                                         // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
var _uppercasePattern = /([A-Z])/g;                                                                                    // 12
                                                                                                                       // 13
/**                                                                                                                    // 14
 * Hyphenates a camelcased string, for example:                                                                        // 15
 *                                                                                                                     // 16
 *   > hyphenate('backgroundColor')                                                                                    // 17
 *   < "background-color"                                                                                              // 18
 *                                                                                                                     // 19
 * For CSS style names, use `hyphenateStyleName` instead which works properly                                          // 20
 * with all vendor prefixes, including `ms`.                                                                           // 21
 *                                                                                                                     // 22
 * @param {string} string                                                                                              // 23
 * @return {string}                                                                                                    // 24
 */                                                                                                                    // 25
function hyphenate(string) {                                                                                           // 26
  return string.replace(_uppercasePattern, '-$1').toLowerCase();                                                       // 27
}                                                                                                                      // 28
                                                                                                                       // 29
module.exports = hyphenate;                                                                                            // 30
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"camelizeStyleName.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/camelizeStyleName.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 *                                                                                                                     // 3
 * This source code is licensed under the MIT license found in the                                                     // 4
 * LICENSE file in the root directory of this source tree.                                                             // 5
 *                                                                                                                     // 6
 * @typechecks                                                                                                         // 7
 */                                                                                                                    // 8
                                                                                                                       // 9
'use strict';                                                                                                          // 10
                                                                                                                       // 11
var camelize = require('./camelize');                                                                                  // 12
                                                                                                                       // 13
var msPattern = /^-ms-/;                                                                                               // 14
                                                                                                                       // 15
/**                                                                                                                    // 16
 * Camelcases a hyphenated CSS property name, for example:                                                             // 17
 *                                                                                                                     // 18
 *   > camelizeStyleName('background-color')                                                                           // 19
 *   < "backgroundColor"                                                                                               // 20
 *   > camelizeStyleName('-moz-transition')                                                                            // 21
 *   < "MozTransition"                                                                                                 // 22
 *   > camelizeStyleName('-ms-transition')                                                                             // 23
 *   < "msTransition"                                                                                                  // 24
 *                                                                                                                     // 25
 * As Andi Smith suggests                                                                                              // 26
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix                                        // 27
 * is converted to lowercase `ms`.                                                                                     // 28
 *                                                                                                                     // 29
 * @param {string} string                                                                                              // 30
 * @return {string}                                                                                                    // 31
 */                                                                                                                    // 32
function camelizeStyleName(string) {                                                                                   // 33
  return camelize(string.replace(msPattern, 'ms-'));                                                                   // 34
}                                                                                                                      // 35
                                                                                                                       // 36
module.exports = camelizeStyleName;                                                                                    // 37
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"camelize.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/fbjs/lib/camelize.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 *                                                                                                                     // 5
 * This source code is licensed under the MIT license found in the                                                     // 6
 * LICENSE file in the root directory of this source tree.                                                             // 7
 *                                                                                                                     // 8
 * @typechecks                                                                                                         // 9
 */                                                                                                                    // 10
                                                                                                                       // 11
var _hyphenPattern = /-(.)/g;                                                                                          // 12
                                                                                                                       // 13
/**                                                                                                                    // 14
 * Camelcases a hyphenated string, for example:                                                                        // 15
 *                                                                                                                     // 16
 *   > camelize('background-color')                                                                                    // 17
 *   < "backgroundColor"                                                                                               // 18
 *                                                                                                                     // 19
 * @param {string} string                                                                                              // 20
 * @return {string}                                                                                                    // 21
 */                                                                                                                    // 22
function camelize(string) {                                                                                            // 23
  return string.replace(_hyphenPattern, function (_, character) {                                                      // 24
    return character.toUpperCase();                                                                                    // 25
  });                                                                                                                  // 26
}                                                                                                                      // 27
                                                                                                                       // 28
module.exports = camelize;                                                                                             // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"prop-types":{"checkPropTypes.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/prop-types/checkPropTypes.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 *                                                                                                                     // 3
 * This source code is licensed under the MIT license found in the                                                     // 4
 * LICENSE file in the root directory of this source tree.                                                             // 5
 */                                                                                                                    // 6
                                                                                                                       // 7
'use strict';                                                                                                          // 8
                                                                                                                       // 9
if (process.env.NODE_ENV !== 'production') {                                                                           // 10
  var invariant = require('fbjs/lib/invariant');                                                                       // 11
  var warning = require('fbjs/lib/warning');                                                                           // 12
  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');                                                    // 13
  var loggedTypeFailures = {};                                                                                         // 14
}                                                                                                                      // 15
                                                                                                                       // 16
/**                                                                                                                    // 17
 * Assert that the values match with the type specs.                                                                   // 18
 * Error messages are memorized and will only be shown once.                                                           // 19
 *                                                                                                                     // 20
 * @param {object} typeSpecs Map of name to a ReactPropType                                                            // 21
 * @param {object} values Runtime values that need to be type-checked                                                  // 22
 * @param {string} location e.g. "prop", "context", "child context"                                                    // 23
 * @param {string} componentName Name of the component for error messages.                                             // 24
 * @param {?Function} getStack Returns the component stack.                                                            // 25
 * @private                                                                                                            // 26
 */                                                                                                                    // 27
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {                                        // 28
  if (process.env.NODE_ENV !== 'production') {                                                                         // 29
    for (var typeSpecName in typeSpecs) {                                                                              // 30
      if (typeSpecs.hasOwnProperty(typeSpecName)) {                                                                    // 31
        var error;                                                                                                     // 32
        // Prop type validation may throw. In case they do, we don't want to                                           // 33
        // fail the render phase where it didn't fail before. So we log it.                                            // 34
        // After these have been cleaned up, we'll let them throw.                                                     // 35
        try {                                                                                                          // 36
          // This is intentionally an invariant that gets caught. It's the same                                        // 37
          // behavior as without this statement except with a better message.                                          // 38
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);  // 40
        } catch (ex) {                                                                                                 // 41
          error = ex;                                                                                                  // 42
        }                                                                                                              // 43
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {                                        // 45
          // Only monitor this failure once because there tends to be a lot of the                                     // 46
          // same error.                                                                                               // 47
          loggedTypeFailures[error.message] = true;                                                                    // 48
                                                                                                                       // 49
          var stack = getStack ? getStack() : '';                                                                      // 50
                                                                                                                       // 51
          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');                 // 52
        }                                                                                                              // 53
      }                                                                                                                // 54
    }                                                                                                                  // 55
  }                                                                                                                    // 56
}                                                                                                                      // 57
                                                                                                                       // 58
module.exports = checkPropTypes;                                                                                       // 59
                                                                                                                       // 60
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"ReactPropTypesSecret.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/prop-types/lib/ReactPropTypesSecret.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 *                                                                                                                     // 3
 * This source code is licensed under the MIT license found in the                                                     // 4
 * LICENSE file in the root directory of this source tree.                                                             // 5
 */                                                                                                                    // 6
                                                                                                                       // 7
'use strict';                                                                                                          // 8
                                                                                                                       // 9
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';                                             // 10
                                                                                                                       // 11
module.exports = ReactPropTypesSecret;                                                                                 // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/prop-types/package.json                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "prop-types";                                                                                           // 1
exports.version = "15.6.0";                                                                                            // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/prop-types/index.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 *                                                                                                                     // 3
 * This source code is licensed under the MIT license found in the                                                     // 4
 * LICENSE file in the root directory of this source tree.                                                             // 5
 */                                                                                                                    // 6
                                                                                                                       // 7
if (process.env.NODE_ENV !== 'production') {                                                                           // 8
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&                                                            // 9
    Symbol.for &&                                                                                                      // 10
    Symbol.for('react.element')) ||                                                                                    // 11
    0xeac7;                                                                                                            // 12
                                                                                                                       // 13
  var isValidElement = function(object) {                                                                              // 14
    return typeof object === 'object' &&                                                                               // 15
      object !== null &&                                                                                               // 16
      object.$$typeof === REACT_ELEMENT_TYPE;                                                                          // 17
  };                                                                                                                   // 18
                                                                                                                       // 19
  // By explicitly using `prop-types` you are opting into new development behavior.                                    // 20
  // http://fb.me/prop-types-in-prod                                                                                   // 21
  var throwOnDirectAccess = true;                                                                                      // 22
  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);                          // 23
} else {                                                                                                               // 24
  // By explicitly using `prop-types` you are opting into new production behavior.                                     // 25
  // http://fb.me/prop-types-in-prod                                                                                   // 26
  module.exports = require('./factoryWithThrowingShims')();                                                            // 27
}                                                                                                                      // 28
                                                                                                                       // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"factoryWithTypeCheckers.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/prop-types/factoryWithTypeCheckers.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 *                                                                                                                     // 3
 * This source code is licensed under the MIT license found in the                                                     // 4
 * LICENSE file in the root directory of this source tree.                                                             // 5
 */                                                                                                                    // 6
                                                                                                                       // 7
'use strict';                                                                                                          // 8
                                                                                                                       // 9
var emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 10
var invariant = require('fbjs/lib/invariant');                                                                         // 11
var warning = require('fbjs/lib/warning');                                                                             // 12
var assign = require('object-assign');                                                                                 // 13
                                                                                                                       // 14
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');                                                      // 15
var checkPropTypes = require('./checkPropTypes');                                                                      // 16
                                                                                                                       // 17
module.exports = function(isValidElement, throwOnDirectAccess) {                                                       // 18
  /* global Symbol */                                                                                                  // 19
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;                                               // 20
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.                                                      // 21
                                                                                                                       // 22
  /**                                                                                                                  // 23
   * Returns the iterator method function contained on the iterable object.                                            // 24
   *                                                                                                                   // 25
   * Be sure to invoke the function with the iterable as context:                                                      // 26
   *                                                                                                                   // 27
   *     var iteratorFn = getIteratorFn(myIterable);                                                                   // 28
   *     if (iteratorFn) {                                                                                             // 29
   *       var iterator = iteratorFn.call(myIterable);                                                                 // 30
   *       ...                                                                                                         // 31
   *     }                                                                                                             // 32
   *                                                                                                                   // 33
   * @param {?object} maybeIterable                                                                                    // 34
   * @return {?function}                                                                                               // 35
   */                                                                                                                  // 36
  function getIteratorFn(maybeIterable) {                                                                              // 37
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {                                                                            // 39
      return iteratorFn;                                                                                               // 40
    }                                                                                                                  // 41
  }                                                                                                                    // 42
                                                                                                                       // 43
  /**                                                                                                                  // 44
   * Collection of methods that allow declaration and validation of props that are                                     // 45
   * supplied to React components. Example usage:                                                                      // 46
   *                                                                                                                   // 47
   *   var Props = require('ReactPropTypes');                                                                          // 48
   *   var MyArticle = React.createClass({                                                                             // 49
   *     propTypes: {                                                                                                  // 50
   *       // An optional string prop named "description".                                                             // 51
   *       description: Props.string,                                                                                  // 52
   *                                                                                                                   // 53
   *       // A required enum prop named "category".                                                                   // 54
   *       category: Props.oneOf(['News','Photos']).isRequired,                                                        // 55
   *                                                                                                                   // 56
   *       // A prop named "dialog" that requires an instance of Dialog.                                               // 57
   *       dialog: Props.instanceOf(Dialog).isRequired                                                                 // 58
   *     },                                                                                                            // 59
   *     render: function() { ... }                                                                                    // 60
   *   });                                                                                                             // 61
   *                                                                                                                   // 62
   * A more formal specification of how these methods are used:                                                        // 63
   *                                                                                                                   // 64
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)                                       // 65
   *   decl := ReactPropTypes.{type}(.isRequired)?                                                                     // 66
   *                                                                                                                   // 67
   * Each and every declaration produces a function with the same signature. This                                      // 68
   * allows the creation of custom validation functions. For example:                                                  // 69
   *                                                                                                                   // 70
   *  var MyLink = React.createClass({                                                                                 // 71
   *    propTypes: {                                                                                                   // 72
   *      // An optional string or URI prop named "href".                                                              // 73
   *      href: function(props, propName, componentName) {                                                             // 74
   *        var propValue = props[propName];                                                                           // 75
   *        if (propValue != null && typeof propValue !== 'string' &&                                                  // 76
   *            !(propValue instanceof URI)) {                                                                         // 77
   *          return new Error(                                                                                        // 78
   *            'Expected a string or an URI for ' + propName + ' in ' +                                               // 79
   *            componentName                                                                                          // 80
   *          );                                                                                                       // 81
   *        }                                                                                                          // 82
   *      }                                                                                                            // 83
   *    },                                                                                                             // 84
   *    render: function() {...}                                                                                       // 85
   *  });                                                                                                              // 86
   *                                                                                                                   // 87
   * @internal                                                                                                         // 88
   */                                                                                                                  // 89
                                                                                                                       // 90
  var ANONYMOUS = '<<anonymous>>';                                                                                     // 91
                                                                                                                       // 92
  // Important!                                                                                                        // 93
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.                                // 94
  var ReactPropTypes = {                                                                                               // 95
    array: createPrimitiveTypeChecker('array'),                                                                        // 96
    bool: createPrimitiveTypeChecker('boolean'),                                                                       // 97
    func: createPrimitiveTypeChecker('function'),                                                                      // 98
    number: createPrimitiveTypeChecker('number'),                                                                      // 99
    object: createPrimitiveTypeChecker('object'),                                                                      // 100
    string: createPrimitiveTypeChecker('string'),                                                                      // 101
    symbol: createPrimitiveTypeChecker('symbol'),                                                                      // 102
                                                                                                                       // 103
    any: createAnyTypeChecker(),                                                                                       // 104
    arrayOf: createArrayOfTypeChecker,                                                                                 // 105
    element: createElementTypeChecker(),                                                                               // 106
    instanceOf: createInstanceTypeChecker,                                                                             // 107
    node: createNodeChecker(),                                                                                         // 108
    objectOf: createObjectOfTypeChecker,                                                                               // 109
    oneOf: createEnumTypeChecker,                                                                                      // 110
    oneOfType: createUnionTypeChecker,                                                                                 // 111
    shape: createShapeTypeChecker,                                                                                     // 112
    exact: createStrictShapeTypeChecker,                                                                               // 113
  };                                                                                                                   // 114
                                                                                                                       // 115
  /**                                                                                                                  // 116
   * inlined Object.is polyfill to avoid requiring consumers ship their own                                            // 117
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is                        // 118
   */                                                                                                                  // 119
  /*eslint-disable no-self-compare*/                                                                                   // 120
  function is(x, y) {                                                                                                  // 121
    // SameValue algorithm                                                                                             // 122
    if (x === y) {                                                                                                     // 123
      // Steps 1-5, 7-10                                                                                               // 124
      // Steps 6.b-6.e: +0 != -0                                                                                       // 125
      return x !== 0 || 1 / x === 1 / y;                                                                               // 126
    } else {                                                                                                           // 127
      // Step 6.a: NaN == NaN                                                                                          // 128
      return x !== x && y !== y;                                                                                       // 129
    }                                                                                                                  // 130
  }                                                                                                                    // 131
  /*eslint-enable no-self-compare*/                                                                                    // 132
                                                                                                                       // 133
  /**                                                                                                                  // 134
   * We use an Error-like object for backward compatibility as people may call                                         // 135
   * PropTypes directly and inspect their output. However, we don't use real                                           // 136
   * Errors anymore. We don't inspect their stack anyway, and creating them                                            // 137
   * is prohibitively expensive if they are created too often, such as what                                            // 138
   * happens in oneOfType() for any type before the one that matched.                                                  // 139
   */                                                                                                                  // 140
  function PropTypeError(message) {                                                                                    // 141
    this.message = message;                                                                                            // 142
    this.stack = '';                                                                                                   // 143
  }                                                                                                                    // 144
  // Make `instanceof Error` still work for returned errors.                                                           // 145
  PropTypeError.prototype = Error.prototype;                                                                           // 146
                                                                                                                       // 147
  function createChainableTypeChecker(validate) {                                                                      // 148
    if (process.env.NODE_ENV !== 'production') {                                                                       // 149
      var manualPropTypeCallCache = {};                                                                                // 150
      var manualPropTypeWarningCount = 0;                                                                              // 151
    }                                                                                                                  // 152
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {                   // 153
      componentName = componentName || ANONYMOUS;                                                                      // 154
      propFullName = propFullName || propName;                                                                         // 155
                                                                                                                       // 156
      if (secret !== ReactPropTypesSecret) {                                                                           // 157
        if (throwOnDirectAccess) {                                                                                     // 158
          // New behavior only for users of `prop-types` package                                                       // 159
          invariant(                                                                                                   // 160
            false,                                                                                                     // 161
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +                   // 162
            'Use `PropTypes.checkPropTypes()` to call them. ' +                                                        // 163
            'Read more at http://fb.me/use-check-prop-types'                                                           // 164
          );                                                                                                           // 165
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {                          // 166
          // Old behavior for people using React.PropTypes                                                             // 167
          var cacheKey = componentName + ':' + propName;                                                               // 168
          if (                                                                                                         // 169
            !manualPropTypeCallCache[cacheKey] &&                                                                      // 170
            // Avoid spamming the console because they are often not actionable except for lib authors                 // 171
            manualPropTypeWarningCount < 3                                                                             // 172
          ) {                                                                                                          // 173
            warning(                                                                                                   // 174
              false,                                                                                                   // 175
              'You are manually calling a React.PropTypes validation ' +                                               // 176
              'function for the `%s` prop on `%s`. This is deprecated ' +                                              // 177
              'and will throw in the standalone `prop-types` package. ' +                                              // 178
              'You may be seeing this warning due to a third-party PropTypes ' +                                       // 179
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',                        // 180
              propFullName,                                                                                            // 181
              componentName                                                                                            // 182
            );                                                                                                         // 183
            manualPropTypeCallCache[cacheKey] = true;                                                                  // 184
            manualPropTypeWarningCount++;                                                                              // 185
          }                                                                                                            // 186
        }                                                                                                              // 187
      }                                                                                                                // 188
      if (props[propName] == null) {                                                                                   // 189
        if (isRequired) {                                                                                              // 190
          if (props[propName] === null) {                                                                              // 191
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }                                                                                                            // 193
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }                                                                                                              // 195
        return null;                                                                                                   // 196
      } else {                                                                                                         // 197
        return validate(props, propName, componentName, location, propFullName);                                       // 198
      }                                                                                                                // 199
    }                                                                                                                  // 200
                                                                                                                       // 201
    var chainedCheckType = checkType.bind(null, false);                                                                // 202
    chainedCheckType.isRequired = checkType.bind(null, true);                                                          // 203
                                                                                                                       // 204
    return chainedCheckType;                                                                                           // 205
  }                                                                                                                    // 206
                                                                                                                       // 207
  function createPrimitiveTypeChecker(expectedType) {                                                                  // 208
    function validate(props, propName, componentName, location, propFullName, secret) {                                // 209
      var propValue = props[propName];                                                                                 // 210
      var propType = getPropType(propValue);                                                                           // 211
      if (propType !== expectedType) {                                                                                 // 212
        // `propValue` being instance of, say, date/regexp, pass the 'object'                                          // 213
        // check, but we can offer a more precise error message here rather than                                       // 214
        // 'of type `object`'.                                                                                         // 215
        var preciseType = getPreciseType(propValue);                                                                   // 216
                                                                                                                       // 217
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }                                                                                                                // 219
      return null;                                                                                                     // 220
    }                                                                                                                  // 221
    return createChainableTypeChecker(validate);                                                                       // 222
  }                                                                                                                    // 223
                                                                                                                       // 224
  function createAnyTypeChecker() {                                                                                    // 225
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);                                                  // 226
  }                                                                                                                    // 227
                                                                                                                       // 228
  function createArrayOfTypeChecker(typeChecker) {                                                                     // 229
    function validate(props, propName, componentName, location, propFullName) {                                        // 230
      if (typeof typeChecker !== 'function') {                                                                         // 231
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }                                                                                                                // 233
      var propValue = props[propName];                                                                                 // 234
      if (!Array.isArray(propValue)) {                                                                                 // 235
        var propType = getPropType(propValue);                                                                         // 236
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }                                                                                                                // 238
      for (var i = 0; i < propValue.length; i++) {                                                                     // 239
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {                                                                                  // 241
          return error;                                                                                                // 242
        }                                                                                                              // 243
      }                                                                                                                // 244
      return null;                                                                                                     // 245
    }                                                                                                                  // 246
    return createChainableTypeChecker(validate);                                                                       // 247
  }                                                                                                                    // 248
                                                                                                                       // 249
  function createElementTypeChecker() {                                                                                // 250
    function validate(props, propName, componentName, location, propFullName) {                                        // 251
      var propValue = props[propName];                                                                                 // 252
      if (!isValidElement(propValue)) {                                                                                // 253
        var propType = getPropType(propValue);                                                                         // 254
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }                                                                                                                // 256
      return null;                                                                                                     // 257
    }                                                                                                                  // 258
    return createChainableTypeChecker(validate);                                                                       // 259
  }                                                                                                                    // 260
                                                                                                                       // 261
  function createInstanceTypeChecker(expectedClass) {                                                                  // 262
    function validate(props, propName, componentName, location, propFullName) {                                        // 263
      if (!(props[propName] instanceof expectedClass)) {                                                               // 264
        var expectedClassName = expectedClass.name || ANONYMOUS;                                                       // 265
        var actualClassName = getClassName(props[propName]);                                                           // 266
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }                                                                                                                // 268
      return null;                                                                                                     // 269
    }                                                                                                                  // 270
    return createChainableTypeChecker(validate);                                                                       // 271
  }                                                                                                                    // 272
                                                                                                                       // 273
  function createEnumTypeChecker(expectedValues) {                                                                     // 274
    if (!Array.isArray(expectedValues)) {                                                                              // 275
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;                                                                            // 277
    }                                                                                                                  // 278
                                                                                                                       // 279
    function validate(props, propName, componentName, location, propFullName) {                                        // 280
      var propValue = props[propName];                                                                                 // 281
      for (var i = 0; i < expectedValues.length; i++) {                                                                // 282
        if (is(propValue, expectedValues[i])) {                                                                        // 283
          return null;                                                                                                 // 284
        }                                                                                                              // 285
      }                                                                                                                // 286
                                                                                                                       // 287
      var valuesString = JSON.stringify(expectedValues);                                                               // 288
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }                                                                                                                  // 290
    return createChainableTypeChecker(validate);                                                                       // 291
  }                                                                                                                    // 292
                                                                                                                       // 293
  function createObjectOfTypeChecker(typeChecker) {                                                                    // 294
    function validate(props, propName, componentName, location, propFullName) {                                        // 295
      if (typeof typeChecker !== 'function') {                                                                         // 296
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }                                                                                                                // 298
      var propValue = props[propName];                                                                                 // 299
      var propType = getPropType(propValue);                                                                           // 300
      if (propType !== 'object') {                                                                                     // 301
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }                                                                                                                // 303
      for (var key in propValue) {                                                                                     // 304
        if (propValue.hasOwnProperty(key)) {                                                                           // 305
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {                                                                                // 307
            return error;                                                                                              // 308
          }                                                                                                            // 309
        }                                                                                                              // 310
      }                                                                                                                // 311
      return null;                                                                                                     // 312
    }                                                                                                                  // 313
    return createChainableTypeChecker(validate);                                                                       // 314
  }                                                                                                                    // 315
                                                                                                                       // 316
  function createUnionTypeChecker(arrayOfTypeCheckers) {                                                               // 317
    if (!Array.isArray(arrayOfTypeCheckers)) {                                                                         // 318
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;                                                                            // 320
    }                                                                                                                  // 321
                                                                                                                       // 322
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {                                                             // 323
      var checker = arrayOfTypeCheckers[i];                                                                            // 324
      if (typeof checker !== 'function') {                                                                             // 325
        warning(                                                                                                       // 326
          false,                                                                                                       // 327
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +                       // 328
          'received %s at index %s.',                                                                                  // 329
          getPostfixForTypeWarning(checker),                                                                           // 330
          i                                                                                                            // 331
        );                                                                                                             // 332
        return emptyFunction.thatReturnsNull;                                                                          // 333
      }                                                                                                                // 334
    }                                                                                                                  // 335
                                                                                                                       // 336
    function validate(props, propName, componentName, location, propFullName) {                                        // 337
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {                                                           // 338
        var checker = arrayOfTypeCheckers[i];                                                                          // 339
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {           // 340
          return null;                                                                                                 // 341
        }                                                                                                              // 342
      }                                                                                                                // 343
                                                                                                                       // 344
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }                                                                                                                  // 346
    return createChainableTypeChecker(validate);                                                                       // 347
  }                                                                                                                    // 348
                                                                                                                       // 349
  function createNodeChecker() {                                                                                       // 350
    function validate(props, propName, componentName, location, propFullName) {                                        // 351
      if (!isNode(props[propName])) {                                                                                  // 352
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }                                                                                                                // 354
      return null;                                                                                                     // 355
    }                                                                                                                  // 356
    return createChainableTypeChecker(validate);                                                                       // 357
  }                                                                                                                    // 358
                                                                                                                       // 359
  function createShapeTypeChecker(shapeTypes) {                                                                        // 360
    function validate(props, propName, componentName, location, propFullName) {                                        // 361
      var propValue = props[propName];                                                                                 // 362
      var propType = getPropType(propValue);                                                                           // 363
      if (propType !== 'object') {                                                                                     // 364
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }                                                                                                                // 366
      for (var key in shapeTypes) {                                                                                    // 367
        var checker = shapeTypes[key];                                                                                 // 368
        if (!checker) {                                                                                                // 369
          continue;                                                                                                    // 370
        }                                                                                                              // 371
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);  // 372
        if (error) {                                                                                                   // 373
          return error;                                                                                                // 374
        }                                                                                                              // 375
      }                                                                                                                // 376
      return null;                                                                                                     // 377
    }                                                                                                                  // 378
    return createChainableTypeChecker(validate);                                                                       // 379
  }                                                                                                                    // 380
                                                                                                                       // 381
  function createStrictShapeTypeChecker(shapeTypes) {                                                                  // 382
    function validate(props, propName, componentName, location, propFullName) {                                        // 383
      var propValue = props[propName];                                                                                 // 384
      var propType = getPropType(propValue);                                                                           // 385
      if (propType !== 'object') {                                                                                     // 386
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }                                                                                                                // 388
      // We need to check all keys in case some are required but missing from                                          // 389
      // props.                                                                                                        // 390
      var allKeys = assign({}, props[propName], shapeTypes);                                                           // 391
      for (var key in allKeys) {                                                                                       // 392
        var checker = shapeTypes[key];                                                                                 // 393
        if (!checker) {                                                                                                // 394
          return new PropTypeError(                                                                                    // 395
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +                                           // 397
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')                                    // 398
          );                                                                                                           // 399
        }                                                                                                              // 400
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);  // 401
        if (error) {                                                                                                   // 402
          return error;                                                                                                // 403
        }                                                                                                              // 404
      }                                                                                                                // 405
      return null;                                                                                                     // 406
    }                                                                                                                  // 407
                                                                                                                       // 408
    return createChainableTypeChecker(validate);                                                                       // 409
  }                                                                                                                    // 410
                                                                                                                       // 411
  function isNode(propValue) {                                                                                         // 412
    switch (typeof propValue) {                                                                                        // 413
      case 'number':                                                                                                   // 414
      case 'string':                                                                                                   // 415
      case 'undefined':                                                                                                // 416
        return true;                                                                                                   // 417
      case 'boolean':                                                                                                  // 418
        return !propValue;                                                                                             // 419
      case 'object':                                                                                                   // 420
        if (Array.isArray(propValue)) {                                                                                // 421
          return propValue.every(isNode);                                                                              // 422
        }                                                                                                              // 423
        if (propValue === null || isValidElement(propValue)) {                                                         // 424
          return true;                                                                                                 // 425
        }                                                                                                              // 426
                                                                                                                       // 427
        var iteratorFn = getIteratorFn(propValue);                                                                     // 428
        if (iteratorFn) {                                                                                              // 429
          var iterator = iteratorFn.call(propValue);                                                                   // 430
          var step;                                                                                                    // 431
          if (iteratorFn !== propValue.entries) {                                                                      // 432
            while (!(step = iterator.next()).done) {                                                                   // 433
              if (!isNode(step.value)) {                                                                               // 434
                return false;                                                                                          // 435
              }                                                                                                        // 436
            }                                                                                                          // 437
          } else {                                                                                                     // 438
            // Iterator will provide entry [k,v] tuples rather than values.                                            // 439
            while (!(step = iterator.next()).done) {                                                                   // 440
              var entry = step.value;                                                                                  // 441
              if (entry) {                                                                                             // 442
                if (!isNode(entry[1])) {                                                                               // 443
                  return false;                                                                                        // 444
                }                                                                                                      // 445
              }                                                                                                        // 446
            }                                                                                                          // 447
          }                                                                                                            // 448
        } else {                                                                                                       // 449
          return false;                                                                                                // 450
        }                                                                                                              // 451
                                                                                                                       // 452
        return true;                                                                                                   // 453
      default:                                                                                                         // 454
        return false;                                                                                                  // 455
    }                                                                                                                  // 456
  }                                                                                                                    // 457
                                                                                                                       // 458
  function isSymbol(propType, propValue) {                                                                             // 459
    // Native Symbol.                                                                                                  // 460
    if (propType === 'symbol') {                                                                                       // 461
      return true;                                                                                                     // 462
    }                                                                                                                  // 463
                                                                                                                       // 464
    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'                                                           // 465
    if (propValue['@@toStringTag'] === 'Symbol') {                                                                     // 466
      return true;                                                                                                     // 467
    }                                                                                                                  // 468
                                                                                                                       // 469
    // Fallback for non-spec compliant Symbols which are polyfilled.                                                   // 470
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {                                                 // 471
      return true;                                                                                                     // 472
    }                                                                                                                  // 473
                                                                                                                       // 474
    return false;                                                                                                      // 475
  }                                                                                                                    // 476
                                                                                                                       // 477
  // Equivalent of `typeof` but with special handling for array and regexp.                                            // 478
  function getPropType(propValue) {                                                                                    // 479
    var propType = typeof propValue;                                                                                   // 480
    if (Array.isArray(propValue)) {                                                                                    // 481
      return 'array';                                                                                                  // 482
    }                                                                                                                  // 483
    if (propValue instanceof RegExp) {                                                                                 // 484
      // Old webkits (at least until Android 4.0) return 'function' rather than                                        // 485
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/                                         // 486
      // passes PropTypes.object.                                                                                      // 487
      return 'object';                                                                                                 // 488
    }                                                                                                                  // 489
    if (isSymbol(propType, propValue)) {                                                                               // 490
      return 'symbol';                                                                                                 // 491
    }                                                                                                                  // 492
    return propType;                                                                                                   // 493
  }                                                                                                                    // 494
                                                                                                                       // 495
  // This handles more types than `getPropType`. Only used for error messages.                                         // 496
  // See `createPrimitiveTypeChecker`.                                                                                 // 497
  function getPreciseType(propValue) {                                                                                 // 498
    if (typeof propValue === 'undefined' || propValue === null) {                                                      // 499
      return '' + propValue;                                                                                           // 500
    }                                                                                                                  // 501
    var propType = getPropType(propValue);                                                                             // 502
    if (propType === 'object') {                                                                                       // 503
      if (propValue instanceof Date) {                                                                                 // 504
        return 'date';                                                                                                 // 505
      } else if (propValue instanceof RegExp) {                                                                        // 506
        return 'regexp';                                                                                               // 507
      }                                                                                                                // 508
    }                                                                                                                  // 509
    return propType;                                                                                                   // 510
  }                                                                                                                    // 511
                                                                                                                       // 512
  // Returns a string that is postfixed to a warning about an invalid type.                                            // 513
  // For example, "undefined" or "of type array"                                                                       // 514
  function getPostfixForTypeWarning(value) {                                                                           // 515
    var type = getPreciseType(value);                                                                                  // 516
    switch (type) {                                                                                                    // 517
      case 'array':                                                                                                    // 518
      case 'object':                                                                                                   // 519
        return 'an ' + type;                                                                                           // 520
      case 'boolean':                                                                                                  // 521
      case 'date':                                                                                                     // 522
      case 'regexp':                                                                                                   // 523
        return 'a ' + type;                                                                                            // 524
      default:                                                                                                         // 525
        return type;                                                                                                   // 526
    }                                                                                                                  // 527
  }                                                                                                                    // 528
                                                                                                                       // 529
  // Returns class name of the object, if any.                                                                         // 530
  function getClassName(propValue) {                                                                                   // 531
    if (!propValue.constructor || !propValue.constructor.name) {                                                       // 532
      return ANONYMOUS;                                                                                                // 533
    }                                                                                                                  // 534
    return propValue.constructor.name;                                                                                 // 535
  }                                                                                                                    // 536
                                                                                                                       // 537
  ReactPropTypes.checkPropTypes = checkPropTypes;                                                                      // 538
  ReactPropTypes.PropTypes = ReactPropTypes;                                                                           // 539
                                                                                                                       // 540
  return ReactPropTypes;                                                                                               // 541
};                                                                                                                     // 542
                                                                                                                       // 543
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"factoryWithThrowingShims.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/prop-types/factoryWithThrowingShims.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 2
 *                                                                                                                     // 3
 * This source code is licensed under the MIT license found in the                                                     // 4
 * LICENSE file in the root directory of this source tree.                                                             // 5
 */                                                                                                                    // 6
                                                                                                                       // 7
'use strict';                                                                                                          // 8
                                                                                                                       // 9
var emptyFunction = require('fbjs/lib/emptyFunction');                                                                 // 10
var invariant = require('fbjs/lib/invariant');                                                                         // 11
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');                                                      // 12
                                                                                                                       // 13
module.exports = function() {                                                                                          // 14
  function shim(props, propName, componentName, location, propFullName, secret) {                                      // 15
    if (secret === ReactPropTypesSecret) {                                                                             // 16
      // It is still safe when called from React.                                                                      // 17
      return;                                                                                                          // 18
    }                                                                                                                  // 19
    invariant(                                                                                                         // 20
      false,                                                                                                           // 21
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +                         // 22
      'Use PropTypes.checkPropTypes() to call them. ' +                                                                // 23
      'Read more at http://fb.me/use-check-prop-types'                                                                 // 24
    );                                                                                                                 // 25
  };                                                                                                                   // 26
  shim.isRequired = shim;                                                                                              // 27
  function getShim() {                                                                                                 // 28
    return shim;                                                                                                       // 29
  };                                                                                                                   // 30
  // Important!                                                                                                        // 31
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.                                 // 32
  var ReactPropTypes = {                                                                                               // 33
    array: shim,                                                                                                       // 34
    bool: shim,                                                                                                        // 35
    func: shim,                                                                                                        // 36
    number: shim,                                                                                                      // 37
    object: shim,                                                                                                      // 38
    string: shim,                                                                                                      // 39
    symbol: shim,                                                                                                      // 40
                                                                                                                       // 41
    any: shim,                                                                                                         // 42
    arrayOf: getShim,                                                                                                  // 43
    element: shim,                                                                                                     // 44
    instanceOf: getShim,                                                                                               // 45
    node: shim,                                                                                                        // 46
    objectOf: getShim,                                                                                                 // 47
    oneOf: getShim,                                                                                                    // 48
    oneOfType: getShim,                                                                                                // 49
    shape: getShim,                                                                                                    // 50
    exact: getShim                                                                                                     // 51
  };                                                                                                                   // 52
                                                                                                                       // 53
  ReactPropTypes.checkPropTypes = emptyFunction;                                                                       // 54
  ReactPropTypes.PropTypes = ReactPropTypes;                                                                           // 55
                                                                                                                       // 56
  return ReactPropTypes;                                                                                               // 57
};                                                                                                                     // 58
                                                                                                                       // 59
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"react-dom":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/package.json                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "react-dom";                                                                                            // 1
exports.version = "16.2.0";                                                                                            // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/index.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
function checkDCE() {                                                                                                  // 3
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */                                                                          // 4
  if (                                                                                                                 // 5
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||                                                           // 6
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'                                                      // 7
  ) {                                                                                                                  // 8
    return;                                                                                                            // 9
  }                                                                                                                    // 10
  if (process.env.NODE_ENV !== 'production') {                                                                         // 11
    // This branch is unreachable because this function is only called                                                 // 12
    // in production, but the condition is true only in development.                                                   // 13
    // Therefore if the branch is still here, dead code elimination wasn't                                             // 14
    // properly applied.                                                                                               // 15
    // Don't change the message. React DevTools relies on it. Also make sure                                           // 16
    // this message doesn't occur elsewhere in this function, or it will cause                                         // 17
    // a false positive.                                                                                               // 18
    throw new Error('^_^');                                                                                            // 19
  }                                                                                                                    // 20
  try {                                                                                                                // 21
    // Verify that the code above has been dead code eliminated (DCE'd).                                               // 22
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);                                                                 // 23
  } catch (err) {                                                                                                      // 24
    // DevTools shouldn't crash React, no matter what.                                                                 // 25
    // We should still report in case we break this code.                                                              // 26
    console.error(err);                                                                                                // 27
  }                                                                                                                    // 28
}                                                                                                                      // 29
                                                                                                                       // 30
if (process.env.NODE_ENV === 'production') {                                                                           // 31
  // DCE check should happen before ReactDOM bundle executes so that                                                   // 32
  // DevTools can report bad minification during injection.                                                            // 33
  checkDCE();                                                                                                          // 34
  module.exports = require('./cjs/react-dom.production.min.js');                                                       // 35
} else {                                                                                                               // 36
  module.exports = require('./cjs/react-dom.development.js');                                                          // 37
}                                                                                                                      // 38
                                                                                                                       // 39
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cjs":{"react-dom.production.min.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/cjs/react-dom.production.min.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/** @license React v16.2.0                                                                                             // 1
 * react-dom.production.min.js                                                                                         // 2
 *                                                                                                                     // 3
 * Copyright (c) 2013-present, Facebook, Inc.                                                                          // 4
 *                                                                                                                     // 5
 * This source code is licensed under the MIT license found in the                                                     // 6
 * LICENSE file in the root directory of this source tree.                                                             // 7
 */                                                                                                                    // 8
                                                                                                                       // 9
/*                                                                                                                     // 10
 Modernizr 3.0.0pre (Custom Build) | MIT                                                                               // 11
*/                                                                                                                     // 12
'use strict';var aa=require("react"),l=require("fbjs/lib/ExecutionEnvironment"),B=require("object-assign"),C=require("fbjs/lib/emptyFunction"),ba=require("fbjs/lib/EventListener"),da=require("fbjs/lib/getActiveElement"),ea=require("fbjs/lib/shallowEqual"),fa=require("fbjs/lib/containsNode"),ia=require("fbjs/lib/focusNode"),D=require("fbjs/lib/emptyObject");
function E(a){for(var b=arguments.length-1,c="Minified React error #"+a+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\x3d"+a,d=0;d<b;d++)c+="\x26args[]\x3d"+encodeURIComponent(arguments[d+1]);b=Error(c+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.");b.name="Invariant Violation";b.framesToPop=1;throw b;}aa?void 0:E("227");
var oa={children:!0,dangerouslySetInnerHTML:!0,defaultValue:!0,defaultChecked:!0,innerHTML:!0,suppressContentEditableWarning:!0,suppressHydrationWarning:!0,style:!0};function pa(a,b){return(a&b)===b}
var ta={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,HAS_STRING_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(a){var b=ta,c=a.Properties||{},d=a.DOMAttributeNamespaces||{},e=a.DOMAttributeNames||{};a=a.DOMMutationMethods||{};for(var f in c){ua.hasOwnProperty(f)?E("48",f):void 0;var g=f.toLowerCase(),h=c[f];g={attributeName:g,attributeNamespace:null,propertyName:f,mutationMethod:null,mustUseProperty:pa(h,b.MUST_USE_PROPERTY),
hasBooleanValue:pa(h,b.HAS_BOOLEAN_VALUE),hasNumericValue:pa(h,b.HAS_NUMERIC_VALUE),hasPositiveNumericValue:pa(h,b.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:pa(h,b.HAS_OVERLOADED_BOOLEAN_VALUE),hasStringBooleanValue:pa(h,b.HAS_STRING_BOOLEAN_VALUE)};1>=g.hasBooleanValue+g.hasNumericValue+g.hasOverloadedBooleanValue?void 0:E("50",f);e.hasOwnProperty(f)&&(g.attributeName=e[f]);d.hasOwnProperty(f)&&(g.attributeNamespace=d[f]);a.hasOwnProperty(f)&&(g.mutationMethod=a[f]);ua[f]=g}}},ua={};
function va(a,b){if(oa.hasOwnProperty(a)||2<a.length&&("o"===a[0]||"O"===a[0])&&("n"===a[1]||"N"===a[1]))return!1;if(null===b)return!0;switch(typeof b){case "boolean":return oa.hasOwnProperty(a)?a=!0:(b=wa(a))?a=b.hasBooleanValue||b.hasStringBooleanValue||b.hasOverloadedBooleanValue:(a=a.toLowerCase().slice(0,5),a="data-"===a||"aria-"===a),a;case "undefined":case "number":case "string":case "object":return!0;default:return!1}}function wa(a){return ua.hasOwnProperty(a)?ua[a]:null}
var xa=ta,ya=xa.MUST_USE_PROPERTY,K=xa.HAS_BOOLEAN_VALUE,za=xa.HAS_NUMERIC_VALUE,Aa=xa.HAS_POSITIVE_NUMERIC_VALUE,Ba=xa.HAS_OVERLOADED_BOOLEAN_VALUE,Ca=xa.HAS_STRING_BOOLEAN_VALUE,Da={Properties:{allowFullScreen:K,async:K,autoFocus:K,autoPlay:K,capture:Ba,checked:ya|K,cols:Aa,contentEditable:Ca,controls:K,"default":K,defer:K,disabled:K,download:Ba,draggable:Ca,formNoValidate:K,hidden:K,loop:K,multiple:ya|K,muted:ya|K,noValidate:K,open:K,playsInline:K,readOnly:K,required:K,reversed:K,rows:Aa,rowSpan:za,
scoped:K,seamless:K,selected:ya|K,size:Aa,start:za,span:Aa,spellCheck:Ca,style:0,tabIndex:0,itemScope:K,acceptCharset:0,className:0,htmlFor:0,httpEquiv:0,value:Ca},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMMutationMethods:{value:function(a,b){if(null==b)return a.removeAttribute("value");"number"!==a.type||!1===a.hasAttribute("value")?a.setAttribute("value",""+b):a.validity&&!a.validity.badInput&&a.ownerDocument.activeElement!==a&&
a.setAttribute("value",""+b)}}},Ea=xa.HAS_STRING_BOOLEAN_VALUE,M={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"},Ga={Properties:{autoReverse:Ea,externalResourcesRequired:Ea,preserveAlpha:Ea},DOMAttributeNames:{autoReverse:"autoReverse",externalResourcesRequired:"externalResourcesRequired",preserveAlpha:"preserveAlpha"},DOMAttributeNamespaces:{xlinkActuate:M.xlink,xlinkArcrole:M.xlink,xlinkHref:M.xlink,xlinkRole:M.xlink,xlinkShow:M.xlink,xlinkTitle:M.xlink,xlinkType:M.xlink,
xmlBase:M.xml,xmlLang:M.xml,xmlSpace:M.xml}},Ha=/[\-\:]([a-z])/g;function Ia(a){return a[1].toUpperCase()}             // 22
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space".split(" ").forEach(function(a){var b=a.replace(Ha,
Ia);Ga.Properties[b]=0;Ga.DOMAttributeNames[b]=a});xa.injectDOMPropertyConfig(Da);xa.injectDOMPropertyConfig(Ga);      // 24
var P={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,injection:{injectErrorUtils:function(a){"function"!==typeof a.invokeGuardedCallback?E("197"):void 0;Ja=a.invokeGuardedCallback}},invokeGuardedCallback:function(a,b,c,d,e,f,g,h,k){Ja.apply(P,arguments)},invokeGuardedCallbackAndCatchFirstError:function(a,b,c,d,e,f,g,h,k){P.invokeGuardedCallback.apply(this,arguments);if(P.hasCaughtError()){var q=P.clearCaughtError();P._hasRethrowError||(P._hasRethrowError=!0,P._rethrowError=
q)}},rethrowCaughtError:function(){return Ka.apply(P,arguments)},hasCaughtError:function(){return P._hasCaughtError},clearCaughtError:function(){if(P._hasCaughtError){var a=P._caughtError;P._caughtError=null;P._hasCaughtError=!1;return a}E("198")}};function Ja(a,b,c,d,e,f,g,h,k){P._hasCaughtError=!1;P._caughtError=null;var q=Array.prototype.slice.call(arguments,3);try{b.apply(c,q)}catch(v){P._caughtError=v,P._hasCaughtError=!0}}
function Ka(){if(P._hasRethrowError){var a=P._rethrowError;P._rethrowError=null;P._hasRethrowError=!1;throw a;}}var La=null,Ma={};
function Na(){if(La)for(var a in Ma){var b=Ma[a],c=La.indexOf(a);-1<c?void 0:E("96",a);if(!Oa[c]){b.extractEvents?void 0:E("97",a);Oa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;Pa.hasOwnProperty(h)?E("99",h):void 0;Pa[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&Qa(k[e],g,h);e=!0}else f.registrationName?(Qa(f.registrationName,g,h),e=!0):e=!1;e?void 0:E("98",d,a)}}}}
function Qa(a,b,c){Ra[a]?E("100",a):void 0;Ra[a]=b;Sa[a]=b.eventTypes[c].dependencies}var Oa=[],Pa={},Ra={},Sa={};function Ta(a){La?E("101"):void 0;La=Array.prototype.slice.call(a);Na()}function Ua(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];Ma.hasOwnProperty(c)&&Ma[c]===d||(Ma[c]?E("102",c):void 0,Ma[c]=d,b=!0)}b&&Na()}
var Va=Object.freeze({plugins:Oa,eventNameDispatchConfigs:Pa,registrationNameModules:Ra,registrationNameDependencies:Sa,possibleRegistrationNames:null,injectEventPluginOrder:Ta,injectEventPluginsByName:Ua}),Wa=null,Xa=null,Ya=null;function Za(a,b,c,d){b=a.type||"unknown-event";a.currentTarget=Ya(d);P.invokeGuardedCallbackAndCatchFirstError(b,c,void 0,a);a.currentTarget=null}
function $a(a,b){null==b?E("30"):void 0;if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function ab(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var bb=null;
function cb(a,b){if(a){var c=a._dispatchListeners,d=a._dispatchInstances;if(Array.isArray(c))for(var e=0;e<c.length&&!a.isPropagationStopped();e++)Za(a,b,c[e],d[e]);else c&&Za(a,b,c,d);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function db(a){return cb(a,!0)}function gb(a){return cb(a,!1)}var hb={injectEventPluginOrder:Ta,injectEventPluginsByName:Ua};
function ib(a,b){var c=a.stateNode;if(!c)return null;var d=Wa(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;c&&"function"!==typeof c?E("231",b,typeof c):void 0;
return c}function jb(a,b,c,d){for(var e,f=0;f<Oa.length;f++){var g=Oa[f];g&&(g=g.extractEvents(a,b,c,d))&&(e=$a(e,g))}return e}function kb(a){a&&(bb=$a(bb,a))}function lb(a){var b=bb;bb=null;b&&(a?ab(b,db):ab(b,gb),bb?E("95"):void 0,P.rethrowCaughtError())}var mb=Object.freeze({injection:hb,getListener:ib,extractEvents:jb,enqueueEvents:kb,processEventQueue:lb}),nb=Math.random().toString(36).slice(2),Q="__reactInternalInstance$"+nb,ob="__reactEventHandlers$"+nb;
function pb(a){if(a[Q])return a[Q];for(var b=[];!a[Q];)if(b.push(a),a.parentNode)a=a.parentNode;else return null;var c=void 0,d=a[Q];if(5===d.tag||6===d.tag)return d;for(;a&&(d=a[Q]);a=b.pop())c=d;return c}function qb(a){if(5===a.tag||6===a.tag)return a.stateNode;E("33")}function rb(a){return a[ob]||null}
var sb=Object.freeze({precacheFiberNode:function(a,b){b[Q]=a},getClosestInstanceFromNode:pb,getInstanceFromNode:function(a){a=a[Q];return!a||5!==a.tag&&6!==a.tag?null:a},getNodeFromInstance:qb,getFiberCurrentPropsFromNode:rb,updateFiberProps:function(a,b){a[ob]=b}});function tb(a){do a=a["return"];while(a&&5!==a.tag);return a?a:null}function ub(a,b,c){for(var d=[];a;)d.push(a),a=tb(a);for(a=d.length;0<a--;)b(d[a],"captured",c);for(a=0;a<d.length;a++)b(d[a],"bubbled",c)}
function vb(a,b,c){if(b=ib(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=$a(c._dispatchListeners,b),c._dispatchInstances=$a(c._dispatchInstances,a)}function wb(a){a&&a.dispatchConfig.phasedRegistrationNames&&ub(a._targetInst,vb,a)}function xb(a){if(a&&a.dispatchConfig.phasedRegistrationNames){var b=a._targetInst;b=b?tb(b):null;ub(b,vb,a)}}
function yb(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=ib(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=$a(c._dispatchListeners,b),c._dispatchInstances=$a(c._dispatchInstances,a))}function zb(a){a&&a.dispatchConfig.registrationName&&yb(a._targetInst,null,a)}function Ab(a){ab(a,wb)}
function Bb(a,b,c,d){if(c&&d)a:{var e=c;for(var f=d,g=0,h=e;h;h=tb(h))g++;h=0;for(var k=f;k;k=tb(k))h++;for(;0<g-h;)e=tb(e),g--;for(;0<h-g;)f=tb(f),h--;for(;g--;){if(e===f||e===f.alternate)break a;e=tb(e);f=tb(f)}e=null}else e=null;f=e;for(e=[];c&&c!==f;){g=c.alternate;if(null!==g&&g===f)break;e.push(c);c=tb(c)}for(c=[];d&&d!==f;){g=d.alternate;if(null!==g&&g===f)break;c.push(d);d=tb(d)}for(d=0;d<e.length;d++)yb(e[d],"bubbled",a);for(a=c.length;0<a--;)yb(c[a],"captured",b)}
var Cb=Object.freeze({accumulateTwoPhaseDispatches:Ab,accumulateTwoPhaseDispatchesSkipTarget:function(a){ab(a,xb)},accumulateEnterLeaveDispatches:Bb,accumulateDirectDispatches:function(a){ab(a,zb)}}),Db=null;function Eb(){!Db&&l.canUseDOM&&(Db="textContent"in document.documentElement?"textContent":"innerText");return Db}var S={_root:null,_startText:null,_fallbackText:null};
function Fb(){if(S._fallbackText)return S._fallbackText;var a,b=S._startText,c=b.length,d,e=Gb(),f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);S._fallbackText=e.slice(a,1<d?1-d:void 0);return S._fallbackText}function Gb(){return"value"in S._root?S._root.value:S._root[Eb()]}
var Hb="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),Ib={type:null,target:null,currentTarget:C.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
function T(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?C.thatReturnsTrue:C.thatReturnsFalse;this.isPropagationStopped=C.thatReturnsFalse;return this}
B(T.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=C.thatReturnsTrue)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=C.thatReturnsTrue)},persist:function(){this.isPersistent=C.thatReturnsTrue},isPersistent:C.thatReturnsFalse,
destructor:function(){var a=this.constructor.Interface,b;for(b in a)this[b]=null;for(a=0;a<Hb.length;a++)this[Hb[a]]=null}});T.Interface=Ib;T.augmentClass=function(a,b){function c(){}c.prototype=this.prototype;var d=new c;B(d,a.prototype);a.prototype=d;a.prototype.constructor=a;a.Interface=B({},this.Interface,b);a.augmentClass=this.augmentClass;Jb(a)};Jb(T);function Kb(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}
function Lb(a){a instanceof this?void 0:E("223");a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function Jb(a){a.eventPool=[];a.getPooled=Kb;a.release=Lb}function Mb(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(Mb,{data:null});function Nb(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(Nb,{data:null});var Pb=[9,13,27,32],Vb=l.canUseDOM&&"CompositionEvent"in window,Wb=null;l.canUseDOM&&"documentMode"in document&&(Wb=document.documentMode);var Xb;
if(Xb=l.canUseDOM&&"TextEvent"in window&&!Wb){var Yb=window.opera;Xb=!("object"===typeof Yb&&"function"===typeof Yb.version&&12>=parseInt(Yb.version(),10))}
var Zb=Xb,$b=l.canUseDOM&&(!Vb||Wb&&8<Wb&&11>=Wb),ac=String.fromCharCode(32),bc={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},cc=!1;
function dc(a,b){switch(a){case "topKeyUp":return-1!==Pb.indexOf(b.keyCode);case "topKeyDown":return 229!==b.keyCode;case "topKeyPress":case "topMouseDown":case "topBlur":return!0;default:return!1}}function ec(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var fc=!1;function gc(a,b){switch(a){case "topCompositionEnd":return ec(b);case "topKeyPress":if(32!==b.which)return null;cc=!0;return ac;case "topTextInput":return a=b.data,a===ac&&cc?null:a;default:return null}}
function hc(a,b){if(fc)return"topCompositionEnd"===a||!Vb&&dc(a,b)?(a=Fb(),S._root=null,S._startText=null,S._fallbackText=null,fc=!1,a):null;switch(a){case "topPaste":return null;case "topKeyPress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "topCompositionEnd":return $b?null:b.data;default:return null}}
var ic={eventTypes:bc,extractEvents:function(a,b,c,d){var e;if(Vb)b:{switch(a){case "topCompositionStart":var f=bc.compositionStart;break b;case "topCompositionEnd":f=bc.compositionEnd;break b;case "topCompositionUpdate":f=bc.compositionUpdate;break b}f=void 0}else fc?dc(a,c)&&(f=bc.compositionEnd):"topKeyDown"===a&&229===c.keyCode&&(f=bc.compositionStart);f?($b&&(fc||f!==bc.compositionStart?f===bc.compositionEnd&&fc&&(e=Fb()):(S._root=d,S._startText=Gb(),fc=!0)),f=Mb.getPooled(f,b,c,d),e?f.data=
e:(e=ec(c),null!==e&&(f.data=e)),Ab(f),e=f):e=null;(a=Zb?gc(a,c):hc(a,c))?(b=Nb.getPooled(bc.beforeInput,b,c,d),b.data=a,Ab(b)):b=null;return[e,b]}},jc=null,kc=null,lc=null;function mc(a){if(a=Xa(a)){jc&&"function"===typeof jc.restoreControlledState?void 0:E("194");var b=Wa(a.stateNode);jc.restoreControlledState(a.stateNode,a.type,b)}}var nc={injectFiberControlledHostComponent:function(a){jc=a}};function oc(a){kc?lc?lc.push(a):lc=[a]:kc=a}
function pc(){if(kc){var a=kc,b=lc;lc=kc=null;mc(a);if(b)for(a=0;a<b.length;a++)mc(b[a])}}var qc=Object.freeze({injection:nc,enqueueStateRestore:oc,restoreStateIfNeeded:pc});function rc(a,b){return a(b)}var sc=!1;function tc(a,b){if(sc)return rc(a,b);sc=!0;try{return rc(a,b)}finally{sc=!1,pc()}}var uc={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};
function vc(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!uc[a.type]:"textarea"===b?!0:!1}function wc(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var xc;l.canUseDOM&&(xc=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("",""));
function yc(a,b){if(!l.canUseDOM||b&&!("addEventListener"in document))return!1;b="on"+a;var c=b in document;c||(c=document.createElement("div"),c.setAttribute(b,"return;"),c="function"===typeof c[b]);!c&&xc&&"wheel"===a&&(c=document.implementation.hasFeature("Events.wheel","3.0"));return c}function zc(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
function Ac(a){var b=zc(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"function"===typeof c.get&&"function"===typeof c.set)return Object.defineProperty(a,b,{enumerable:c.enumerable,configurable:!0,get:function(){return c.get.call(this)},set:function(a){d=""+a;c.set.call(this,a)}}),{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=null;delete a[b]}}}
function Bc(a){a._valueTracker||(a._valueTracker=Ac(a))}function Cc(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=zc(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}var Dc={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};
function Ec(a,b,c){a=T.getPooled(Dc.change,a,b,c);a.type="change";oc(c);Ab(a);return a}var Fc=null,Gc=null;function Hc(a){kb(a);lb(!1)}function Ic(a){var b=qb(a);if(Cc(b))return a}function Jc(a,b){if("topChange"===a)return b}var Kc=!1;l.canUseDOM&&(Kc=yc("input")&&(!document.documentMode||9<document.documentMode));function Lc(){Fc&&(Fc.detachEvent("onpropertychange",Mc),Gc=Fc=null)}function Mc(a){"value"===a.propertyName&&Ic(Gc)&&(a=Ec(Gc,a,wc(a)),tc(Hc,a))}
function Nc(a,b,c){"topFocus"===a?(Lc(),Fc=b,Gc=c,Fc.attachEvent("onpropertychange",Mc)):"topBlur"===a&&Lc()}function Oc(a){if("topSelectionChange"===a||"topKeyUp"===a||"topKeyDown"===a)return Ic(Gc)}function Pc(a,b){if("topClick"===a)return Ic(b)}function $c(a,b){if("topInput"===a||"topChange"===a)return Ic(b)}
var ad={eventTypes:Dc,_isInputEventSupported:Kc,extractEvents:function(a,b,c,d){var e=b?qb(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if("select"===f||"input"===f&&"file"===e.type)var g=Jc;else if(vc(e))if(Kc)g=$c;else{g=Oc;var h=Nc}else f=e.nodeName,!f||"input"!==f.toLowerCase()||"checkbox"!==e.type&&"radio"!==e.type||(g=Pc);if(g&&(g=g(a,b)))return Ec(g,c,d);h&&h(a,e,b);"topBlur"===a&&null!=b&&(a=b._wrapperState||e._wrapperState)&&a.controlled&&"number"===e.type&&(a=""+e.value,e.getAttribute("value")!==
a&&e.setAttribute("value",a))}};function bd(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(bd,{view:null,detail:null});var cd={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function dd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=cd[a])?!!b[a]:!1}function ed(){return dd}function fd(a,b,c,d){return T.call(this,a,b,c,d)}
bd.augmentClass(fd,{screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:ed,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)}});
var gd={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},hd={eventTypes:gd,extractEvents:function(a,b,c,d){if("topMouseOver"===a&&(c.relatedTarget||c.fromElement)||"topMouseOut"!==a&&"topMouseOver"!==a)return null;var e=d.window===d?d:(e=d.ownerDocument)?e.defaultView||e.parentWindow:window;"topMouseOut"===a?(a=b,b=(b=c.relatedTarget||c.toElement)?pb(b):null):a=null;if(a===
b)return null;var f=null==a?e:qb(a);e=null==b?e:qb(b);var g=fd.getPooled(gd.mouseLeave,a,c,d);g.type="mouseleave";g.target=f;g.relatedTarget=e;c=fd.getPooled(gd.mouseEnter,b,c,d);c.type="mouseenter";c.target=e;c.relatedTarget=f;Bb(g,c,a,b);return[g,c]}},id=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;function jd(a){a=a.type;return"string"===typeof a?a:"function"===typeof a?a.displayName||a.name:null}
function kd(a){var b=a;if(a.alternate)for(;b["return"];)b=b["return"];else{if(0!==(b.effectTag&2))return 1;for(;b["return"];)if(b=b["return"],0!==(b.effectTag&2))return 1}return 3===b.tag?2:3}function ld(a){return(a=a._reactInternalFiber)?2===kd(a):!1}function md(a){2!==kd(a)?E("188"):void 0}
function nd(a){var b=a.alternate;if(!b)return b=kd(a),3===b?E("188"):void 0,1===b?null:a;for(var c=a,d=b;;){var e=c["return"],f=e?e.alternate:null;if(!e||!f)break;if(e.child===f.child){for(var g=e.child;g;){if(g===c)return md(e),a;if(g===d)return md(e),b;g=g.sibling}E("188")}if(c["return"]!==d["return"])c=e,d=f;else{g=!1;for(var h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}g?
void 0:E("189")}}c.alternate!==d?E("190"):void 0}3!==c.tag?E("188"):void 0;return c.stateNode.current===c?a:b}function od(a){a=nd(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child["return"]=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b["return"]||b["return"]===a)return null;b=b["return"]}b.sibling["return"]=b["return"];b=b.sibling}}return null}
function pd(a){a=nd(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child&&4!==b.tag)b.child["return"]=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b["return"]||b["return"]===a)return null;b=b["return"]}b.sibling["return"]=b["return"];b=b.sibling}}return null}var qd=[];
function rd(a){var b=a.targetInst;do{if(!b){a.ancestors.push(b);break}var c;for(c=b;c["return"];)c=c["return"];c=3!==c.tag?null:c.stateNode.containerInfo;if(!c)break;a.ancestors.push(b);b=pb(c)}while(b);for(c=0;c<a.ancestors.length;c++)b=a.ancestors[c],sd(a.topLevelType,b,a.nativeEvent,wc(a.nativeEvent))}var td=!0,sd=void 0;function ud(a){td=!!a}function U(a,b,c){return c?ba.listen(c,b,vd.bind(null,a)):null}function wd(a,b,c){return c?ba.capture(c,b,vd.bind(null,a)):null}
function vd(a,b){if(td){var c=wc(b);c=pb(c);null===c||"number"!==typeof c.tag||2===kd(c)||(c=null);if(qd.length){var d=qd.pop();d.topLevelType=a;d.nativeEvent=b;d.targetInst=c;a=d}else a={topLevelType:a,nativeEvent:b,targetInst:c,ancestors:[]};try{tc(rd,a)}finally{a.topLevelType=null,a.nativeEvent=null,a.targetInst=null,a.ancestors.length=0,10>qd.length&&qd.push(a)}}}
var xd=Object.freeze({get _enabled(){return td},get _handleTopLevel(){return sd},setHandleTopLevel:function(a){sd=a},setEnabled:ud,isEnabled:function(){return td},trapBubbledEvent:U,trapCapturedEvent:wd,dispatchEvent:vd});function yd(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;c["ms"+a]="MS"+b;c["O"+a]="o"+b.toLowerCase();return c}
var zd={animationend:yd("Animation","AnimationEnd"),animationiteration:yd("Animation","AnimationIteration"),animationstart:yd("Animation","AnimationStart"),transitionend:yd("Transition","TransitionEnd")},Ad={},Bd={};l.canUseDOM&&(Bd=document.createElement("div").style,"AnimationEvent"in window||(delete zd.animationend.animation,delete zd.animationiteration.animation,delete zd.animationstart.animation),"TransitionEvent"in window||delete zd.transitionend.transition);
function Cd(a){if(Ad[a])return Ad[a];if(!zd[a])return a;var b=zd[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Bd)return Ad[a]=b[c];return""}
var Dd={topAbort:"abort",topAnimationEnd:Cd("animationend")||"animationend",topAnimationIteration:Cd("animationiteration")||"animationiteration",topAnimationStart:Cd("animationstart")||"animationstart",topBlur:"blur",topCancel:"cancel",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",
topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoad:"load",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",
topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",
topTouchStart:"touchstart",topTransitionEnd:Cd("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},Ed={},Fd=0,Gd="_reactListenersID"+(""+Math.random()).slice(2);function Hd(a){Object.prototype.hasOwnProperty.call(a,Gd)||(a[Gd]=Fd++,Ed[a[Gd]]={});return Ed[a[Gd]]}function Id(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
function Jd(a,b){var c=Id(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Id(c)}}function Kd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&"text"===a.type||"textarea"===b||"true"===a.contentEditable)}
var Ld=l.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Md={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Nd=null,Od=null,Pd=null,Qd=!1;
function Rd(a,b){if(Qd||null==Nd||Nd!==da())return null;var c=Nd;"selectionStart"in c&&Kd(c)?c={start:c.selectionStart,end:c.selectionEnd}:window.getSelection?(c=window.getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset}):c=void 0;return Pd&&ea(Pd,c)?null:(Pd=c,a=T.getPooled(Md.select,Od,a,b),a.type="select",a.target=Nd,Ab(a),a)}
var Sd={eventTypes:Md,extractEvents:function(a,b,c,d){var e=d.window===d?d.document:9===d.nodeType?d:d.ownerDocument,f;if(!(f=!e)){a:{e=Hd(e);f=Sa.onSelect;for(var g=0;g<f.length;g++){var h=f[g];if(!e.hasOwnProperty(h)||!e[h]){e=!1;break a}}e=!0}f=!e}if(f)return null;e=b?qb(b):window;switch(a){case "topFocus":if(vc(e)||"true"===e.contentEditable)Nd=e,Od=b,Pd=null;break;case "topBlur":Pd=Od=Nd=null;break;case "topMouseDown":Qd=!0;break;case "topContextMenu":case "topMouseUp":return Qd=!1,Rd(c,d);case "topSelectionChange":if(Ld)break;
case "topKeyDown":case "topKeyUp":return Rd(c,d)}return null}};function Td(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(Td,{animationName:null,elapsedTime:null,pseudoElement:null});function Ud(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(Ud,{clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}});function Vd(a,b,c,d){return T.call(this,a,b,c,d)}bd.augmentClass(Vd,{relatedTarget:null});
function Wd(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;return 32<=a||13===a?a:0}       // 84
var Xd={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Yd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};function Zd(a,b,c,d){return T.call(this,a,b,c,d)}
bd.augmentClass(Zd,{key:function(a){if(a.key){var b=Xd[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=Wd(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Yd[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:ed,charCode:function(a){return"keypress"===a.type?Wd(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===
a.type?Wd(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}});function $d(a,b,c,d){return T.call(this,a,b,c,d)}fd.augmentClass($d,{dataTransfer:null});function ae(a,b,c,d){return T.call(this,a,b,c,d)}bd.augmentClass(ae,{touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:ed});function be(a,b,c,d){return T.call(this,a,b,c,d)}T.augmentClass(be,{propertyName:null,elapsedTime:null,pseudoElement:null});
function ce(a,b,c,d){return T.call(this,a,b,c,d)}fd.augmentClass(ce,{deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null});var de={},ee={};
"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel".split(" ").forEach(function(a){var b=a[0].toUpperCase()+
a.slice(1),c="on"+b;b="top"+b;c={phasedRegistrationNames:{bubbled:c,captured:c+"Capture"},dependencies:[b]};de[a]=c;ee[b]=c});
var fe={eventTypes:de,extractEvents:function(a,b,c,d){var e=ee[a];if(!e)return null;switch(a){case "topKeyPress":if(0===Wd(c))return null;case "topKeyDown":case "topKeyUp":a=Zd;break;case "topBlur":case "topFocus":a=Vd;break;case "topClick":if(2===c.button)return null;case "topDoubleClick":case "topMouseDown":case "topMouseMove":case "topMouseUp":case "topMouseOut":case "topMouseOver":case "topContextMenu":a=fd;break;case "topDrag":case "topDragEnd":case "topDragEnter":case "topDragExit":case "topDragLeave":case "topDragOver":case "topDragStart":case "topDrop":a=
$d;break;case "topTouchCancel":case "topTouchEnd":case "topTouchMove":case "topTouchStart":a=ae;break;case "topAnimationEnd":case "topAnimationIteration":case "topAnimationStart":a=Td;break;case "topTransitionEnd":a=be;break;case "topScroll":a=bd;break;case "topWheel":a=ce;break;case "topCopy":case "topCut":case "topPaste":a=Ud;break;default:a=T}b=a.getPooled(e,b,c,d);Ab(b);return b}};sd=function(a,b,c,d){a=jb(a,b,c,d);kb(a);lb(!1)};hb.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));
Wa=sb.getFiberCurrentPropsFromNode;Xa=sb.getInstanceFromNode;Ya=sb.getNodeFromInstance;hb.injectEventPluginsByName({SimpleEventPlugin:fe,EnterLeaveEventPlugin:hd,ChangeEventPlugin:ad,SelectEventPlugin:Sd,BeforeInputEventPlugin:ic});var ge=[],he=-1;function V(a){0>he||(a.current=ge[he],ge[he]=null,he--)}function W(a,b){he++;ge[he]=a.current;a.current=b}new Set;var ie={current:D},X={current:!1},je=D;function ke(a){return le(a)?je:ie.current}
function me(a,b){var c=a.type.contextTypes;if(!c)return D;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function le(a){return 2===a.tag&&null!=a.type.childContextTypes}function ne(a){le(a)&&(V(X,a),V(ie,a))}
function oe(a,b,c){null!=ie.cursor?E("168"):void 0;W(ie,b,a);W(X,c,a)}function pe(a,b){var c=a.stateNode,d=a.type.childContextTypes;if("function"!==typeof c.getChildContext)return b;c=c.getChildContext();for(var e in c)e in d?void 0:E("108",jd(a)||"Unknown",e);return B({},b,c)}function qe(a){if(!le(a))return!1;var b=a.stateNode;b=b&&b.__reactInternalMemoizedMergedChildContext||D;je=ie.current;W(ie,b,a);W(X,X.current,a);return!0}
function re(a,b){var c=a.stateNode;c?void 0:E("169");if(b){var d=pe(a,je);c.__reactInternalMemoizedMergedChildContext=d;V(X,a);V(ie,a);W(ie,d,a)}else V(X,a);W(X,b,a)}
function Y(a,b,c){this.tag=a;this.key=b;this.stateNode=this.type=null;this.sibling=this.child=this["return"]=null;this.index=0;this.memoizedState=this.updateQueue=this.memoizedProps=this.pendingProps=this.ref=null;this.internalContextTag=c;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.expirationTime=0;this.alternate=null}
function se(a,b,c){var d=a.alternate;null===d?(d=new Y(a.tag,a.key,a.internalContextTag),d.type=a.type,d.stateNode=a.stateNode,d.alternate=a,a.alternate=d):(d.effectTag=0,d.nextEffect=null,d.firstEffect=null,d.lastEffect=null);d.expirationTime=c;d.pendingProps=b;d.child=a.child;d.memoizedProps=a.memoizedProps;d.memoizedState=a.memoizedState;d.updateQueue=a.updateQueue;d.sibling=a.sibling;d.index=a.index;d.ref=a.ref;return d}
function te(a,b,c){var d=void 0,e=a.type,f=a.key;"function"===typeof e?(d=e.prototype&&e.prototype.isReactComponent?new Y(2,f,b):new Y(0,f,b),d.type=e,d.pendingProps=a.props):"string"===typeof e?(d=new Y(5,f,b),d.type=e,d.pendingProps=a.props):"object"===typeof e&&null!==e&&"number"===typeof e.tag?(d=e,d.pendingProps=a.props):E("130",null==e?e:typeof e,"");d.expirationTime=c;return d}function ue(a,b,c,d){b=new Y(10,d,b);b.pendingProps=a;b.expirationTime=c;return b}
function ve(a,b,c){b=new Y(6,null,b);b.pendingProps=a;b.expirationTime=c;return b}function we(a,b,c){b=new Y(7,a.key,b);b.type=a.handler;b.pendingProps=a;b.expirationTime=c;return b}function xe(a,b,c){a=new Y(9,null,b);a.expirationTime=c;return a}function ye(a,b,c){b=new Y(4,a.key,b);b.pendingProps=a.children||[];b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}var ze=null,Ae=null;
function Be(a){return function(b){try{return a(b)}catch(c){}}}function Ce(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);ze=Be(function(a){return b.onCommitFiberRoot(c,a)});Ae=Be(function(a){return b.onCommitFiberUnmount(c,a)})}catch(d){}return!0}function De(a){"function"===typeof ze&&ze(a)}function Ee(a){"function"===typeof Ae&&Ae(a)}
function Fe(a){return{baseState:a,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1}}function Ge(a,b){null===a.last?a.first=a.last=b:(a.last.next=b,a.last=b);if(0===a.expirationTime||a.expirationTime>b.expirationTime)a.expirationTime=b.expirationTime}
function He(a,b){var c=a.alternate,d=a.updateQueue;null===d&&(d=a.updateQueue=Fe(null));null!==c?(a=c.updateQueue,null===a&&(a=c.updateQueue=Fe(null))):a=null;a=a!==d?a:null;null===a?Ge(d,b):null===d.last||null===a.last?(Ge(d,b),Ge(a,b)):(Ge(d,b),a.last=b)}function Ie(a,b,c,d){a=a.partialState;return"function"===typeof a?a.call(b,c,d):a}
function Je(a,b,c,d,e,f){null!==a&&a.updateQueue===c&&(c=b.updateQueue={baseState:c.baseState,expirationTime:c.expirationTime,first:c.first,last:c.last,isInitialized:c.isInitialized,callbackList:null,hasForceUpdate:!1});c.expirationTime=0;c.isInitialized?a=c.baseState:(a=c.baseState=b.memoizedState,c.isInitialized=!0);for(var g=!0,h=c.first,k=!1;null!==h;){var q=h.expirationTime;if(q>f){var v=c.expirationTime;if(0===v||v>q)c.expirationTime=q;k||(k=!0,c.baseState=a)}else{k||(c.first=h.next,null===
c.first&&(c.last=null));if(h.isReplace)a=Ie(h,d,a,e),g=!0;else if(q=Ie(h,d,a,e))a=g?B({},a,q):B(a,q),g=!1;h.isForced&&(c.hasForceUpdate=!0);null!==h.callback&&(q=c.callbackList,null===q&&(q=c.callbackList=[]),q.push(h))}h=h.next}null!==c.callbackList?b.effectTag|=32:null!==c.first||c.hasForceUpdate||(b.updateQueue=null);k||(c.baseState=a);return a}
function Ke(a,b){var c=a.callbackList;if(null!==c)for(a.callbackList=null,a=0;a<c.length;a++){var d=c[a],e=d.callback;d.callback=null;"function"!==typeof e?E("191",e):void 0;e.call(b)}}
function Le(a,b,c,d){function e(a,b){b.updater=f;a.stateNode=b;b._reactInternalFiber=a}var f={isMounted:ld,enqueueSetState:function(c,d,e){c=c._reactInternalFiber;e=void 0===e?null:e;var g=b(c);He(c,{expirationTime:g,partialState:d,callback:e,isReplace:!1,isForced:!1,nextCallback:null,next:null});a(c,g)},enqueueReplaceState:function(c,d,e){c=c._reactInternalFiber;e=void 0===e?null:e;var g=b(c);He(c,{expirationTime:g,partialState:d,callback:e,isReplace:!0,isForced:!1,nextCallback:null,next:null});
a(c,g)},enqueueForceUpdate:function(c,d){c=c._reactInternalFiber;d=void 0===d?null:d;var e=b(c);He(c,{expirationTime:e,partialState:null,callback:d,isReplace:!1,isForced:!0,nextCallback:null,next:null});a(c,e)}};return{adoptClassInstance:e,constructClassInstance:function(a,b){var c=a.type,d=ke(a),f=2===a.tag&&null!=a.type.contextTypes,g=f?me(a,d):D;b=new c(b,g);e(a,b);f&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=d,a.__reactInternalMemoizedMaskedChildContext=g);return b},mountClassInstance:function(a,
b){var c=a.alternate,d=a.stateNode,e=d.state||null,g=a.pendingProps;g?void 0:E("158");var h=ke(a);d.props=g;d.state=a.memoizedState=e;d.refs=D;d.context=me(a,h);null!=a.type&&null!=a.type.prototype&&!0===a.type.prototype.unstable_isAsyncReactComponent&&(a.internalContextTag|=1);"function"===typeof d.componentWillMount&&(e=d.state,d.componentWillMount(),e!==d.state&&f.enqueueReplaceState(d,d.state,null),e=a.updateQueue,null!==e&&(d.state=Je(c,a,e,d,g,b)));"function"===typeof d.componentDidMount&&(a.effectTag|=
4)},updateClassInstance:function(a,b,e){var g=b.stateNode;g.props=b.memoizedProps;g.state=b.memoizedState;var h=b.memoizedProps,k=b.pendingProps;k||(k=h,null==k?E("159"):void 0);var u=g.context,z=ke(b);z=me(b,z);"function"!==typeof g.componentWillReceiveProps||h===k&&u===z||(u=g.state,g.componentWillReceiveProps(k,z),g.state!==u&&f.enqueueReplaceState(g,g.state,null));u=b.memoizedState;e=null!==b.updateQueue?Je(a,b,b.updateQueue,g,k,e):u;if(!(h!==k||u!==e||X.current||null!==b.updateQueue&&b.updateQueue.hasForceUpdate))return"function"!==
typeof g.componentDidUpdate||h===a.memoizedProps&&u===a.memoizedState||(b.effectTag|=4),!1;var G=k;if(null===h||null!==b.updateQueue&&b.updateQueue.hasForceUpdate)G=!0;else{var I=b.stateNode,L=b.type;G="function"===typeof I.shouldComponentUpdate?I.shouldComponentUpdate(G,e,z):L.prototype&&L.prototype.isPureReactComponent?!ea(h,G)||!ea(u,e):!0}G?("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(k,e,z),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4)):("function"!==typeof g.componentDidUpdate||
h===a.memoizedProps&&u===a.memoizedState||(b.effectTag|=4),c(b,k),d(b,e));g.props=k;g.state=e;g.context=z;return G}}}var Qe="function"===typeof Symbol&&Symbol["for"],Re=Qe?Symbol["for"]("react.element"):60103,Se=Qe?Symbol["for"]("react.call"):60104,Te=Qe?Symbol["for"]("react.return"):60105,Ue=Qe?Symbol["for"]("react.portal"):60106,Ve=Qe?Symbol["for"]("react.fragment"):60107,We="function"===typeof Symbol&&Symbol.iterator;
function Xe(a){if(null===a||"undefined"===typeof a)return null;a=We&&a[We]||a["@@iterator"];return"function"===typeof a?a:null}var Ye=Array.isArray;
function Ze(a,b){var c=b.ref;if(null!==c&&"function"!==typeof c){if(b._owner){b=b._owner;var d=void 0;b&&(2!==b.tag?E("110"):void 0,d=b.stateNode);d?void 0:E("147",c);var e=""+c;if(null!==a&&null!==a.ref&&a.ref._stringRef===e)return a.ref;a=function(a){var b=d.refs===D?d.refs={}:d.refs;null===a?delete b[e]:b[e]=a};a._stringRef=e;return a}"string"!==typeof c?E("148"):void 0;b._owner?void 0:E("149",c)}return c}
function $e(a,b){"textarea"!==a.type&&E("31","[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,"")}
function af(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b,c){a=se(a,b,c);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=ve(c,a.internalContextTag,d),b["return"]=a,b;b=e(b,c,d);b["return"]=a;return b}function k(a,b,c,d){if(null!==b&&b.type===c.type)return d=e(b,c.props,d),d.ref=Ze(b,c),d["return"]=a,d;d=te(c,a.internalContextTag,d);d.ref=Ze(b,c);d["return"]=a;return d}function q(a,b,c,d){if(null===b||7!==b.tag)return b=we(c,a.internalContextTag,d),b["return"]=a,b;b=e(b,c,d);
b["return"]=a;return b}function v(a,b,c,d){if(null===b||9!==b.tag)return b=xe(c,a.internalContextTag,d),b.type=c.value,b["return"]=a,b;b=e(b,null,d);b.type=c.value;b["return"]=a;return b}function y(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=ye(c,a.internalContextTag,d),b["return"]=a,b;b=e(b,c.children||[],d);b["return"]=a;return b}function u(a,b,c,d,f){if(null===b||10!==b.tag)return b=ue(c,a.internalContextTag,
d,f),b["return"]=a,b;b=e(b,c,d);b["return"]=a;return b}function z(a,b,c){if("string"===typeof b||"number"===typeof b)return b=ve(""+b,a.internalContextTag,c),b["return"]=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Re:if(b.type===Ve)return b=ue(b.props.children,a.internalContextTag,c,b.key),b["return"]=a,b;c=te(b,a.internalContextTag,c);c.ref=Ze(null,b);c["return"]=a;return c;case Se:return b=we(b,a.internalContextTag,c),b["return"]=a,b;case Te:return c=xe(b,a.internalContextTag,
c),c.type=b.value,c["return"]=a,c;case Ue:return b=ye(b,a.internalContextTag,c),b["return"]=a,b}if(Ye(b)||Xe(b))return b=ue(b,a.internalContextTag,c,null),b["return"]=a,b;$e(a,b)}return null}function G(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Re:return c.key===e?c.type===Ve?u(a,b,c.props.children,d,e):k(a,b,c,d):null;case Se:return c.key===e?q(a,b,c,d):null;case Te:return null===
e?v(a,b,c,d):null;case Ue:return c.key===e?y(a,b,c,d):null}if(Ye(c)||Xe(c))return null!==e?null:u(a,b,c,d,null);$e(a,c)}return null}function I(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Re:return a=a.get(null===d.key?c:d.key)||null,d.type===Ve?u(b,a,d.props.children,e,d.key):k(b,a,d,e);case Se:return a=a.get(null===d.key?c:d.key)||null,q(b,a,d,e);case Te:return a=a.get(c)||null,v(b,a,d,e);case Ue:return a=
a.get(null===d.key?c:d.key)||null,y(b,a,d,e)}if(Ye(d)||Xe(d))return a=a.get(c)||null,u(b,a,d,e,null);$e(b,d)}return null}function L(e,g,m,A){for(var h=null,r=null,n=g,w=g=0,k=null;null!==n&&w<m.length;w++){n.index>w?(k=n,n=null):k=n.sibling;var x=G(e,n,m[w],A);if(null===x){null===n&&(n=k);break}a&&n&&null===x.alternate&&b(e,n);g=f(x,g,w);null===r?h=x:r.sibling=x;r=x;n=k}if(w===m.length)return c(e,n),h;if(null===n){for(;w<m.length;w++)if(n=z(e,m[w],A))g=f(n,g,w),null===r?h=n:r.sibling=n,r=n;return h}for(n=
d(e,n);w<m.length;w++)if(k=I(n,e,w,m[w],A)){if(a&&null!==k.alternate)n["delete"](null===k.key?w:k.key);g=f(k,g,w);null===r?h=k:r.sibling=k;r=k}a&&n.forEach(function(a){return b(e,a)});return h}function N(e,g,m,A){var h=Xe(m);"function"!==typeof h?E("150"):void 0;m=h.call(m);null==m?E("151"):void 0;for(var r=h=null,n=g,w=g=0,k=null,x=m.next();null!==n&&!x.done;w++,x=m.next()){n.index>w?(k=n,n=null):k=n.sibling;var J=G(e,n,x.value,A);if(null===J){n||(n=k);break}a&&n&&null===J.alternate&&b(e,n);g=f(J,
g,w);null===r?h=J:r.sibling=J;r=J;n=k}if(x.done)return c(e,n),h;if(null===n){for(;!x.done;w++,x=m.next())x=z(e,x.value,A),null!==x&&(g=f(x,g,w),null===r?h=x:r.sibling=x,r=x);return h}for(n=d(e,n);!x.done;w++,x=m.next())if(x=I(n,e,w,x.value,A),null!==x){if(a&&null!==x.alternate)n["delete"](null===x.key?w:x.key);g=f(x,g,w);null===r?h=x:r.sibling=x;r=x}a&&n.forEach(function(a){return b(e,a)});return h}return function(a,d,f,h){"object"===typeof f&&null!==f&&f.type===Ve&&null===f.key&&(f=f.props.children);
var m="object"===typeof f&&null!==f;if(m)switch(f.$$typeof){case Re:a:{var r=f.key;for(m=d;null!==m;){if(m.key===r)if(10===m.tag?f.type===Ve:m.type===f.type){c(a,m.sibling);d=e(m,f.type===Ve?f.props.children:f.props,h);d.ref=Ze(m,f);d["return"]=a;a=d;break a}else{c(a,m);break}else b(a,m);m=m.sibling}f.type===Ve?(d=ue(f.props.children,a.internalContextTag,h,f.key),d["return"]=a,a=d):(h=te(f,a.internalContextTag,h),h.ref=Ze(d,f),h["return"]=a,a=h)}return g(a);case Se:a:{for(m=f.key;null!==d;){if(d.key===
m)if(7===d.tag){c(a,d.sibling);d=e(d,f,h);d["return"]=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=we(f,a.internalContextTag,h);d["return"]=a;a=d}return g(a);case Te:a:{if(null!==d)if(9===d.tag){c(a,d.sibling);d=e(d,null,h);d.type=f.value;d["return"]=a;a=d;break a}else c(a,d);d=xe(f,a.internalContextTag,h);d.type=f.value;d["return"]=a;a=d}return g(a);case Ue:a:{for(m=f.key;null!==d;){if(d.key===m)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===
f.implementation){c(a,d.sibling);d=e(d,f.children||[],h);d["return"]=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=ye(f,a.internalContextTag,h);d["return"]=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f,h)):(c(a,d),d=ve(f,a.internalContextTag,h)),d["return"]=a,a=d,g(a);if(Ye(f))return L(a,d,f,h);if(Xe(f))return N(a,d,f,h);m&&$e(a,f);if("undefined"===typeof f)switch(a.tag){case 2:case 1:h=a.type,E("152",h.displayName||
h.name||"Component")}return c(a,d)}}var bf=af(!0),cf=af(!1);                                                           // 129
function df(a,b,c,d,e){function f(a,b,c){var d=b.expirationTime;b.child=null===a?cf(b,null,c,d):bf(b,a.child,c,d)}function g(a,b){var c=b.ref;null===c||a&&a.ref===c||(b.effectTag|=128)}function h(a,b,c,d){g(a,b);if(!c)return d&&re(b,!1),q(a,b);c=b.stateNode;id.current=b;var e=c.render();b.effectTag|=1;f(a,b,e);b.memoizedState=c.state;b.memoizedProps=c.props;d&&re(b,!0);return b.child}function k(a){var b=a.stateNode;b.pendingContext?oe(a,b.pendingContext,b.pendingContext!==b.context):b.context&&oe(a,
b.context,!1);I(a,b.containerInfo)}function q(a,b){null!==a&&b.child!==a.child?E("153"):void 0;if(null!==b.child){a=b.child;var c=se(a,a.pendingProps,a.expirationTime);b.child=c;for(c["return"]=b;null!==a.sibling;)a=a.sibling,c=c.sibling=se(a,a.pendingProps,a.expirationTime),c["return"]=b;c.sibling=null}return b.child}function v(a,b){switch(b.tag){case 3:k(b);break;case 2:qe(b);break;case 4:I(b,b.stateNode.containerInfo)}return null}var y=a.shouldSetTextContent,u=a.useSyncScheduling,z=a.shouldDeprioritizeSubtree,
G=b.pushHostContext,I=b.pushHostContainer,L=c.enterHydrationState,N=c.resetHydrationState,J=c.tryToClaimNextHydratableInstance;a=Le(d,e,function(a,b){a.memoizedProps=b},function(a,b){a.memoizedState=b});var w=a.adoptClassInstance,m=a.constructClassInstance,A=a.mountClassInstance,Ob=a.updateClassInstance;return{beginWork:function(a,b,c){if(0===b.expirationTime||b.expirationTime>c)return v(a,b);switch(b.tag){case 0:null!==a?E("155"):void 0;var d=b.type,e=b.pendingProps,r=ke(b);r=me(b,r);d=d(e,r);b.effectTag|=
1;"object"===typeof d&&null!==d&&"function"===typeof d.render?(b.tag=2,e=qe(b),w(b,d),A(b,c),b=h(a,b,!0,e)):(b.tag=1,f(a,b,d),b.memoizedProps=e,b=b.child);return b;case 1:a:{e=b.type;c=b.pendingProps;d=b.memoizedProps;if(X.current)null===c&&(c=d);else if(null===c||d===c){b=q(a,b);break a}d=ke(b);d=me(b,d);e=e(c,d);b.effectTag|=1;f(a,b,e);b.memoizedProps=c;b=b.child}return b;case 2:return e=qe(b),d=void 0,null===a?b.stateNode?E("153"):(m(b,b.pendingProps),A(b,c),d=!0):d=Ob(a,b,c),h(a,b,d,e);case 3:return k(b),
e=b.updateQueue,null!==e?(d=b.memoizedState,e=Je(a,b,e,null,null,c),d===e?(N(),b=q(a,b)):(d=e.element,r=b.stateNode,(null===a||null===a.child)&&r.hydrate&&L(b)?(b.effectTag|=2,b.child=cf(b,null,d,c)):(N(),f(a,b,d)),b.memoizedState=e,b=b.child)):(N(),b=q(a,b)),b;case 5:G(b);null===a&&J(b);e=b.type;var n=b.memoizedProps;d=b.pendingProps;null===d&&(d=n,null===d?E("154"):void 0);r=null!==a?a.memoizedProps:null;X.current||null!==d&&n!==d?(n=d.children,y(e,d)?n=null:r&&y(e,r)&&(b.effectTag|=16),g(a,b),
2147483647!==c&&!u&&z(e,d)?(b.expirationTime=2147483647,b=null):(f(a,b,n),b.memoizedProps=d,b=b.child)):b=q(a,b);return b;case 6:return null===a&&J(b),a=b.pendingProps,null===a&&(a=b.memoizedProps),b.memoizedProps=a,null;case 8:b.tag=7;case 7:e=b.pendingProps;if(X.current)null===e&&(e=a&&a.memoizedProps,null===e?E("154"):void 0);else if(null===e||b.memoizedProps===e)e=b.memoizedProps;d=e.children;b.stateNode=null===a?cf(b,b.stateNode,d,c):bf(b,b.stateNode,d,c);b.memoizedProps=e;return b.stateNode;
case 9:return null;case 4:a:{I(b,b.stateNode.containerInfo);e=b.pendingProps;if(X.current)null===e&&(e=a&&a.memoizedProps,null==e?E("154"):void 0);else if(null===e||b.memoizedProps===e){b=q(a,b);break a}null===a?b.child=bf(b,null,e,c):f(a,b,e);b.memoizedProps=e;b=b.child}return b;case 10:a:{c=b.pendingProps;if(X.current)null===c&&(c=b.memoizedProps);else if(null===c||b.memoizedProps===c){b=q(a,b);break a}f(a,b,c);b.memoizedProps=c;b=b.child}return b;default:E("156")}},beginFailedWork:function(a,b,
c){switch(b.tag){case 2:qe(b);break;case 3:k(b);break;default:E("157")}b.effectTag|=64;null===a?b.child=null:b.child!==a.child&&(b.child=a.child);if(0===b.expirationTime||b.expirationTime>c)return v(a,b);b.firstEffect=null;b.lastEffect=null;b.child=null===a?cf(b,null,null,c):bf(b,a.child,null,c);2===b.tag&&(a=b.stateNode,b.memoizedProps=a.props,b.memoizedState=a.state);return b.child}}}
function ef(a,b,c){function d(a){a.effectTag|=4}var e=a.createInstance,f=a.createTextInstance,g=a.appendInitialChild,h=a.finalizeInitialChildren,k=a.prepareUpdate,q=a.persistence,v=b.getRootHostContainer,y=b.popHostContext,u=b.getHostContext,z=b.popHostContainer,G=c.prepareToHydrateHostInstance,I=c.prepareToHydrateHostTextInstance,L=c.popHydrationState,N=void 0,J=void 0,w=void 0;a.mutation?(N=function(){},J=function(a,b,c){(b.updateQueue=c)&&d(b)},w=function(a,b,c,e){c!==e&&d(b)}):q?E("235"):E("236");
return{completeWork:function(a,b,c){var m=b.pendingProps;if(null===m)m=b.memoizedProps;else if(2147483647!==b.expirationTime||2147483647===c)b.pendingProps=null;switch(b.tag){case 1:return null;case 2:return ne(b),null;case 3:z(b);V(X,b);V(ie,b);m=b.stateNode;m.pendingContext&&(m.context=m.pendingContext,m.pendingContext=null);if(null===a||null===a.child)L(b),b.effectTag&=-3;N(b);return null;case 5:y(b);c=v();var A=b.type;if(null!==a&&null!=b.stateNode){var p=a.memoizedProps,q=b.stateNode,x=u();q=
k(q,A,p,m,c,x);J(a,b,q,A,p,m,c);a.ref!==b.ref&&(b.effectTag|=128)}else{if(!m)return null===b.stateNode?E("166"):void 0,null;a=u();if(L(b))G(b,c,a)&&d(b);else{a=e(A,m,c,a,b);a:for(p=b.child;null!==p;){if(5===p.tag||6===p.tag)g(a,p.stateNode);else if(4!==p.tag&&null!==p.child){p.child["return"]=p;p=p.child;continue}if(p===b)break;for(;null===p.sibling;){if(null===p["return"]||p["return"]===b)break a;p=p["return"]}p.sibling["return"]=p["return"];p=p.sibling}h(a,A,m,c)&&d(b);b.stateNode=a}null!==b.ref&&
(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)w(a,b,a.memoizedProps,m);else{if("string"!==typeof m)return null===b.stateNode?E("166"):void 0,null;a=v();c=u();L(b)?I(b)&&d(b):b.stateNode=f(m,a,c,b)}return null;case 7:(m=b.memoizedProps)?void 0:E("165");b.tag=8;A=[];a:for((p=b.stateNode)&&(p["return"]=b);null!==p;){if(5===p.tag||6===p.tag||4===p.tag)E("247");else if(9===p.tag)A.push(p.type);else if(null!==p.child){p.child["return"]=p;p=p.child;continue}for(;null===p.sibling;){if(null===
p["return"]||p["return"]===b)break a;p=p["return"]}p.sibling["return"]=p["return"];p=p.sibling}p=m.handler;m=p(m.props,A);b.child=bf(b,null!==a?a.child:null,m,c);return b.child;case 8:return b.tag=7,null;case 9:return null;case 10:return null;case 4:return z(b),N(b),null;case 0:E("167");default:E("156")}}}}
function ff(a,b){function c(a){var c=a.ref;if(null!==c)try{c(null)}catch(A){b(a,A)}}function d(a){"function"===typeof Ee&&Ee(a);switch(a.tag){case 2:c(a);var d=a.stateNode;if("function"===typeof d.componentWillUnmount)try{d.props=a.memoizedProps,d.state=a.memoizedState,d.componentWillUnmount()}catch(A){b(a,A)}break;case 5:c(a);break;case 7:e(a.stateNode);break;case 4:k&&g(a)}}function e(a){for(var b=a;;)if(d(b),null===b.child||k&&4===b.tag){if(b===a)break;for(;null===b.sibling;){if(null===b["return"]||
b["return"]===a)return;b=b["return"]}b.sibling["return"]=b["return"];b=b.sibling}else b.child["return"]=b,b=b.child}function f(a){return 5===a.tag||3===a.tag||4===a.tag}function g(a){for(var b=a,c=!1,f=void 0,g=void 0;;){if(!c){c=b["return"];a:for(;;){null===c?E("160"):void 0;switch(c.tag){case 5:f=c.stateNode;g=!1;break a;case 3:f=c.stateNode.containerInfo;g=!0;break a;case 4:f=c.stateNode.containerInfo;g=!0;break a}c=c["return"]}c=!0}if(5===b.tag||6===b.tag)e(b),g?J(f,b.stateNode):N(f,b.stateNode);
else if(4===b.tag?f=b.stateNode.containerInfo:d(b),null!==b.child){b.child["return"]=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b["return"]||b["return"]===a)return;b=b["return"];4===b.tag&&(c=!1)}b.sibling["return"]=b["return"];b=b.sibling}}var h=a.getPublicInstance,k=a.mutation;a=a.persistence;k||(a?E("235"):E("236"));var q=k.commitMount,v=k.commitUpdate,y=k.resetTextContent,u=k.commitTextUpdate,z=k.appendChild,G=k.appendChildToContainer,I=k.insertBefore,L=k.insertInContainerBefore,
N=k.removeChild,J=k.removeChildFromContainer;return{commitResetTextContent:function(a){y(a.stateNode)},commitPlacement:function(a){a:{for(var b=a["return"];null!==b;){if(f(b)){var c=b;break a}b=b["return"]}E("160");c=void 0}var d=b=void 0;switch(c.tag){case 5:b=c.stateNode;d=!1;break;case 3:b=c.stateNode.containerInfo;d=!0;break;case 4:b=c.stateNode.containerInfo;d=!0;break;default:E("161")}c.effectTag&16&&(y(b),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c["return"]||f(c["return"])){c=
null;break a}c=c["return"]}c.sibling["return"]=c["return"];for(c=c.sibling;5!==c.tag&&6!==c.tag;){if(c.effectTag&2)continue b;if(null===c.child||4===c.tag)continue b;else c.child["return"]=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}for(var e=a;;){if(5===e.tag||6===e.tag)c?d?L(b,e.stateNode,c):I(b,e.stateNode,c):d?G(b,e.stateNode):z(b,e.stateNode);else if(4!==e.tag&&null!==e.child){e.child["return"]=e;e=e.child;continue}if(e===a)break;for(;null===e.sibling;){if(null===e["return"]||e["return"]===
a)return;e=e["return"]}e.sibling["return"]=e["return"];e=e.sibling}},commitDeletion:function(a){g(a);a["return"]=null;a.child=null;a.alternate&&(a.alternate.child=null,a.alternate["return"]=null)},commitWork:function(a,b){switch(b.tag){case 2:break;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps;a=null!==a?a.memoizedProps:d;var e=b.type,f=b.updateQueue;b.updateQueue=null;null!==f&&v(c,f,e,a,d,b)}break;case 6:null===b.stateNode?E("162"):void 0;c=b.memoizedProps;u(b.stateNode,null!==a?a.memoizedProps:
c,c);break;case 3:break;default:E("163")}},commitLifeCycles:function(a,b){switch(b.tag){case 2:var c=b.stateNode;if(b.effectTag&4)if(null===a)c.props=b.memoizedProps,c.state=b.memoizedState,c.componentDidMount();else{var d=a.memoizedProps;a=a.memoizedState;c.props=b.memoizedProps;c.state=b.memoizedState;c.componentDidUpdate(d,a)}b=b.updateQueue;null!==b&&Ke(b,c);break;case 3:c=b.updateQueue;null!==c&&Ke(c,null!==b.child?b.child.stateNode:null);break;case 5:c=b.stateNode;null===a&&b.effectTag&4&&q(c,
b.type,b.memoizedProps,b);break;case 6:break;case 4:break;default:E("163")}},commitAttachRef:function(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:b(h(c));break;default:b(c)}}},commitDetachRef:function(a){a=a.ref;null!==a&&a(null)}}}var gf={};
function hf(a){function b(a){a===gf?E("174"):void 0;return a}var c=a.getChildHostContext,d=a.getRootHostContext,e={current:gf},f={current:gf},g={current:gf};return{getHostContext:function(){return b(e.current)},getRootHostContainer:function(){return b(g.current)},popHostContainer:function(a){V(e,a);V(f,a);V(g,a)},popHostContext:function(a){f.current===a&&(V(e,a),V(f,a))},pushHostContainer:function(a,b){W(g,b,a);b=d(b);W(f,a,a);W(e,b,a)},pushHostContext:function(a){var d=b(g.current),h=b(e.current);
d=c(h,a.type,d);h!==d&&(W(f,a,a),W(e,d,a))},resetHostContainer:function(){e.current=gf;g.current=gf}}}                 // 152
function jf(a){function b(a,b){var c=new Y(5,null,0);c.type="DELETED";c.stateNode=b;c["return"]=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}function c(a,b){switch(a.tag){case 5:return b=f(b,a.type,a.pendingProps),null!==b?(a.stateNode=b,!0):!1;case 6:return b=g(b,a.pendingProps),null!==b?(a.stateNode=b,!0):!1;default:return!1}}function d(a){for(a=a["return"];null!==a&&5!==a.tag&&3!==a.tag;)a=a["return"];y=a}var e=a.shouldSetTextContent;
a=a.hydration;if(!a)return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){E("175")},prepareToHydrateHostTextInstance:function(){E("176")},popHydrationState:function(){return!1}};var f=a.canHydrateInstance,g=a.canHydrateTextInstance,h=a.getNextHydratableSibling,k=a.getFirstHydratableChild,q=a.hydrateInstance,v=a.hydrateTextInstance,y=null,u=null,z=!1;return{enterHydrationState:function(a){u=
k(a.stateNode.containerInfo);y=a;return z=!0},resetHydrationState:function(){u=y=null;z=!1},tryToClaimNextHydratableInstance:function(a){if(z){var d=u;if(d){if(!c(a,d)){d=h(d);if(!d||!c(a,d)){a.effectTag|=2;z=!1;y=a;return}b(y,u)}y=a;u=k(d)}else a.effectTag|=2,z=!1,y=a}},prepareToHydrateHostInstance:function(a,b,c){b=q(a.stateNode,a.type,a.memoizedProps,b,c,a);a.updateQueue=b;return null!==b?!0:!1},prepareToHydrateHostTextInstance:function(a){return v(a.stateNode,a.memoizedProps,a)},popHydrationState:function(a){if(a!==
y)return!1;if(!z)return d(a),z=!0,!1;var c=a.type;if(5!==a.tag||"head"!==c&&"body"!==c&&!e(c,a.memoizedProps))for(c=u;c;)b(a,c),c=h(c);d(a);u=y?h(a.stateNode):null;return!0}}}
function kf(a){function b(a){Qb=ja=!0;var b=a.stateNode;b.current===a?E("177"):void 0;b.isReadyForCommit=!1;id.current=null;if(1<a.effectTag)if(null!==a.lastEffect){a.lastEffect.nextEffect=a;var c=a.firstEffect}else c=a;else c=a.firstEffect;yg();for(t=c;null!==t;){var d=!1,e=void 0;try{for(;null!==t;){var f=t.effectTag;f&16&&zg(t);if(f&128){var g=t.alternate;null!==g&&Ag(g)}switch(f&-242){case 2:Ne(t);t.effectTag&=-3;break;case 6:Ne(t);t.effectTag&=-3;Oe(t.alternate,t);break;case 4:Oe(t.alternate,
t);break;case 8:Sc=!0,Bg(t),Sc=!1}t=t.nextEffect}}catch(Tc){d=!0,e=Tc}d&&(null===t?E("178"):void 0,h(t,e),null!==t&&(t=t.nextEffect))}Cg();b.current=a;for(t=c;null!==t;){c=!1;d=void 0;try{for(;null!==t;){var k=t.effectTag;k&36&&Dg(t.alternate,t);k&128&&Eg(t);if(k&64)switch(e=t,f=void 0,null!==R&&(f=R.get(e),R["delete"](e),null==f&&null!==e.alternate&&(e=e.alternate,f=R.get(e),R["delete"](e))),null==f?E("184"):void 0,e.tag){case 2:e.stateNode.componentDidCatch(f.error,{componentStack:f.componentStack});
break;case 3:null===ca&&(ca=f.error);break;default:E("157")}var Qc=t.nextEffect;t.nextEffect=null;t=Qc}}catch(Tc){c=!0,d=Tc}c&&(null===t?E("178"):void 0,h(t,d),null!==t&&(t=t.nextEffect))}ja=Qb=!1;"function"===typeof De&&De(a.stateNode);ha&&(ha.forEach(G),ha=null);null!==ca&&(a=ca,ca=null,Ob(a));b=b.current.expirationTime;0===b&&(qa=R=null);return b}function c(a){for(;;){var b=Fg(a.alternate,a,H),c=a["return"],d=a.sibling;var e=a;if(2147483647===H||2147483647!==e.expirationTime){if(2!==e.tag&&3!==
e.tag)var f=0;else f=e.updateQueue,f=null===f?0:f.expirationTime;for(var g=e.child;null!==g;)0!==g.expirationTime&&(0===f||f>g.expirationTime)&&(f=g.expirationTime),g=g.sibling;e.expirationTime=f}if(null!==b)return b;null!==c&&(null===c.firstEffect&&(c.firstEffect=a.firstEffect),null!==a.lastEffect&&(null!==c.lastEffect&&(c.lastEffect.nextEffect=a.firstEffect),c.lastEffect=a.lastEffect),1<a.effectTag&&(null!==c.lastEffect?c.lastEffect.nextEffect=a:c.firstEffect=a,c.lastEffect=a));if(null!==d)return d;
if(null!==c)a=c;else{a.stateNode.isReadyForCommit=!0;break}}return null}function d(a){var b=rg(a.alternate,a,H);null===b&&(b=c(a));id.current=null;return b}function e(a){var b=Gg(a.alternate,a,H);null===b&&(b=c(a));id.current=null;return b}function f(a){if(null!==R){if(!(0===H||H>a))if(H<=Uc)for(;null!==F;)F=k(F)?e(F):d(F);else for(;null!==F&&!A();)F=k(F)?e(F):d(F)}else if(!(0===H||H>a))if(H<=Uc)for(;null!==F;)F=d(F);else for(;null!==F&&!A();)F=d(F)}function g(a,b){ja?E("243"):void 0;ja=!0;a.isReadyForCommit=
!1;if(a!==ra||b!==H||null===F){for(;-1<he;)ge[he]=null,he--;je=D;ie.current=D;X.current=!1;x();ra=a;H=b;F=se(ra.current,null,b)}var c=!1,d=null;try{f(b)}catch(Rc){c=!0,d=Rc}for(;c;){if(eb){ca=d;break}var g=F;if(null===g)eb=!0;else{var k=h(g,d);null===k?E("183"):void 0;if(!eb){try{c=k;d=b;for(k=c;null!==g;){switch(g.tag){case 2:ne(g);break;case 5:qg(g);break;case 3:p(g);break;case 4:p(g)}if(g===k||g.alternate===k)break;g=g["return"]}F=e(c);f(d)}catch(Rc){c=!0;d=Rc;continue}break}}}b=ca;eb=ja=!1;ca=
null;null!==b&&Ob(b);return a.isReadyForCommit?a.current.alternate:null}function h(a,b){var c=id.current=null,d=!1,e=!1,f=null;if(3===a.tag)c=a,q(a)&&(eb=!0);else for(var g=a["return"];null!==g&&null===c;){2===g.tag?"function"===typeof g.stateNode.componentDidCatch&&(d=!0,f=jd(g),c=g,e=!0):3===g.tag&&(c=g);if(q(g)){if(Sc||null!==ha&&(ha.has(g)||null!==g.alternate&&ha.has(g.alternate)))return null;c=null;e=!1}g=g["return"]}if(null!==c){null===qa&&(qa=new Set);qa.add(c);var h="";g=a;do{a:switch(g.tag){case 0:case 1:case 2:case 5:var k=
g._debugOwner,Qc=g._debugSource;var m=jd(g);var n=null;k&&(n=jd(k));k=Qc;m="\n    in "+(m||"Unknown")+(k?" (at "+k.fileName.replace(/^.*[\\\/]/,"")+":"+k.lineNumber+")":n?" (created by "+n+")":"");break a;default:m=""}h+=m;g=g["return"]}while(g);g=h;a=jd(a);null===R&&(R=new Map);b={componentName:a,componentStack:g,error:b,errorBoundary:d?c.stateNode:null,errorBoundaryFound:d,errorBoundaryName:f,willRetry:e};R.set(c,b);try{var p=b.error;p&&p.suppressReactErrorLogging||console.error(p)}catch(Vc){Vc&&
Vc.suppressReactErrorLogging||console.error(Vc)}Qb?(null===ha&&(ha=new Set),ha.add(c)):G(c);return c}null===ca&&(ca=b);return null}function k(a){return null!==R&&(R.has(a)||null!==a.alternate&&R.has(a.alternate))}function q(a){return null!==qa&&(qa.has(a)||null!==a.alternate&&qa.has(a.alternate))}function v(){return 20*(((I()+100)/20|0)+1)}function y(a){return 0!==ka?ka:ja?Qb?1:H:!Hg||a.internalContextTag&1?v():1}function u(a,b){return z(a,b,!1)}function z(a,b){for(;null!==a;){if(0===a.expirationTime||
a.expirationTime>b)a.expirationTime=b;null!==a.alternate&&(0===a.alternate.expirationTime||a.alternate.expirationTime>b)&&(a.alternate.expirationTime=b);if(null===a["return"])if(3===a.tag){var c=a.stateNode;!ja&&c===ra&&b<H&&(F=ra=null,H=0);var d=c,e=b;Rb>Ig&&E("185");if(null===d.nextScheduledRoot)d.remainingExpirationTime=e,null===O?(sa=O=d,d.nextScheduledRoot=d):(O=O.nextScheduledRoot=d,O.nextScheduledRoot=sa);else{var f=d.remainingExpirationTime;if(0===f||e<f)d.remainingExpirationTime=e}Fa||(la?
Sb&&(ma=d,na=1,m(ma,na)):1===e?w(1,null):L(e));!ja&&c===ra&&b<H&&(F=ra=null,H=0)}else break;a=a["return"]}}function G(a){z(a,1,!0)}function I(){return Uc=((Wc()-Pe)/10|0)+2}function L(a){if(0!==Tb){if(a>Tb)return;Jg(Xc)}var b=Wc()-Pe;Tb=a;Xc=Kg(J,{timeout:10*(a-2)-b})}function N(){var a=0,b=null;if(null!==O)for(var c=O,d=sa;null!==d;){var e=d.remainingExpirationTime;if(0===e){null===c||null===O?E("244"):void 0;if(d===d.nextScheduledRoot){sa=O=d.nextScheduledRoot=null;break}else if(d===sa)sa=e=d.nextScheduledRoot,
O.nextScheduledRoot=e,d.nextScheduledRoot=null;else if(d===O){O=c;O.nextScheduledRoot=sa;d.nextScheduledRoot=null;break}else c.nextScheduledRoot=d.nextScheduledRoot,d.nextScheduledRoot=null;d=c.nextScheduledRoot}else{if(0===a||e<a)a=e,b=d;if(d===O)break;c=d;d=d.nextScheduledRoot}}c=ma;null!==c&&c===b?Rb++:Rb=0;ma=b;na=a}function J(a){w(0,a)}function w(a,b){fb=b;for(N();null!==ma&&0!==na&&(0===a||na<=a)&&!Yc;)m(ma,na),N();null!==fb&&(Tb=0,Xc=-1);0!==na&&L(na);fb=null;Yc=!1;Rb=0;if(Ub)throw a=Zc,Zc=
null,Ub=!1,a;}function m(a,c){Fa?E("245"):void 0;Fa=!0;if(c<=I()){var d=a.finishedWork;null!==d?(a.finishedWork=null,a.remainingExpirationTime=b(d)):(a.finishedWork=null,d=g(a,c),null!==d&&(a.remainingExpirationTime=b(d)))}else d=a.finishedWork,null!==d?(a.finishedWork=null,a.remainingExpirationTime=b(d)):(a.finishedWork=null,d=g(a,c),null!==d&&(A()?a.finishedWork=d:a.remainingExpirationTime=b(d)));Fa=!1}function A(){return null===fb||fb.timeRemaining()>Lg?!1:Yc=!0}function Ob(a){null===ma?E("246"):
void 0;ma.remainingExpirationTime=0;Ub||(Ub=!0,Zc=a)}var r=hf(a),n=jf(a),p=r.popHostContainer,qg=r.popHostContext,x=r.resetHostContainer,Me=df(a,r,n,u,y),rg=Me.beginWork,Gg=Me.beginFailedWork,Fg=ef(a,r,n).completeWork;r=ff(a,h);var zg=r.commitResetTextContent,Ne=r.commitPlacement,Bg=r.commitDeletion,Oe=r.commitWork,Dg=r.commitLifeCycles,Eg=r.commitAttachRef,Ag=r.commitDetachRef,Wc=a.now,Kg=a.scheduleDeferredCallback,Jg=a.cancelDeferredCallback,Hg=a.useSyncScheduling,yg=a.prepareForCommit,Cg=a.resetAfterCommit,
Pe=Wc(),Uc=2,ka=0,ja=!1,F=null,ra=null,H=0,t=null,R=null,qa=null,ha=null,ca=null,eb=!1,Qb=!1,Sc=!1,sa=null,O=null,Tb=0,Xc=-1,Fa=!1,ma=null,na=0,Yc=!1,Ub=!1,Zc=null,fb=null,la=!1,Sb=!1,Ig=1E3,Rb=0,Lg=1;return{computeAsyncExpiration:v,computeExpirationForFiber:y,scheduleWork:u,batchedUpdates:function(a,b){var c=la;la=!0;try{return a(b)}finally{(la=c)||Fa||w(1,null)}},unbatchedUpdates:function(a){if(la&&!Sb){Sb=!0;try{return a()}finally{Sb=!1}}return a()},flushSync:function(a){var b=la;la=!0;try{a:{var c=
ka;ka=1;try{var d=a();break a}finally{ka=c}d=void 0}return d}finally{la=b,Fa?E("187"):void 0,w(1,null)}},deferredUpdates:function(a){var b=ka;ka=v();try{return a()}finally{ka=b}}}}
function lf(a){function b(a){a=od(a);return null===a?null:a.stateNode}var c=a.getPublicInstance;a=kf(a);var d=a.computeAsyncExpiration,e=a.computeExpirationForFiber,f=a.scheduleWork;return{createContainer:function(a,b){var c=new Y(3,null,0);a={current:c,containerInfo:a,pendingChildren:null,remainingExpirationTime:0,isReadyForCommit:!1,finishedWork:null,context:null,pendingContext:null,hydrate:b,nextScheduledRoot:null};return c.stateNode=a},updateContainer:function(a,b,c,q){var g=b.current;if(c){c=
c._reactInternalFiber;var h;b:{2===kd(c)&&2===c.tag?void 0:E("170");for(h=c;3!==h.tag;){if(le(h)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}(h=h["return"])?void 0:E("171")}h=h.stateNode.context}c=le(c)?pe(c,h):h}else c=D;null===b.context?b.context=c:b.pendingContext=c;b=q;b=void 0===b?null:b;q=null!=a&&null!=a.type&&null!=a.type.prototype&&!0===a.type.prototype.unstable_isAsyncReactComponent?d():e(g);He(g,{expirationTime:q,partialState:{element:a},callback:b,isReplace:!1,isForced:!1,
nextCallback:null,next:null});f(g,q)},batchedUpdates:a.batchedUpdates,unbatchedUpdates:a.unbatchedUpdates,deferredUpdates:a.deferredUpdates,flushSync:a.flushSync,getPublicRootInstance:function(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return c(a.child.stateNode);default:return a.child.stateNode}},findHostInstance:b,findHostInstanceWithNoPortals:function(a){a=pd(a);return null===a?null:a.stateNode},injectIntoDevTools:function(a){var c=a.findFiberByHostInstance;return Ce(B({},
a,{findHostInstanceByFiber:function(a){return b(a)},findFiberByHostInstance:function(a){return c?c(a):null}}))}}}var mf=Object.freeze({default:lf}),nf=mf&&lf||mf,of=nf["default"]?nf["default"]:nf;function pf(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ue,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}var qf="object"===typeof performance&&"function"===typeof performance.now,rf=void 0;rf=qf?function(){return performance.now()}:function(){return Date.now()};
var sf=void 0,tf=void 0;                                                                                               // 177
if(l.canUseDOM)if("function"!==typeof requestIdleCallback||"function"!==typeof cancelIdleCallback){var uf=null,vf=!1,wf=-1,xf=!1,yf=0,zf=33,Af=33,Bf;Bf=qf?{didTimeout:!1,timeRemaining:function(){var a=yf-performance.now();return 0<a?a:0}}:{didTimeout:!1,timeRemaining:function(){var a=yf-Date.now();return 0<a?a:0}};var Cf="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(a){if(a.source===window&&a.data===Cf){vf=!1;a=rf();if(0>=yf-a)if(-1!==wf&&wf<=
a)Bf.didTimeout=!0;else{xf||(xf=!0,requestAnimationFrame(Df));return}else Bf.didTimeout=!1;wf=-1;a=uf;uf=null;null!==a&&a(Bf)}},!1);var Df=function(a){xf=!1;var b=a-yf+Af;b<Af&&zf<Af?(8>b&&(b=8),Af=b<zf?zf:b):zf=b;yf=a+Af;vf||(vf=!0,window.postMessage(Cf,"*"))};sf=function(a,b){uf=a;null!=b&&"number"===typeof b.timeout&&(wf=rf()+b.timeout);xf||(xf=!0,requestAnimationFrame(Df));return 0};tf=function(){uf=null;vf=!1;wf=-1}}else sf=window.requestIdleCallback,tf=window.cancelIdleCallback;else sf=function(a){return setTimeout(function(){a({timeRemaining:function(){return Infinity}})})},
tf=function(a){clearTimeout(a)};var Ef=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Ff={},Gf={};
function Hf(a){if(Gf.hasOwnProperty(a))return!0;if(Ff.hasOwnProperty(a))return!1;if(Ef.test(a))return Gf[a]=!0;Ff[a]=!0;return!1}
function If(a,b,c){var d=wa(b);if(d&&va(b,c)){var e=d.mutationMethod;e?e(a,c):null==c||d.hasBooleanValue&&!c||d.hasNumericValue&&isNaN(c)||d.hasPositiveNumericValue&&1>c||d.hasOverloadedBooleanValue&&!1===c?Jf(a,b):d.mustUseProperty?a[d.propertyName]=c:(b=d.attributeName,(e=d.attributeNamespace)?a.setAttributeNS(e,b,""+c):d.hasBooleanValue||d.hasOverloadedBooleanValue&&!0===c?a.setAttribute(b,""):a.setAttribute(b,""+c))}else Kf(a,b,va(b,c)?c:null)}
function Kf(a,b,c){Hf(b)&&(null==c?a.removeAttribute(b):a.setAttribute(b,""+c))}function Jf(a,b){var c=wa(b);c?(b=c.mutationMethod)?b(a,void 0):c.mustUseProperty?a[c.propertyName]=c.hasBooleanValue?!1:"":a.removeAttribute(c.attributeName):a.removeAttribute(b)}
function Lf(a,b){var c=b.value,d=b.checked;return B({type:void 0,step:void 0,min:void 0,max:void 0},b,{defaultChecked:void 0,defaultValue:void 0,value:null!=c?c:a._wrapperState.initialValue,checked:null!=d?d:a._wrapperState.initialChecked})}function Mf(a,b){var c=b.defaultValue;a._wrapperState={initialChecked:null!=b.checked?b.checked:b.defaultChecked,initialValue:null!=b.value?b.value:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}
function Nf(a,b){b=b.checked;null!=b&&If(a,"checked",b)}function Of(a,b){Nf(a,b);var c=b.value;if(null!=c)if(0===c&&""===a.value)a.value="0";else if("number"===b.type){if(b=parseFloat(a.value)||0,c!=b||c==b&&a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else null==b.value&&null!=b.defaultValue&&a.defaultValue!==""+b.defaultValue&&(a.defaultValue=""+b.defaultValue),null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}
function Pf(a,b){switch(b.type){case "submit":case "reset":break;case "color":case "date":case "datetime":case "datetime-local":case "month":case "time":case "week":a.value="";a.value=a.defaultValue;break;default:a.value=a.value}b=a.name;""!==b&&(a.name="");a.defaultChecked=!a.defaultChecked;a.defaultChecked=!a.defaultChecked;""!==b&&(a.name=b)}function Qf(a){var b="";aa.Children.forEach(a,function(a){null==a||"string"!==typeof a&&"number"!==typeof a||(b+=a)});return b}
function Rf(a,b){a=B({children:void 0},b);if(b=Qf(b.children))a.children=b;return a}function Sf(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+c;b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}
function Tf(a,b){var c=b.value;a._wrapperState={initialValue:null!=c?c:b.defaultValue,wasMultiple:!!b.multiple}}function Uf(a,b){null!=b.dangerouslySetInnerHTML?E("91"):void 0;return B({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function Vf(a,b){var c=b.value;null==c&&(c=b.defaultValue,b=b.children,null!=b&&(null!=c?E("92"):void 0,Array.isArray(b)&&(1>=b.length?void 0:E("93"),b=b[0]),c=""+b),null==c&&(c=""));a._wrapperState={initialValue:""+c}}
function Wf(a,b){var c=b.value;null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&(a.defaultValue=c));null!=b.defaultValue&&(a.defaultValue=b.defaultValue)}function Xf(a){var b=a.textContent;b===a._wrapperState.initialValue&&(a.value=b)}var Yf={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
function Zf(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function $f(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?Zf(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
var ag=void 0,bg=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Yf.svg||"innerHTML"in a)a.innerHTML=b;else{ag=ag||document.createElement("div");ag.innerHTML="\x3csvg\x3e"+b+"\x3c/svg\x3e";for(b=ag.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});
function cg(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}
var dg={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,
stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},eg=["Webkit","ms","Moz","O"];Object.keys(dg).forEach(function(a){eg.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);dg[b]=dg[a]})});
function fg(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--");var e=c;var f=b[c];e=null==f||"boolean"===typeof f||""===f?"":d||"number"!==typeof f||0===f||dg.hasOwnProperty(e)&&dg[e]?(""+f).trim():f+"px";"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var gg=B({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
function hg(a,b,c){b&&(gg[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML?E("137",a,c()):void 0),null!=b.dangerouslySetInnerHTML&&(null!=b.children?E("60"):void 0,"object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML?void 0:E("61")),null!=b.style&&"object"!==typeof b.style?E("62",c()):void 0)}
function ig(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}var jg=Yf.html,kg=C.thatReturns("");
function lg(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=Hd(a);b=Sa[b];for(var d=0;d<b.length;d++){var e=b[d];c.hasOwnProperty(e)&&c[e]||("topScroll"===e?wd("topScroll","scroll",a):"topFocus"===e||"topBlur"===e?(wd("topFocus","focus",a),wd("topBlur","blur",a),c.topBlur=!0,c.topFocus=!0):"topCancel"===e?(yc("cancel",!0)&&wd("topCancel","cancel",a),c.topCancel=!0):"topClose"===e?(yc("close",!0)&&wd("topClose","close",a),c.topClose=!0):Dd.hasOwnProperty(e)&&U(e,Dd[e],a),c[e]=!0)}}
var mg={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",
topWaiting:"waiting"};function ng(a,b,c,d){c=9===c.nodeType?c:c.ownerDocument;d===jg&&(d=Zf(a));d===jg?"script"===a?(a=c.createElement("div"),a.innerHTML="\x3cscript\x3e\x3c/script\x3e",a=a.removeChild(a.firstChild)):a="string"===typeof b.is?c.createElement(a,{is:b.is}):c.createElement(a):a=c.createElementNS(d,a);return a}function og(a,b){return(9===b.nodeType?b:b.ownerDocument).createTextNode(a)}
function pg(a,b,c,d){var e=ig(b,c);switch(b){case "iframe":case "object":U("topLoad","load",a);var f=c;break;case "video":case "audio":for(f in mg)mg.hasOwnProperty(f)&&U(f,mg[f],a);f=c;break;case "source":U("topError","error",a);f=c;break;case "img":case "image":U("topError","error",a);U("topLoad","load",a);f=c;break;case "form":U("topReset","reset",a);U("topSubmit","submit",a);f=c;break;case "details":U("topToggle","toggle",a);f=c;break;case "input":Mf(a,c);f=Lf(a,c);U("topInvalid","invalid",a);
lg(d,"onChange");break;case "option":f=Rf(a,c);break;case "select":Tf(a,c);f=B({},c,{value:void 0});U("topInvalid","invalid",a);lg(d,"onChange");break;case "textarea":Vf(a,c);f=Uf(a,c);U("topInvalid","invalid",a);lg(d,"onChange");break;default:f=c}hg(b,f,kg);var g=f,h;for(h in g)if(g.hasOwnProperty(h)){var k=g[h];"style"===h?fg(a,k,kg):"dangerouslySetInnerHTML"===h?(k=k?k.__html:void 0,null!=k&&bg(a,k)):"children"===h?"string"===typeof k?("textarea"!==b||""!==k)&&cg(a,k):"number"===typeof k&&cg(a,
""+k):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(Ra.hasOwnProperty(h)?null!=k&&lg(d,h):e?Kf(a,h,k):null!=k&&If(a,h,k))}switch(b){case "input":Bc(a);Pf(a,c);break;case "textarea":Bc(a);Xf(a,c);break;case "option":null!=c.value&&a.setAttribute("value",c.value);break;case "select":a.multiple=!!c.multiple;b=c.value;null!=b?Sf(a,!!c.multiple,b,!1):null!=c.defaultValue&&Sf(a,!!c.multiple,c.defaultValue,!0);break;default:"function"===typeof f.onClick&&(a.onclick=
C)}}                                                                                                                   // 204
function sg(a,b,c,d,e){var f=null;switch(b){case "input":c=Lf(a,c);d=Lf(a,d);f=[];break;case "option":c=Rf(a,c);d=Rf(a,d);f=[];break;case "select":c=B({},c,{value:void 0});d=B({},d,{value:void 0});f=[];break;case "textarea":c=Uf(a,c);d=Uf(a,d);f=[];break;default:"function"!==typeof c.onClick&&"function"===typeof d.onClick&&(a.onclick=C)}hg(b,d,kg);var g,h;a=null;for(g in c)if(!d.hasOwnProperty(g)&&c.hasOwnProperty(g)&&null!=c[g])if("style"===g)for(h in b=c[g],b)b.hasOwnProperty(h)&&(a||(a={}),a[h]=
"");else"dangerouslySetInnerHTML"!==g&&"children"!==g&&"suppressContentEditableWarning"!==g&&"suppressHydrationWarning"!==g&&"autoFocus"!==g&&(Ra.hasOwnProperty(g)?f||(f=[]):(f=f||[]).push(g,null));for(g in d){var k=d[g];b=null!=c?c[g]:void 0;if(d.hasOwnProperty(g)&&k!==b&&(null!=k||null!=b))if("style"===g)if(b){for(h in b)!b.hasOwnProperty(h)||k&&k.hasOwnProperty(h)||(a||(a={}),a[h]="");for(h in k)k.hasOwnProperty(h)&&b[h]!==k[h]&&(a||(a={}),a[h]=k[h])}else a||(f||(f=[]),f.push(g,a)),a=k;else"dangerouslySetInnerHTML"===
g?(k=k?k.__html:void 0,b=b?b.__html:void 0,null!=k&&b!==k&&(f=f||[]).push(g,""+k)):"children"===g?b===k||"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(g,""+k):"suppressContentEditableWarning"!==g&&"suppressHydrationWarning"!==g&&(Ra.hasOwnProperty(g)?(null!=k&&lg(e,g),f||b===k||(f=[])):(f=f||[]).push(g,k))}a&&(f=f||[]).push("style",a);return f}
function tg(a,b,c,d,e){"input"===c&&"radio"===e.type&&null!=e.name&&Nf(a,e);ig(c,d);d=ig(c,e);for(var f=0;f<b.length;f+=2){var g=b[f],h=b[f+1];"style"===g?fg(a,h,kg):"dangerouslySetInnerHTML"===g?bg(a,h):"children"===g?cg(a,h):d?null!=h?Kf(a,g,h):a.removeAttribute(g):null!=h?If(a,g,h):Jf(a,g)}switch(c){case "input":Of(a,e);break;case "textarea":Wf(a,e);break;case "select":a._wrapperState.initialValue=void 0,b=a._wrapperState.wasMultiple,a._wrapperState.wasMultiple=!!e.multiple,c=e.value,null!=c?Sf(a,
!!e.multiple,c,!1):b!==!!e.multiple&&(null!=e.defaultValue?Sf(a,!!e.multiple,e.defaultValue,!0):Sf(a,!!e.multiple,e.multiple?[]:"",!1))}}
function ug(a,b,c,d,e){switch(b){case "iframe":case "object":U("topLoad","load",a);break;case "video":case "audio":for(var f in mg)mg.hasOwnProperty(f)&&U(f,mg[f],a);break;case "source":U("topError","error",a);break;case "img":case "image":U("topError","error",a);U("topLoad","load",a);break;case "form":U("topReset","reset",a);U("topSubmit","submit",a);break;case "details":U("topToggle","toggle",a);break;case "input":Mf(a,c);U("topInvalid","invalid",a);lg(e,"onChange");break;case "select":Tf(a,c);
U("topInvalid","invalid",a);lg(e,"onChange");break;case "textarea":Vf(a,c),U("topInvalid","invalid",a),lg(e,"onChange")}hg(b,c,kg);d=null;for(var g in c)c.hasOwnProperty(g)&&(f=c[g],"children"===g?"string"===typeof f?a.textContent!==f&&(d=["children",f]):"number"===typeof f&&a.textContent!==""+f&&(d=["children",""+f]):Ra.hasOwnProperty(g)&&null!=f&&lg(e,g));switch(b){case "input":Bc(a);Pf(a,c);break;case "textarea":Bc(a);Xf(a,c);break;case "select":case "option":break;default:"function"===typeof c.onClick&&
(a.onclick=C)}return d}function vg(a,b){return a.nodeValue!==b}                                                        // 212
var wg=Object.freeze({createElement:ng,createTextNode:og,setInitialProperties:pg,diffProperties:sg,updateProperties:tg,diffHydratedProperties:ug,diffHydratedText:vg,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(a,b,c){switch(b){case "input":Of(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=
c.parentNode;c=c.querySelectorAll("input[name\x3d"+JSON.stringify(""+b)+'][type\x3d"radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=rb(d);e?void 0:E("90");Cc(d);Of(d,e)}}}break;case "textarea":Wf(a,c);break;case "select":b=c.value,null!=b&&Sf(a,!!c.multiple,b,!1)}}});nc.injectFiberControlledHostComponent(wg);var xg=null,Mg=null;function Ng(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}
function Og(a){a=a?9===a.nodeType?a.documentElement:a.firstChild:null;return!(!a||1!==a.nodeType||!a.hasAttribute("data-reactroot"))}
var Z=of({getRootHostContext:function(a){var b=a.nodeType;switch(b){case 9:case 11:a=(a=a.documentElement)?a.namespaceURI:$f(null,"");break;default:b=8===b?a.parentNode:a,a=b.namespaceURI||null,b=b.tagName,a=$f(a,b)}return a},getChildHostContext:function(a,b){return $f(a,b)},getPublicInstance:function(a){return a},prepareForCommit:function(){xg=td;var a=da();if(Kd(a)){if("selectionStart"in a)var b={start:a.selectionStart,end:a.selectionEnd};else a:{var c=window.getSelection&&window.getSelection();
if(c&&0!==c.rangeCount){b=c.anchorNode;var d=c.anchorOffset,e=c.focusNode;c=c.focusOffset;try{b.nodeType,e.nodeType}catch(z){b=null;break a}var f=0,g=-1,h=-1,k=0,q=0,v=a,y=null;b:for(;;){for(var u;;){v!==b||0!==d&&3!==v.nodeType||(g=f+d);v!==e||0!==c&&3!==v.nodeType||(h=f+c);3===v.nodeType&&(f+=v.nodeValue.length);if(null===(u=v.firstChild))break;y=v;v=u}for(;;){if(v===a)break b;y===b&&++k===d&&(g=f);y===e&&++q===c&&(h=f);if(null!==(u=v.nextSibling))break;v=y;y=v.parentNode}v=u}b=-1===g||-1===h?null:
{start:g,end:h}}else b=null}b=b||{start:0,end:0}}else b=null;Mg={focusedElem:a,selectionRange:b};ud(!1)},resetAfterCommit:function(){var a=Mg,b=da(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&fa(document.documentElement,c)){if(Kd(c))if(b=d.start,a=d.end,void 0===a&&(a=b),"selectionStart"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(window.getSelection){b=window.getSelection();var e=c[Eb()].length;a=Math.min(d.start,e);d=void 0===d.end?a:Math.min(d.end,e);!b.extend&&a>
d&&(e=d,d=a,a=e);e=Jd(c,a);var f=Jd(c,d);if(e&&f&&(1!==b.rangeCount||b.anchorNode!==e.node||b.anchorOffset!==e.offset||b.focusNode!==f.node||b.focusOffset!==f.offset)){var g=document.createRange();g.setStart(e.node,e.offset);b.removeAllRanges();a>d?(b.addRange(g),b.extend(f.node,f.offset)):(g.setEnd(f.node,f.offset),b.addRange(g))}}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});ia(c);for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=
a.top}Mg=null;ud(xg);xg=null},createInstance:function(a,b,c,d,e){a=ng(a,b,c,d);a[Q]=e;a[ob]=b;return a},appendInitialChild:function(a,b){a.appendChild(b)},finalizeInitialChildren:function(a,b,c,d){pg(a,b,c,d);a:{switch(b){case "button":case "input":case "select":case "textarea":a=!!c.autoFocus;break a}a=!1}return a},prepareUpdate:function(a,b,c,d,e){return sg(a,b,c,d,e)},shouldSetTextContent:function(a,b){return"textarea"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===
typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&"string"===typeof b.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(a,b){return!!b.hidden},createTextInstance:function(a,b,c,d){a=og(a,b);a[Q]=d;return a},now:rf,mutation:{commitMount:function(a){a.focus()},commitUpdate:function(a,b,c,d,e){a[ob]=e;tg(a,b,c,d,e)},resetTextContent:function(a){a.textContent=""},commitTextUpdate:function(a,b,c){a.nodeValue=c},appendChild:function(a,b){a.appendChild(b)},appendChildToContainer:function(a,
b){8===a.nodeType?a.parentNode.insertBefore(b,a):a.appendChild(b)},insertBefore:function(a,b,c){a.insertBefore(b,c)},insertInContainerBefore:function(a,b,c){8===a.nodeType?a.parentNode.insertBefore(b,c):a.insertBefore(b,c)},removeChild:function(a,b){a.removeChild(b)},removeChildFromContainer:function(a,b){8===a.nodeType?a.parentNode.removeChild(b):a.removeChild(b)}},hydration:{canHydrateInstance:function(a,b){return 1!==a.nodeType||b.toLowerCase()!==a.nodeName.toLowerCase()?null:a},canHydrateTextInstance:function(a,
b){return""===b||3!==a.nodeType?null:a},getNextHydratableSibling:function(a){for(a=a.nextSibling;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a},getFirstHydratableChild:function(a){for(a=a.firstChild;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a},hydrateInstance:function(a,b,c,d,e,f){a[Q]=f;a[ob]=c;return ug(a,b,c,e,d)},hydrateTextInstance:function(a,b,c){a[Q]=c;return vg(a,b)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},
didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:sf,cancelDeferredCallback:tf,useSyncScheduling:!0});rc=Z.batchedUpdates;
function Pg(a,b,c,d,e){Ng(c)?void 0:E("200");var f=c._reactRootContainer;if(f)Z.updateContainer(b,f,a,e);else{d=d||Og(c);if(!d)for(f=void 0;f=c.lastChild;)c.removeChild(f);var g=Z.createContainer(c,d);f=c._reactRootContainer=g;Z.unbatchedUpdates(function(){Z.updateContainer(b,g,a,e)})}return Z.getPublicRootInstance(f)}function Qg(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;Ng(b)?void 0:E("200");return pf(a,b,null,c)}
function Rg(a,b){this._reactRootContainer=Z.createContainer(a,b)}Rg.prototype.render=function(a,b){Z.updateContainer(a,this._reactRootContainer,null,b)};Rg.prototype.unmount=function(a){Z.updateContainer(null,this._reactRootContainer,null,a)};
var Sg={createPortal:Qg,findDOMNode:function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;if(b)return Z.findHostInstance(b);"function"===typeof a.render?E("188"):E("213",Object.keys(a))},hydrate:function(a,b,c){return Pg(null,a,b,!0,c)},render:function(a,b,c){return Pg(null,a,b,!1,c)},unstable_renderSubtreeIntoContainer:function(a,b,c,d){null==a||void 0===a._reactInternalFiber?E("38"):void 0;return Pg(a,b,c,!1,d)},unmountComponentAtNode:function(a){Ng(a)?void 0:
E("40");return a._reactRootContainer?(Z.unbatchedUpdates(function(){Pg(null,null,a,!1,function(){a._reactRootContainer=null})}),!0):!1},unstable_createPortal:Qg,unstable_batchedUpdates:tc,unstable_deferredUpdates:Z.deferredUpdates,flushSync:Z.flushSync,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:mb,EventPluginRegistry:Va,EventPropagators:Cb,ReactControlledComponent:qc,ReactDOMComponentTree:sb,ReactDOMEventListener:xd}};
Z.injectIntoDevTools({findFiberByHostInstance:pb,bundleType:0,version:"16.2.0",rendererPackageName:"react-dom"});var Tg=Object.freeze({default:Sg}),Ug=Tg&&Sg||Tg;module.exports=Ug["default"]?Ug["default"]:Ug;
                                                                                                                       // 230
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"react-dom.development.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-dom/cjs/react-dom.development.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/** @license React v16.2.0
 * react-dom.development.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var React = require('react');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var _assign = require('object-assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var EventListener = require('fbjs/lib/EventListener');
var getActiveElement = require('fbjs/lib/getActiveElement');
var shallowEqual = require('fbjs/lib/shallowEqual');
var containsNode = require('fbjs/lib/containsNode');
var focusNode = require('fbjs/lib/focusNode');
var emptyObject = require('fbjs/lib/emptyObject');
var checkPropTypes = require('prop-types/checkPropTypes');
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
var camelizeStyleName = require('fbjs/lib/camelizeStyleName');

/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

!React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

// These attributes should be all lowercase to allow for
// case insensitive checks
var RESERVED_PROPS = {
  children: true,
  dangerouslySetInnerHTML: true,
  defaultValue: true,
  defaultChecked: true,
  innerHTML: true,
  suppressContentEditableWarning: true,
  suppressHydrationWarning: true,
  style: true
};

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
  HAS_STRING_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    for (var propName in Properties) {
      !!properties.hasOwnProperty(propName) ? invariant(false, "injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.", propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE),
        hasStringBooleanValue: checkMask(propConfig, Injection.HAS_STRING_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? invariant(false, "DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s", propName) : void 0;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];

        propertyInfo.attributeName = attributeName;
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      // Downcase references to whitelist properties to check for membership
      // without case-sensitivity. This allows the whitelist to pick up
      // `allowfullscreen`, which should be written using the property configuration
      // for `allowFullscreen`
      properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
/* eslint-enable max-len */
var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";


var ROOT_ATTRIBUTE_NAME = 'data-reactroot';

/**
 * Map from property "standard name" to an object with info about how to set
 * the property in the DOM. Each object contains:
 *
 * attributeName:
 *   Used when rendering markup or with `*Attribute()`.
 * attributeNamespace
 * propertyName:
 *   Used on DOM node instances. (This includes properties that mutate due to
 *   external factors.)
 * mutationMethod:
 *   If non-null, used instead of the property or `setAttribute()` after
 *   initial render.
 * mustUseProperty:
 *   Whether the property must be accessed and mutated as an object property.
 * hasBooleanValue:
 *   Whether the property should be removed when set to a falsey value.
 * hasNumericValue:
 *   Whether the property must be numeric or parse as a numeric and should be
 *   removed when set to a falsey value.
 * hasPositiveNumericValue:
 *   Whether the property must be positive numeric or parse as a positive
 *   numeric and should be removed when set to a falsey value.
 * hasOverloadedBooleanValue:
 *   Whether the property can be used as a flag as well as with a value.
 *   Removed when strictly equal to false; present without a value when
 *   strictly equal to true; present with a value otherwise.
 */
var properties = {};

/**
 * Checks whether a property name is a writeable attribute.
 * @method
 */
function shouldSetAttribute(name, value) {
  if (isReservedProp(name)) {
    return false;
  }
  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return false;
  }
  if (value === null) {
    return true;
  }
  switch (typeof value) {
    case 'boolean':
      return shouldAttributeAcceptBooleanValue(name);
    case 'undefined':
    case 'number':
    case 'string':
    case 'object':
      return true;
    default:
      // function, symbol
      return false;
  }
}

function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function shouldAttributeAcceptBooleanValue(name) {
  if (isReservedProp(name)) {
    return true;
  }
  var propertyInfo = getPropertyInfo(name);
  if (propertyInfo) {
    return propertyInfo.hasBooleanValue || propertyInfo.hasStringBooleanValue || propertyInfo.hasOverloadedBooleanValue;
  }
  var prefix = name.toLowerCase().slice(0, 5);
  return prefix === 'data-' || prefix === 'aria-';
}

/**
 * Checks to see if a property name is within the list of properties
 * reserved for internal React operations. These properties should
 * not be set on an HTML element.
 *
 * @private
 * @param {string} name
 * @return {boolean} If the name is within reserved props
 */
function isReservedProp(name) {
  return RESERVED_PROPS.hasOwnProperty(name);
}

var injection = DOMPropertyInjection;

var MUST_USE_PROPERTY = injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = injection.HAS_OVERLOADED_BOOLEAN_VALUE;
var HAS_STRING_BOOLEAN_VALUE = injection.HAS_STRING_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  // When adding attributes to this list, be sure to also add them to
  // the `possibleStandardNames` module to ensure casing and incorrect
  // name warnings.
  Properties: {
    allowFullScreen: HAS_BOOLEAN_VALUE,
    // specifies target context for links with `preload` type
    async: HAS_BOOLEAN_VALUE,
    // Note: there is a special case that prevents it from being written to the DOM
    // on the client side because the browsers are inconsistent. Instead we call focus().
    autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_OVERLOADED_BOOLEAN_VALUE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    contentEditable: HAS_STRING_BOOLEAN_VALUE,
    controls: HAS_BOOLEAN_VALUE,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: HAS_STRING_BOOLEAN_VALUE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    hidden: HAS_BOOLEAN_VALUE,
    loop: HAS_BOOLEAN_VALUE,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    playsInline: HAS_BOOLEAN_VALUE,
    readOnly: HAS_BOOLEAN_VALUE,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    scoped: HAS_BOOLEAN_VALUE,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    start: HAS_NUMERIC_VALUE,
    // support for projecting regular DOM Elements via V1 named slots ( shadow dom )
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: HAS_STRING_BOOLEAN_VALUE,
    // Style must be explicitly set in the attribute list. React components
    // expect a style object
    style: 0,
    // Keep it in the whitelist because it is case-sensitive for SVG.
    tabIndex: 0,
    // itemScope is for for Microdata support.
    // See http://schema.org/docs/gs.html
    itemScope: HAS_BOOLEAN_VALUE,
    // These attributes must stay in the white-list because they have
    // different attribute names (see DOMAttributeNames below)
    acceptCharset: 0,
    className: 0,
    htmlFor: 0,
    httpEquiv: 0,
    // Attributes with mutation methods must be specified in the whitelist
    // Set the string boolean flag to allow the behavior
    value: HAS_STRING_BOOLEAN_VALUE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMMutationMethods: {
    value: function (node, value) {
      if (value == null) {
        return node.removeAttribute('value');
      }

      // Number inputs get special treatment due to some edge cases in
      // Chrome. Let everything else assign the value attribute as normal.
      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
      if (node.type !== 'number' || node.hasAttribute('value') === false) {
        node.setAttribute('value', '' + value);
      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
        // Don't assign an attribute if validation reports bad
        // input. Chrome will clear the value. Additionally, don't
        // operate on inputs that have focus, otherwise Chrome might
        // strip off trailing decimal places and cause the user's
        // cursor position to jump to the beginning of the input.
        //
        // In ReactDOMInput, we have an onBlur event that will trigger
        // this function again when focus is lost.
        node.setAttribute('value', '' + value);
      }
    }
  }
};

var HAS_STRING_BOOLEAN_VALUE$1 = injection.HAS_STRING_BOOLEAN_VALUE;


var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

/**
 * This is a list of all SVG attributes that need special casing,
 * namespacing, or boolean value assignment.
 *
 * When adding attributes to this list, be sure to also add them to
 * the `possibleStandardNames` module to ensure casing and incorrect
 * name warnings.
 *
 * SVG Attributes List:
 * https://www.w3.org/TR/SVG/attindex.html
 * SMIL Spec:
 * https://www.w3.org/TR/smil
 */
var ATTRS = ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'x-height', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xmlns:xlink', 'xml:lang', 'xml:space'];

var SVGDOMPropertyConfig = {
  Properties: {
    autoReverse: HAS_STRING_BOOLEAN_VALUE$1,
    externalResourcesRequired: HAS_STRING_BOOLEAN_VALUE$1,
    preserveAlpha: HAS_STRING_BOOLEAN_VALUE$1
  },
  DOMAttributeNames: {
    autoReverse: 'autoReverse',
    externalResourcesRequired: 'externalResourcesRequired',
    preserveAlpha: 'preserveAlpha'
  },
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  }
};

var CAMELIZE = /[\-\:]([a-z])/g;
var capitalize = function (token) {
  return token[1].toUpperCase();
};

ATTRS.forEach(function (original) {
  var reactName = original.replace(CAMELIZE, capitalize);

  SVGDOMPropertyConfig.Properties[reactName] = 0;
  SVGDOMPropertyConfig.DOMAttributeNames[reactName] = original;
});

injection.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
injection.injectDOMPropertyConfig(SVGDOMPropertyConfig);

var ReactErrorUtils = {
  // Used by Fiber to simulate a try-catch.
  _caughtError: null,
  _hasCaughtError: false,

  // Used by event system to capture/rethrow the first error.
  _rethrowError: null,
  _hasRethrowError: false,

  injection: {
    injectErrorUtils: function (injectedErrorUtils) {
      !(typeof injectedErrorUtils.invokeGuardedCallback === 'function') ? invariant(false, 'Injected invokeGuardedCallback() must be a function.') : void 0;
      invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
    }
  },

  /**
   * Call a function while guarding against errors that happens within it.
   * Returns an error if it throws, otherwise null.
   *
   * In production, this is implemented using a try-catch. The reason we don't
   * use a try-catch directly is so that we can swap out a different
   * implementation in DEV mode.
   *
   * @param {String} name of the guard to use for logging or debugging
   * @param {Function} func The function to invoke
   * @param {*} context The context to use when calling the function
   * @param {...*} args Arguments for function
   */
  invokeGuardedCallback: function (name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(ReactErrorUtils, arguments);
  },

  /**
   * Same as invokeGuardedCallback, but instead of returning an error, it stores
   * it in a global so it can be rethrown by `rethrowCaughtError` later.
   * TODO: See if _caughtError and _rethrowError can be unified.
   *
   * @param {String} name of the guard to use for logging or debugging
   * @param {Function} func The function to invoke
   * @param {*} context The context to use when calling the function
   * @param {...*} args Arguments for function
   */
  invokeGuardedCallbackAndCatchFirstError: function (name, func, context, a, b, c, d, e, f) {
    ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
    if (ReactErrorUtils.hasCaughtError()) {
      var error = ReactErrorUtils.clearCaughtError();
      if (!ReactErrorUtils._hasRethrowError) {
        ReactErrorUtils._hasRethrowError = true;
        ReactErrorUtils._rethrowError = error;
      }
    }
  },

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    return rethrowCaughtError.apply(ReactErrorUtils, arguments);
  },

  hasCaughtError: function () {
    return ReactErrorUtils._hasCaughtError;
  },

  clearCaughtError: function () {
    if (ReactErrorUtils._hasCaughtError) {
      var error = ReactErrorUtils._caughtError;
      ReactErrorUtils._caughtError = null;
      ReactErrorUtils._hasCaughtError = false;
      return error;
    } else {
      invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
    }
  }
};

var invokeGuardedCallback = function (name, func, context, a, b, c, d, e, f) {
  ReactErrorUtils._hasCaughtError = false;
  ReactErrorUtils._caughtError = null;
  var funcArgs = Array.prototype.slice.call(arguments, 3);
  try {
    func.apply(context, funcArgs);
  } catch (error) {
    ReactErrorUtils._caughtError = error;
    ReactErrorUtils._hasCaughtError = true;
  }
};

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // untintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!

  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
      // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.
      var didError = true;

      // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      function callCallback() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false);
        func.apply(context, funcArgs);
        didError = false;
      }

      // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.
      var error = void 0;
      // Use this to track whether the error event is ever called.
      var didSetError = false;
      var isCrossOriginError = false;

      function onError(event) {
        error = event.error;
        didSetError = true;
        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }
      }

      // Create a fake event type.
      var evtType = 'react-' + (name ? name : 'invokeguardedcallback');

      // Attach our event handlers
      window.addEventListener('error', onError);
      fakeNode.addEventListener(evtType, callCallback, false);

      // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
        }
        ReactErrorUtils._hasCaughtError = true;
        ReactErrorUtils._caughtError = error;
      } else {
        ReactErrorUtils._hasCaughtError = false;
        ReactErrorUtils._caughtError = null;
      }

      // Remove our event listeners
      window.removeEventListener('error', onError);
    };

    invokeGuardedCallback = invokeGuardedCallbackDev;
  }
}

var rethrowCaughtError = function () {
  if (ReactErrorUtils._hasRethrowError) {
    var error = ReactErrorUtils._rethrowError;
    ReactErrorUtils._rethrowError = null;
    ReactErrorUtils._hasRethrowError = false;
    throw error;
  }
};

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
    if (plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
    plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
  eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
  registrationNameModules[registrationName] = pluginModule;
  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */

/**
 * Ordered list of injected plugins.
 */
var plugins = [];

/**
 * Mapping from event name to dispatch config
 */
var eventNameDispatchConfigs = {};

/**
 * Mapping from registration name to plugin module
 */
var registrationNameModules = {};

/**
 * Mapping from registration name to event name
 */
var registrationNameDependencies = {};

/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */
var possibleRegistrationNames = {};
// Trust the developer to only use possibleRegistrationNames in true

/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginOrder}
 */
function injectEventPluginOrder(injectedEventPluginOrder) {
  !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
  // Clone the ordering so it cannot be dynamically mutated.
  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
  recomputePluginOrdering();
}

/**
 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginsByName}
 */
function injectEventPluginsByName(injectedNamesToPlugins) {
  var isOrderingDirty = false;
  for (var pluginName in injectedNamesToPlugins) {
    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
      continue;
    }
    var pluginModule = injectedNamesToPlugins[pluginName];
    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
      !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
      namesToPlugins[pluginName] = pluginModule;
      isOrderingDirty = true;
    }
  }
  if (isOrderingDirty) {
    recomputePluginOrdering();
  }
}

var EventPluginRegistry = Object.freeze({
	plugins: plugins,
	eventNameDispatchConfigs: eventNameDispatchConfigs,
	registrationNameModules: registrationNameModules,
	registrationNameDependencies: registrationNameDependencies,
	possibleRegistrationNames: possibleRegistrationNames,
	injectEventPluginOrder: injectEventPluginOrder,
	injectEventPluginsByName: injectEventPluginsByName
});

var getFiberCurrentPropsFromNode = null;
var getInstanceFromNode = null;
var getNodeFromInstance = null;

var injection$2 = {
  injectComponentTree: function (Injected) {
    getFiberCurrentPropsFromNode = Injected.getFiberCurrentPropsFromNode;
    getInstanceFromNode = Injected.getInstanceFromNode;
    getNodeFromInstance = Injected.getNodeFromInstance;

    {
      warning(getNodeFromInstance && getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
    }
  }
};






var validateEventDispatches;
{
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.');
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = getNodeFromInstance(inst);
  ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */


/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */


/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */
function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */

/**
 * Methods for injecting dependencies.
 */
var injection$1 = {
  /**
   * @param {array} InjectedEventPluginOrder
   * @public
   */
  injectEventPluginOrder: injectEventPluginOrder,

  /**
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   */
  injectEventPluginsByName: injectEventPluginsByName
};

/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */
function getListener(inst, registrationName) {
  var listener;

  // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
  // live here; needs to be moved to a better place soon
  var stateNode = inst.stateNode;
  if (!stateNode) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }
  var props = getFiberCurrentPropsFromNode(stateNode);
  if (!props) {
    // Work in progress.
    return null;
  }
  listener = props[registrationName];
  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }
  !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
  return listener;
}

/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */
function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var events;
  for (var i = 0; i < plugins.length; i++) {
    // Not every plugin in the ordering may be loaded at runtime.
    var possiblePlugin = plugins[i];
    if (possiblePlugin) {
      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      if (extractedEvents) {
        events = accumulateInto(events, extractedEvents);
      }
    }
  }
  return events;
}

/**
 * Enqueues a synthetic event that should be dispatched when
 * `processEventQueue` is invoked.
 *
 * @param {*} events An accumulation of synthetic events.
 * @internal
 */
function enqueueEvents(events) {
  if (events) {
    eventQueue = accumulateInto(eventQueue, events);
  }
}

/**
 * Dispatches all synthetic events on the event queue.
 *
 * @internal
 */
function processEventQueue(simulated) {
  // Set `eventQueue` to null before processing it so that we can tell if more
  // events get enqueued while processing.
  var processingEventQueue = eventQueue;
  eventQueue = null;

  if (!processingEventQueue) {
    return;
  }

  if (simulated) {
    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
  } else {
    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
  }
  !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
  // This would be a good time to rethrow if any of the event handlers threw.
  ReactErrorUtils.rethrowCaughtError();
}

var EventPluginHub = Object.freeze({
	injection: injection$1,
	getListener: getListener,
	extractEvents: extractEvents,
	enqueueEvents: enqueueEvents,
	processEventQueue: processEventQueue
});

var IndeterminateComponent = 0; // Before we know whether it is functional or class
var FunctionalComponent = 1;
var ClassComponent = 2;
var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
var HostComponent = 5;
var HostText = 6;
var CallComponent = 7;
var CallHandlerPhase = 8;
var ReturnComponent = 9;
var Fragment = 10;

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactInternalInstance$' + randomKey;
var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

function precacheFiberNode$1(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest = void 0;
  var inst = node[internalInstanceKey];
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber, this will always be the deepest root.
    return inst;
  }
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode$1(node) {
  var inst = node[internalInstanceKey];
  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText) {
      return inst;
    } else {
      return null;
    }
  }
  return null;
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance$1(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  }

  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  invariant(false, 'getNodeFromInstance: Invalid argument.');
}

function getFiberCurrentPropsFromNode$1(node) {
  return node[internalEventHandlersKey] || null;
}

function updateFiberProps$1(node, props) {
  node[internalEventHandlersKey] = props;
}

var ReactDOMComponentTree = Object.freeze({
	precacheFiberNode: precacheFiberNode$1,
	getClosestInstanceFromNode: getClosestInstanceFromNode,
	getInstanceFromNode: getInstanceFromNode$1,
	getNodeFromInstance: getNodeFromInstance$1,
	getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode$1,
	updateFiberProps: updateFiberProps$1
});

function getParent(inst) {
  do {
    inst = inst['return'];
    // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);
  if (inst) {
    return inst;
  }
  return null;
}

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;
  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = getParent(instA);
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = getParent(instB);
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB || instA === instB.alternate) {
      return instA;
    }
    instA = getParent(instA);
    instB = getParent(instB);
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */


/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  return getParent(inst);
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = getParent(inst);
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (true) {
    if (!from) {
      break;
    }
    if (from === common) {
      break;
    }
    var alternate = from.alternate;
    if (alternate !== null && alternate === common) {
      break;
    }
    pathFrom.push(from);
    from = getParent(from);
  }
  var pathTo = [];
  while (true) {
    if (!to) {
      break;
    }
    if (to === common) {
      break;
    }
    var _alternate = to.alternate;
    if (_alternate !== null && _alternate === common) {
      break;
    }
    pathTo.push(to);
    to = getParent(to);
  }
  for (var i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (var _i = pathTo.length; _i-- > 0;) {
    fn(pathTo[_i], 'captured', argTo);
  }
}

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  {
    warning(inst, 'Dispatching inst must not be null');
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? getParentInstance(targetInst) : null;
    traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (inst && event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

var EventPropagators = Object.freeze({
	accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches,
	accumulateDirectDispatches: accumulateDirectDispatches
});

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

/**
 * This helper object stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */
var compositionState = {
  _root: null,
  _startText: null,
  _fallbackText: null
};

function initialize(nativeEventTarget) {
  compositionState._root = nativeEventTarget;
  compositionState._startText = getText();
  return true;
}

function reset() {
  compositionState._root = null;
  compositionState._startText = null;
  compositionState._fallbackText = null;
}

function getData() {
  if (compositionState._fallbackText) {
    return compositionState._fallbackText;
  }

  var start;
  var startValue = compositionState._startText;
  var startLength = startValue.length;
  var end;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;
  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  compositionState._fallbackText = endValue.slice(start, sliceTail);
  return compositionState._fallbackText;
}

function getText() {
  if ('value' in compositionState._root) {
    return compositionState._root.value;
  }
  return compositionState._root[getTextContentAccessor()];
}

/* eslint valid-typeof: 0 */

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';
var EVENT_POOL_SIZE = 10;

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }
});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;
  addEventPoolingTo(Class);
};

/** Proxying after everything set on SyntheticEvent
 * to resolve Proxy issue on some WebKit browsers
 * in which some Event properties are set to undefined (GH#10010)
 */
{
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.');
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}

addEventPoolingTo(SyntheticEvent);

/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
  }
}

function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
  var EventConstructor = this;
  if (EventConstructor.eventPool.length) {
    var instance = EventConstructor.eventPool.pop();
    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
    return instance;
  }
  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
}

function releasePooledEvent(event) {
  var EventConstructor = this;
  !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance  into a pool of a different type.') : void 0;
  event.destructor();
  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
    EventConstructor.eventPool.push(event);
  }
}

function addEventPoolingTo(EventConstructor) {
  EventConstructor.eventPool = [];
  EventConstructor.getPooled = getPooledEvent;
  EventConstructor.release = releasePooledEvent;
}

var SyntheticEvent$1 = SyntheticEvent;

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticInputEvent, InputEventInterface);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition status, if any.
var isComposing = false;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === eventTypes.compositionStart) {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `BrowserEventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

// Use to restore controlled state after a change event has fired.

var fiberHostComponent = null;

var ReactControlledComponentInjection = {
  injectFiberControlledHostComponent: function (hostComponentImpl) {
    // The fiber implementation doesn't use dynamic dispatch so we need to
    // inject the implementation.
    fiberHostComponent = hostComponentImpl;
  }
};

var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);
  if (!internalInstance) {
    // Unmounted
    return;
  }
  !(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === 'function') ? invariant(false, 'Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
  fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
}

var injection$3 = ReactControlledComponentInjection;

function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}

function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }
  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;

  restoreStateOfTarget(target);
  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

var ReactControlledComponent = Object.freeze({
	injection: injection$3,
	enqueueStateRestore: enqueueStateRestore,
	restoreStateIfNeeded: restoreStateIfNeeded
});

// Used as a way to call batchedUpdates when we don't have a reference to
// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.

// Defaults
var fiberBatchedUpdates = function (fn, bookkeeping) {
  return fn(bookkeeping);
};

var isNestingBatched = false;
function batchedUpdates(fn, bookkeeping) {
  if (isNestingBatched) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state. Therefore, we add the target to
    // a queue of work.
    return fiberBatchedUpdates(fn, bookkeeping);
  }
  isNestingBatched = true;
  try {
    return fiberBatchedUpdates(fn, bookkeeping);
  } finally {
    // Here we wait until all updates have propagated, which is important
    // when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    // Then we restore state of any controlled component.
    isNestingBatched = false;
    restoreStateIfNeeded();
  }
}

var ReactGenericBatchingInjection = {
  injectFiberBatchedUpdates: function (_batchedUpdates) {
    fiberBatchedUpdates = _batchedUpdates;
  }
};

var injection$4 = ReactGenericBatchingInjection;

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

/**
 * HTML nodeType values that represent the type of the node
 */

var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';
  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

  var currentValue = '' + node[valueField];

  // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)
  if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }

  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable,
    configurable: true,
    get: function () {
      return descriptor.get.call(this);
    },
    set: function (value) {
      currentValue = '' + value;
      descriptor.set.call(this, value);
    }
  });

  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  }

  // TODO: Once it's just Fiber we can move this to node._wrapperState
  node._valueTracker = trackValueOnNode(node);
}

function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node);
  // if there is no tracker at this point it's unlikely
  // that trying again will succeed
  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);
  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }
  return false;
}

var eventTypes$1 = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent$1.getPooled(eventTypes$1.change, inst, nativeEvent, target);
  event.type = 'change';
  // Flag this event loop as needing state restore.
  enqueueStateRestore(target);
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  enqueueEvents(event);
  processEventQueue(false);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance$1(targetInst);
  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === 'topClick') {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(inst, node) {
  // TODO: In IE, inst is occasionally null. Why?
  if (inst == null) {
    return;
  }

  // Fiber and ReactDOM keep wrapper state in separate places
  var state = inst._wrapperState || node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  // If controlled, assign the value attribute to the current value on blur
  var value = '' + node.value;
  if (node.getAttribute('value') !== value) {
    node.setAttribute('value', value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {
  eventTypes: eventTypes$1,

  _isInputEventSupported: isInputEventSupported,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForChangeEvent;
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);
      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === 'topBlur') {
      handleControlledInputBlur(targetInst, targetNode);
    }
  }
};

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: null,
  detail: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticUIEvent, UIEventInterface);

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: null,
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

var eventTypes$2 = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {
  eventTypes: eventTypes$2,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : getNodeFromInstance$1(from);
    var toNode = to == null ? win : getNodeFromInstance$1(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes$2.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes$2.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }
};

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */

/**
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 */


function get(key) {
  return key._reactInternalFiber;
}

function has(key) {
  return key._reactInternalFiber !== undefined;
}

function set(key, value) {
  key._reactInternalFiber = value;
}

var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var ReactCurrentOwner = ReactInternals.ReactCurrentOwner;
var ReactDebugCurrentFrame = ReactInternals.ReactDebugCurrentFrame;

function getComponentName(fiber) {
  var type = fiber.type;

  if (typeof type === 'string') {
    return type;
  }
  if (typeof type === 'function') {
    return type.displayName || type.name;
  }
  return null;
}

// Don't change these two values:
var NoEffect = 0; //           0b00000000
var PerformedWork = 1; //      0b00000001

// You can change the rest (and add more).
var Placement = 2; //          0b00000010
var Update = 4; //             0b00000100
var PlacementAndUpdate = 6; // 0b00000110
var Deletion = 8; //           0b00001000
var ContentReset = 16; //      0b00010000
var Callback = 32; //          0b00100000
var Err = 64; //               0b01000000
var Ref = 128; //              0b10000000

var MOUNTING = 1;
var MOUNTED = 2;
var UNMOUNTED = 3;

function isFiberMountedImpl(fiber) {
  var node = fiber;
  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    if ((node.effectTag & Placement) !== NoEffect) {
      return MOUNTING;
    }
    while (node['return']) {
      node = node['return'];
      if ((node.effectTag & Placement) !== NoEffect) {
        return MOUNTING;
      }
    }
  } else {
    while (node['return']) {
      node = node['return'];
    }
  }
  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return MOUNTED;
  }
  // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.
  return UNMOUNTED;
}

function isFiberMounted(fiber) {
  return isFiberMountedImpl(fiber) === MOUNTED;
}

function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;
    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;
      warning(instance._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber) || 'A component');
      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);
  if (!fiber) {
    return false;
  }
  return isFiberMountedImpl(fiber) === MOUNTED;
}

function assertIsMounted(fiber) {
  !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;
  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var state = isFiberMountedImpl(fiber);
    !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
    if (state === MOUNTING) {
      return null;
    }
    return fiber;
  }
  // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.
  var a = fiber;
  var b = alternate;
  while (true) {
    var parentA = a['return'];
    var parentB = parentA ? parentA.alternate : null;
    if (!parentA || !parentB) {
      // We're at the root.
      break;
    }

    // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.
    if (parentA.child === parentB.child) {
      var child = parentA.child;
      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }
        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }
        child = child.sibling;
      }
      // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.
      invariant(false, 'Unable to find node on an unmounted component.');
    }

    if (a['return'] !== b['return']) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;
      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }
        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }
        _child = _child.sibling;
      }
      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;
        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }
          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }
          _child = _child.sibling;
        }
        !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
      }
    }

    !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  }
  // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.
  !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  }
  // Otherwise B has to be current branch.
  return alternate;
}

function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  if (!currentParent) {
    return null;
  }

  // Next we'll drill down this component to find the first HostComponent/Text.
  var node = currentParent;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child['return'] = node;
      node = node.child;
      continue;
    }
    if (node === currentParent) {
      return null;
    }
    while (!node.sibling) {
      if (!node['return'] || node['return'] === currentParent) {
        return null;
      }
      node = node['return'];
    }
    node.sibling['return'] = node['return'];
    node = node.sibling;
  }
  // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable
  return null;
}

function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  if (!currentParent) {
    return null;
  }

  // Next we'll drill down this component to find the first HostComponent/Text.
  var node = currentParent;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child['return'] = node;
      node = node.child;
      continue;
    }
    if (node === currentParent) {
      return null;
    }
    while (!node.sibling) {
      if (!node['return'] || node['return'] === currentParent) {
        return null;
      }
      node = node['return'];
    }
    node.sibling['return'] = node['return'];
    node = node.sibling;
  }
  // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable
  return null;
}

var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
var callbackBookkeepingPool = [];

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findRootContainerNode(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst['return']) {
    inst = inst['return'];
  }
  if (inst.tag !== HostRoot) {
    // This can happen if we're in a detached tree.
    return null;
  }
  return inst.stateNode.containerInfo;
}

// Used to store ancestor hierarchy in top level callback
function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
  if (callbackBookkeepingPool.length) {
    var instance = callbackBookkeepingPool.pop();
    instance.topLevelType = topLevelType;
    instance.nativeEvent = nativeEvent;
    instance.targetInst = targetInst;
    return instance;
  }
  return {
    topLevelType: topLevelType,
    nativeEvent: nativeEvent,
    targetInst: targetInst,
    ancestors: []
  };
}

function releaseTopLevelCallbackBookKeeping(instance) {
  instance.topLevelType = null;
  instance.nativeEvent = null;
  instance.targetInst = null;
  instance.ancestors.length = 0;
  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
    callbackBookkeepingPool.push(instance);
  }
}

function handleTopLevelImpl(bookKeeping) {
  var targetInst = bookKeeping.targetInst;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    if (!ancestor) {
      bookKeeping.ancestors.push(ancestor);
      break;
    }
    var root = findRootContainerNode(ancestor);
    if (!root) {
      break;
    }
    bookKeeping.ancestors.push(ancestor);
    ancestor = getClosestInstanceFromNode(root);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    _handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

// TODO: can we stop exporting these?
var _enabled = true;
var _handleTopLevel = void 0;

function setHandleTopLevel(handleTopLevel) {
  _handleTopLevel = handleTopLevel;
}

function setEnabled(enabled) {
  _enabled = !!enabled;
}

function isEnabled() {
  return _enabled;
}

/**
 * Traps top-level events by using event bubbling.
 *
 * @param {string} topLevelType Record from `BrowserEventConstants`.
 * @param {string} handlerBaseName Event name (e.g. "click").
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */
function trapBubbledEvent(topLevelType, handlerBaseName, element) {
  if (!element) {
    return null;
  }
  return EventListener.listen(element, handlerBaseName, dispatchEvent.bind(null, topLevelType));
}

/**
 * Traps a top-level event by using event capturing.
 *
 * @param {string} topLevelType Record from `BrowserEventConstants`.
 * @param {string} handlerBaseName Event name (e.g. "click").
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */
function trapCapturedEvent(topLevelType, handlerBaseName, element) {
  if (!element) {
    return null;
  }
  return EventListener.capture(element, handlerBaseName, dispatchEvent.bind(null, topLevelType));
}

function dispatchEvent(topLevelType, nativeEvent) {
  if (!_enabled) {
    return;
  }

  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);
  if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
    // If we get an event (ex: img onload) before committing that
    // component's mount, ignore it for now (that is, treat it as if it was an
    // event on a non-React tree). We might also consider queueing events and
    // dispatching them after the mount.
    targetInst = null;
  }

  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

  try {
    // Event queue being processed in the same cycle allows
    // `preventDefault`.
    batchedUpdates(handleTopLevelImpl, bookKeeping);
  } finally {
    releaseTopLevelCallbackBookKeeping(bookKeeping);
  }
}

var ReactDOMEventListener = Object.freeze({
	get _enabled () { return _enabled; },
	get _handleTopLevel () { return _handleTopLevel; },
	setHandleTopLevel: setHandleTopLevel,
	setEnabled: setEnabled,
	isEnabled: isEnabled,
	trapBubbledEvent: trapBubbledEvent,
	trapCapturedEvent: trapCapturedEvent,
	dispatchEvent: dispatchEvent
});

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

/**
 * Types of raw signals from the browser caught at the top level.
 *
 * For events like 'submit' which don't consistently bubble (which we
 * trap at a lower node than `document`), binding at `document` would
 * cause duplicate events so we don't include them here.
 */
var topLevelTypes$1 = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCancel: 'cancel',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topClose: 'close',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoad: 'load',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topToggle: 'toggle',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

var BrowserEventConstants = {
  topLevelTypes: topLevelTypes$1
};

function runEventQueueInBatch(events) {
  enqueueEvents(events);
  processEventQueue(false);
}

/**
 * Streams a fired top-level event to `EventPluginHub` where plugins have the
 * opportunity to create `ReactEvent`s to be dispatched.
 */
function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
  runEventQueueInBatch(events);
}

var topLevelTypes = BrowserEventConstants.topLevelTypes;

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var reactTopListenersCounter = 0;

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} contentDocumentHandle Document which owns the container
 */
function listenTo(registrationName, contentDocumentHandle) {
  var mountAt = contentDocumentHandle;
  var isListening = getListeningForDocument(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
      if (dependency === 'topScroll') {
        trapCapturedEvent('topScroll', 'scroll', mountAt);
      } else if (dependency === 'topFocus' || dependency === 'topBlur') {
        trapCapturedEvent('topFocus', 'focus', mountAt);
        trapCapturedEvent('topBlur', 'blur', mountAt);

        // to make sure blur and focus event listeners are only attached once
        isListening.topBlur = true;
        isListening.topFocus = true;
      } else if (dependency === 'topCancel') {
        if (isEventSupported('cancel', true)) {
          trapCapturedEvent('topCancel', 'cancel', mountAt);
        }
        isListening.topCancel = true;
      } else if (dependency === 'topClose') {
        if (isEventSupported('close', true)) {
          trapCapturedEvent('topClose', 'close', mountAt);
        }
        isListening.topClose = true;
      } else if (topLevelTypes.hasOwnProperty(dependency)) {
        trapBubbledEvent(dependency, topLevelTypes[dependency], mountAt);
      }

      isListening[dependency] = true;
    }
  }
}

function isListeningToAllDependencies(registrationName, mountAt) {
  var isListening = getListeningForDocument(mountAt);
  var dependencies = registrationNameDependencies[registrationName];
  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
      return false;
    }
  }
  return true;
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */
function getOffsets(outerNode) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode$$1 = selection.focusNode,
      focusOffset = selection.focusOffset;

  // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode$$1.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode$$1, focusOffset);
}

/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */
function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode$$1, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }
      if (node === focusNode$$1 && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      }
      // Moving from `node` to its first child `next`.
      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }
      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }
      if (parentNode === focusNode$$1 && ++indexWithinFocus === focusOffset) {
        end = length;
      }
      if ((next = node.nextSibling) !== null) {
        break;
      }
      node = parentNode;
      parentNode = node.parentNode;
    }

    // Moving from `node` to its next sibling `next`.
    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
}

function getSelectionInformation() {
  var focusedElem = getActiveElement();
  return {
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
  };
}

/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */
function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElement();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;
  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    }

    // Focusing a node can change the scroll position, which is undesirable
    var ancestors = [];
    var ancestor = priorFocusedElem;
    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    focusNode(priorFocusedElem);

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}

/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */
function getSelection$1(input) {
  var selection = void 0;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || { start: 0, end: 0 };
}

/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */
function setSelection(input, offsets) {
  var start = offsets.start,
      end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes$3 = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement$1);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent$1.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement$1;

    accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {
  eventTypes: eventTypes$3,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : nativeEventTarget.nodeType === DOCUMENT_NODE ? nativeEventTarget : nativeEventTarget.ownerDocument;
    // Track whether all listeners exists for this plugin. If none exist, we do
    // not extract events. See #3639.
    if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
      return null;
    }

    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement$1 = targetNode;
          activeElementInst$1 = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement$1 = null;
        activeElementInst$1 = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  }
};

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent$1.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes$4 = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'toggle', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes$4[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

// Only used in DEV for exhaustiveness validation.
var knownHTMLTopLevelTypes = ['topAbort', 'topCancel', 'topCanPlay', 'topCanPlayThrough', 'topClose', 'topDurationChange', 'topEmptied', 'topEncrypted', 'topEnded', 'topError', 'topInput', 'topInvalid', 'topLoad', 'topLoadedData', 'topLoadedMetadata', 'topLoadStart', 'topPause', 'topPlay', 'topPlaying', 'topProgress', 'topRateChange', 'topReset', 'topSeeked', 'topSeeking', 'topStalled', 'topSubmit', 'topSuspend', 'topTimeUpdate', 'topToggle', 'topVolumeChange', 'topWaiting'];

var SimpleEventPlugin = {
  eventTypes: eventTypes$4,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
      default:
        {
          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
            warning(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
          }
        }
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent$1;
        break;
    }
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    accumulateTwoPhaseDispatches(event);
    return event;
  }
};

setHandleTopLevel(handleTopLevel);

/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */
injection$1.injectEventPluginOrder(DOMEventPluginOrder);
injection$2.injectComponentTree(ReactDOMComponentTree);

/**
 * Some important event plugins included by default (without having to require
 * them).
 */
injection$1.injectEventPluginsByName({
  SimpleEventPlugin: SimpleEventPlugin,
  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
  ChangeEventPlugin: ChangeEventPlugin,
  SelectEventPlugin: SelectEventPlugin,
  BeforeInputEventPlugin: BeforeInputEventPlugin
});

var enableAsyncSubtreeAPI = true;
var enableAsyncSchedulingByDefaultInReactDOM = false;
// Exports ReactDOM.createRoot
var enableCreateRoot = false;
var enableUserTimingAPI = true;

// Mutating mode (React DOM, React ART, React Native):
var enableMutatingReconciler = true;
// Experimental noop mode (currently unused):
var enableNoopReconciler = false;
// Experimental persistent mode (CS):
var enablePersistentReconciler = false;

// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
var debugRenderPhaseSideEffects = false;

// Only used in www builds.

var valueStack = [];

{
  var fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}



function pop(cursor, fiber) {
  if (index < 0) {
    {
      warning(false, 'Unexpected pop.');
    }
    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      warning(false, 'Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];

  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;

  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

function reset$1() {
  while (index > -1) {
    valueStack[index] = null;

    {
      fiberStack[index] = null;
    }

    index--;
  }
}

var describeComponentFrame = function (name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
};

function describeFiber(fiber) {
  switch (fiber.tag) {
    case IndeterminateComponent:
    case FunctionalComponent:
    case ClassComponent:
    case HostComponent:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName(fiber);
      var ownerName = null;
      if (owner) {
        ownerName = getComponentName(owner);
      }
      return describeComponentFrame(name, source, ownerName);
    default:
      return '';
  }
}

// This function can only be called with a work-in-progress fiber and
// only during begin or complete phase. Do not call it under any other
// circumstances.
function getStackAddendumByWorkInProgressFiber(workInProgress) {
  var info = '';
  var node = workInProgress;
  do {
    info += describeFiber(node);
    // Otherwise this return pointer might point to the wrong tree:
    node = node['return'];
  } while (node);
  return info;
}

function getCurrentFiberOwnerName() {
  {
    var fiber = ReactDebugCurrentFiber.current;
    if (fiber === null) {
      return null;
    }
    var owner = fiber._debugOwner;
    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner);
    }
  }
  return null;
}

function getCurrentFiberStackAddendum() {
  {
    var fiber = ReactDebugCurrentFiber.current;
    if (fiber === null) {
      return null;
    }
    // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.
    return getStackAddendumByWorkInProgressFiber(fiber);
  }
  return null;
}

function resetCurrentFiber() {
  ReactDebugCurrentFrame.getCurrentStack = null;
  ReactDebugCurrentFiber.current = null;
  ReactDebugCurrentFiber.phase = null;
}

function setCurrentFiber(fiber) {
  ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum;
  ReactDebugCurrentFiber.current = fiber;
  ReactDebugCurrentFiber.phase = null;
}

function setCurrentPhase(phase) {
  ReactDebugCurrentFiber.phase = phase;
}

var ReactDebugCurrentFiber = {
  current: null,
  phase: null,
  resetCurrentFiber: resetCurrentFiber,
  setCurrentFiber: setCurrentFiber,
  setCurrentPhase: setCurrentPhase,
  getCurrentFiberOwnerName: getCurrentFiberOwnerName,
  getCurrentFiberStackAddendum: getCurrentFiberStackAddendum
};

// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji = '\u269B';
var warningEmoji = '\u26D4';
var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

// Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
var currentFiber = null;
// If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).
var currentPhase = null;
var currentPhaseFiber = null;
// Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.
var isCommitting = false;
var hasScheduledUpdateInCurrentCommit = false;
var hasScheduledUpdateInCurrentPhase = false;
var commitCountInCurrentWorkLoop = 0;
var effectCountInCurrentCommit = 0;
var isWaitingForCallback = false;
// During commits, we only show a measurement once per method name
// to avoid stretch the commit phase with measurement overhead.
var labelsInCurrentCommit = new Set();

var formatMarkName = function (markName) {
  return reactEmoji + ' ' + markName;
};

var formatLabel = function (label, warning$$1) {
  var prefix = warning$$1 ? warningEmoji + ' ' : reactEmoji + ' ';
  var suffix = warning$$1 ? ' Warning: ' + warning$$1 : '';
  return '' + prefix + label + suffix;
};

var beginMark = function (markName) {
  performance.mark(formatMarkName(markName));
};

var clearMark = function (markName) {
  performance.clearMarks(formatMarkName(markName));
};

var endMark = function (label, markName, warning$$1) {
  var formattedMarkName = formatMarkName(markName);
  var formattedLabel = formatLabel(label, warning$$1);
  try {
    performance.measure(formattedLabel, formattedMarkName);
  } catch (err) {}
  // If previous mark was missing for some reason, this will throw.
  // This could only happen if React crashed in an unexpected place earlier.
  // Don't pile on with more errors.

  // Clear marks immediately to avoid growing buffer.
  performance.clearMarks(formattedMarkName);
  performance.clearMeasures(formattedLabel);
};

var getFiberMarkName = function (label, debugID) {
  return label + ' (#' + debugID + ')';
};

var getFiberLabel = function (componentName, isMounted, phase) {
  if (phase === null) {
    // These are composite component total time measurements.
    return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
  } else {
    // Composite component methods.
    return componentName + '.' + phase;
  }
};

var beginFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);

  if (isCommitting && labelsInCurrentCommit.has(label)) {
    // During the commit phase, we don't show duplicate labels because
    // there is a fixed overhead for every measurement, and we don't
    // want to stretch the commit phase beyond necessary.
    return false;
  }
  labelsInCurrentCommit.add(label);

  var markName = getFiberMarkName(label, debugID);
  beginMark(markName);
  return true;
};

var clearFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  clearMark(markName);
};

var endFiberMark = function (fiber, phase, warning$$1) {
  var componentName = getComponentName(fiber) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  endMark(label, markName, warning$$1);
};

var shouldIgnoreFiber = function (fiber) {
  // Host components should be skipped in the timeline.
  // We could check typeof fiber.type, but does this work with RN?
  switch (fiber.tag) {
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case ReturnComponent:
    case Fragment:
      return true;
    default:
      return false;
  }
};

var clearPendingPhaseMeasurement = function () {
  if (currentPhase !== null && currentPhaseFiber !== null) {
    clearFiberMark(currentPhaseFiber, currentPhase);
  }
  currentPhaseFiber = null;
  currentPhase = null;
  hasScheduledUpdateInCurrentPhase = false;
};

var pauseTimers = function () {
  // Stops all currently active measurements so that they can be resumed
  // if we continue in a later deferred loop from the same unit of work.
  var fiber = currentFiber;
  while (fiber) {
    if (fiber._debugIsCurrentlyTiming) {
      endFiberMark(fiber, null, null);
    }
    fiber = fiber['return'];
  }
};

var resumeTimersRecursively = function (fiber) {
  if (fiber['return'] !== null) {
    resumeTimersRecursively(fiber['return']);
  }
  if (fiber._debugIsCurrentlyTiming) {
    beginFiberMark(fiber, null);
  }
};

var resumeTimers = function () {
  // Resumes all measurements that were active during the last deferred loop.
  if (currentFiber !== null) {
    resumeTimersRecursively(currentFiber);
  }
};

function recordEffect() {
  if (enableUserTimingAPI) {
    effectCountInCurrentCommit++;
  }
}

function recordScheduleUpdate() {
  if (enableUserTimingAPI) {
    if (isCommitting) {
      hasScheduledUpdateInCurrentCommit = true;
    }
    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
      hasScheduledUpdateInCurrentPhase = true;
    }
  }
}

function startRequestCallbackTimer() {
  if (enableUserTimingAPI) {
    if (supportsUserTiming && !isWaitingForCallback) {
      isWaitingForCallback = true;
      beginMark('(Waiting for async callback...)');
    }
  }
}

function stopRequestCallbackTimer(didExpire) {
  if (enableUserTimingAPI) {
    if (supportsUserTiming) {
      isWaitingForCallback = false;
      var warning$$1 = didExpire ? 'React was blocked by main thread' : null;
      endMark('(Waiting for async callback...)', '(Waiting for async callback...)', warning$$1);
    }
  }
}

function startWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, this is the fiber to unwind from.
    currentFiber = fiber;
    if (!beginFiberMark(fiber, null)) {
      return;
    }
    fiber._debugIsCurrentlyTiming = true;
  }
}

function cancelWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // Remember we shouldn't complete measurement for this fiber.
    // Otherwise flamechart will be deep even for small updates.
    fiber._debugIsCurrentlyTiming = false;
    clearFiberMark(fiber, null);
  }
}

function stopWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, its parent is the fiber to unwind from.
    currentFiber = fiber['return'];
    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }
    fiber._debugIsCurrentlyTiming = false;
    endFiberMark(fiber, null, null);
  }
}

function stopFailedWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, its parent is the fiber to unwind from.
    currentFiber = fiber['return'];
    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }
    fiber._debugIsCurrentlyTiming = false;
    var warning$$1 = 'An error was thrown inside this error boundary';
    endFiberMark(fiber, null, warning$$1);
  }
}

function startPhaseTimer(fiber, phase) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    clearPendingPhaseMeasurement();
    if (!beginFiberMark(fiber, phase)) {
      return;
    }
    currentPhaseFiber = fiber;
    currentPhase = phase;
  }
}

function stopPhaseTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    if (currentPhase !== null && currentPhaseFiber !== null) {
      var warning$$1 = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
      endFiberMark(currentPhaseFiber, currentPhase, warning$$1);
    }
    currentPhase = null;
    currentPhaseFiber = null;
  }
}

function startWorkLoopTimer(nextUnitOfWork) {
  if (enableUserTimingAPI) {
    currentFiber = nextUnitOfWork;
    if (!supportsUserTiming) {
      return;
    }
    commitCountInCurrentWorkLoop = 0;
    // This is top level call.
    // Any other measurements are performed within.
    beginMark('(React Tree Reconciliation)');
    // Resume any measurements that were in progress during the last loop.
    resumeTimers();
  }
}

function stopWorkLoopTimer(interruptedBy) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var warning$$1 = null;
    if (interruptedBy !== null) {
      if (interruptedBy.tag === HostRoot) {
        warning$$1 = 'A top-level update interrupted the previous render';
      } else {
        var componentName = getComponentName(interruptedBy) || 'Unknown';
        warning$$1 = 'An update to ' + componentName + ' interrupted the previous render';
      }
    } else if (commitCountInCurrentWorkLoop > 1) {
      warning$$1 = 'There were cascading updates';
    }
    commitCountInCurrentWorkLoop = 0;
    // Pause any measurements until the next loop.
    pauseTimers();
    endMark('(React Tree Reconciliation)', '(React Tree Reconciliation)', warning$$1);
  }
}

function startCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    isCommitting = true;
    hasScheduledUpdateInCurrentCommit = false;
    labelsInCurrentCommit.clear();
    beginMark('(Committing Changes)');
  }
}

function stopCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var warning$$1 = null;
    if (hasScheduledUpdateInCurrentCommit) {
      warning$$1 = 'Lifecycle hook scheduled a cascading update';
    } else if (commitCountInCurrentWorkLoop > 0) {
      warning$$1 = 'Caused by a cascading update in earlier commit';
    }
    hasScheduledUpdateInCurrentCommit = false;
    commitCountInCurrentWorkLoop++;
    isCommitting = false;
    labelsInCurrentCommit.clear();

    endMark('(Committing Changes)', '(Committing Changes)', warning$$1);
  }
}

function startCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Committing Host Effects)');
  }
}

function stopCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
  }
}

function startCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Calling Lifecycle Methods)');
  }
}

function stopCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
  }
}

{
  var warnedAboutMissingGetChildContext = {};
}

// A cursor to the current merged context object on the stack.
var contextStackCursor = createCursor(emptyObject);
// A cursor to a boolean indicating whether the context has changed.
var didPerformWorkStackCursor = createCursor(false);
// Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.
var previousContext = emptyObject;

function getUnmaskedContext(workInProgress) {
  var hasOwnContext = isContextProvider(workInProgress);
  if (hasOwnContext) {
    // If the fiber is a context provider itself, when we read its context
    // we have already pushed its own child context on the stack. A context
    // provider should not "see" its own child context. Therefore we read the
    // previous (parent) context instead for a context provider.
    return previousContext;
  }
  return contextStackCursor.current;
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  var instance = workInProgress.stateNode;
  instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
  instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
}

function getMaskedContext(workInProgress, unmaskedContext) {
  var type = workInProgress.type;
  var contextTypes = type.contextTypes;
  if (!contextTypes) {
    return emptyObject;
  }

  // Avoid recreating masked context unless unmasked context has changed.
  // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
  // This may trigger infinite loops if componentWillReceiveProps calls setState.
  var instance = workInProgress.stateNode;
  if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
    return instance.__reactInternalMemoizedMaskedChildContext;
  }

  var context = {};
  for (var key in contextTypes) {
    context[key] = unmaskedContext[key];
  }

  {
    var name = getComponentName(workInProgress) || 'Unknown';
    checkPropTypes(contextTypes, context, 'context', name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
  }

  // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // Context is created before the class component is instantiated so check for instance.
  if (instance) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return context;
}

function hasContextChanged() {
  return didPerformWorkStackCursor.current;
}

function isContextConsumer(fiber) {
  return fiber.tag === ClassComponent && fiber.type.contextTypes != null;
}

function isContextProvider(fiber) {
  return fiber.tag === ClassComponent && fiber.type.childContextTypes != null;
}

function popContextProvider(fiber) {
  if (!isContextProvider(fiber)) {
    return;
  }

  pop(didPerformWorkStackCursor, fiber);
  pop(contextStackCursor, fiber);
}

function popTopLevelContextObject(fiber) {
  pop(didPerformWorkStackCursor, fiber);
  pop(contextStackCursor, fiber);
}

function pushTopLevelContextObject(fiber, context, didChange) {
  !(contextStackCursor.cursor == null) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  push(contextStackCursor, context, fiber);
  push(didPerformWorkStackCursor, didChange, fiber);
}

function processChildContext(fiber, parentContext) {
  var instance = fiber.stateNode;
  var childContextTypes = fiber.type.childContextTypes;

  // TODO (bvaughn) Replace this behavior with an invariant() in the future.
  // It has only been added in Fiber to match the (unintentional) behavior in Stack.
  if (typeof instance.getChildContext !== 'function') {
    {
      var componentName = getComponentName(fiber) || 'Unknown';

      if (!warnedAboutMissingGetChildContext[componentName]) {
        warnedAboutMissingGetChildContext[componentName] = true;
        warning(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
      }
    }
    return parentContext;
  }

  var childContext = void 0;
  {
    ReactDebugCurrentFiber.setCurrentPhase('getChildContext');
  }
  startPhaseTimer(fiber, 'getChildContext');
  childContext = instance.getChildContext();
  stopPhaseTimer();
  {
    ReactDebugCurrentFiber.setCurrentPhase(null);
  }
  for (var contextKey in childContext) {
    !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || 'Unknown', contextKey) : void 0;
  }
  {
    var name = getComponentName(fiber) || 'Unknown';
    checkPropTypes(childContextTypes, childContext, 'child context', name,
    // In practice, there is one case in which we won't get a stack. It's when
    // somebody calls unstable_renderSubtreeIntoContainer() and we process
    // context from the parent component instance. The stack will be missing
    // because it's outside of the reconciliation, and so the pointer has not
    // been set. This is rare and doesn't matter. We'll also remove that API.
    ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
  }

  return _assign({}, parentContext, childContext);
}

function pushContextProvider(workInProgress) {
  if (!isContextProvider(workInProgress)) {
    return false;
  }

  var instance = workInProgress.stateNode;
  // We push the context as early as possible to ensure stack integrity.
  // If the instance does not exist yet, we will push null at first,
  // and replace it on the stack later when invalidating the context.
  var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;

  // Remember the parent context so we can merge with it later.
  // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
  previousContext = contextStackCursor.current;
  push(contextStackCursor, memoizedMergedChildContext, workInProgress);
  push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);

  return true;
}

function invalidateContextProvider(workInProgress, didChange) {
  var instance = workInProgress.stateNode;
  !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  if (didChange) {
    // Merge parent and own context.
    // Skip this if we're not updating due to sCU.
    // This avoids unnecessarily recomputing memoized values.
    var mergedContext = processChildContext(workInProgress, previousContext);
    instance.__reactInternalMemoizedMergedChildContext = mergedContext;

    // Replace the old (or empty) context with the new one.
    // It is important to unwind the context in the reverse order.
    pop(didPerformWorkStackCursor, workInProgress);
    pop(contextStackCursor, workInProgress);
    // Now push the new context and mark that it has changed.
    push(contextStackCursor, mergedContext, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  } else {
    pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }
}

function resetContext() {
  previousContext = emptyObject;
  contextStackCursor.current = emptyObject;
  didPerformWorkStackCursor.current = false;
}

function findCurrentUnmaskedContext(fiber) {
  // Currently this is only used with renderSubtreeIntoContainer; not sure if it
  // makes sense elsewhere
  !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  var node = fiber;
  while (node.tag !== HostRoot) {
    if (isContextProvider(node)) {
      return node.stateNode.__reactInternalMemoizedMergedChildContext;
    }
    var parent = node['return'];
    !parent ? invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    node = parent;
  }
  return node.stateNode.context;
}

var NoWork = 0; // TODO: Use an opaque type once ESLint et al support the syntax

var Sync = 1;
var Never = 2147483647; // Max int32: Math.pow(2, 31) - 1

var UNIT_SIZE = 10;
var MAGIC_NUMBER_OFFSET = 2;

// 1 unit of expiration time represents 10ms.
function msToExpirationTime(ms) {
  // Always add an offset so that we don't clash with the magic number for NoWork.
  return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
}

function expirationTimeToMs(expirationTime) {
  return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
}

function ceiling(num, precision) {
  return ((num / precision | 0) + 1) * precision;
}

function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
  return ceiling(currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
}

var NoContext = 0;
var AsyncUpdates = 1;

{
  var hasBadMapPolyfill = false;
  try {
    var nonExtensibleObject = Object.preventExtensions({});
    /* eslint-disable no-new */
    
    /* eslint-enable no-new */
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

// A Fiber is work on a Component that needs to be done or was done. There can
// be more than one per component.


{
  var debugCounter = 1;
}

function FiberNode(tag, key, internalContextTag) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.type = null;
  this.stateNode = null;

  // Fiber
  this['return'] = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;

  this.ref = null;

  this.pendingProps = null;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;

  this.internalContextTag = internalContextTag;

  // Effects
  this.effectTag = NoEffect;
  this.nextEffect = null;

  this.firstEffect = null;
  this.lastEffect = null;

  this.expirationTime = NoWork;

  this.alternate = null;

  {
    this._debugID = debugCounter++;
    this._debugSource = null;
    this._debugOwner = null;
    this._debugIsCurrentlyTiming = false;
    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
}

// This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.
var createFiber = function (tag, key, internalContextTag) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, key, internalContextTag);
};

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

// This is used to create an alternate fiber to do work on.
function createWorkInProgress(current, pendingProps, expirationTime) {
  var workInProgress = current.alternate;
  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, current.key, current.internalContextTag);
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      workInProgress._debugID = current._debugID;
      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    // We already have an alternate.
    // Reset the effect tag.
    workInProgress.effectTag = NoEffect;

    // The effect list is no longer valid.
    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;
  }

  workInProgress.expirationTime = expirationTime;
  workInProgress.pendingProps = pendingProps;

  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue;

  // These will be overridden during the parent's reconciliation
  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  return workInProgress;
}

function createHostRootFiber() {
  var fiber = createFiber(HostRoot, null, NoContext);
  return fiber;
}

function createFiberFromElement(element, internalContextTag, expirationTime) {
  var owner = null;
  {
    owner = element._owner;
  }

  var fiber = void 0;
  var type = element.type,
      key = element.key;

  if (typeof type === 'function') {
    fiber = shouldConstruct(type) ? createFiber(ClassComponent, key, internalContextTag) : createFiber(IndeterminateComponent, key, internalContextTag);
    fiber.type = type;
    fiber.pendingProps = element.props;
  } else if (typeof type === 'string') {
    fiber = createFiber(HostComponent, key, internalContextTag);
    fiber.type = type;
    fiber.pendingProps = element.props;
  } else if (typeof type === 'object' && type !== null && typeof type.tag === 'number') {
    // Currently assumed to be a continuation and therefore is a fiber already.
    // TODO: The yield system is currently broken for updates in some cases.
    // The reified yield stores a fiber, but we don't know which fiber that is;
    // the current or a workInProgress? When the continuation gets rendered here
    // we don't know if we can reuse that fiber or if we need to clone it.
    // There is probably a clever way to restructure this.
    fiber = type;
    fiber.pendingProps = element.props;
  } else {
    var info = '';
    {
      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
      }
      var ownerName = owner ? getComponentName(owner) : null;
      if (ownerName) {
        info += '\n\nCheck the render method of `' + ownerName + '`.';
      }
    }
    invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
  }

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  fiber.expirationTime = expirationTime;

  return fiber;
}

function createFiberFromFragment(elements, internalContextTag, expirationTime, key) {
  var fiber = createFiber(Fragment, key, internalContextTag);
  fiber.pendingProps = elements;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromText(content, internalContextTag, expirationTime) {
  var fiber = createFiber(HostText, null, internalContextTag);
  fiber.pendingProps = content;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, NoContext);
  fiber.type = 'DELETED';
  return fiber;
}

function createFiberFromCall(call, internalContextTag, expirationTime) {
  var fiber = createFiber(CallComponent, call.key, internalContextTag);
  fiber.type = call.handler;
  fiber.pendingProps = call;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromReturn(returnNode, internalContextTag, expirationTime) {
  var fiber = createFiber(ReturnComponent, null, internalContextTag);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromPortal(portal, internalContextTag, expirationTime) {
  var fiber = createFiber(HostPortal, portal.key, internalContextTag);
  fiber.pendingProps = portal.children || [];
  fiber.expirationTime = expirationTime;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null, // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
}

function createFiberRoot(containerInfo, hydrate) {
  // Cyclic construction. This cheats the type system right now because
  // stateNode is any.
  var uninitializedFiber = createHostRootFiber();
  var root = {
    current: uninitializedFiber,
    containerInfo: containerInfo,
    pendingChildren: null,
    remainingExpirationTime: NoWork,
    isReadyForCommit: false,
    finishedWork: null,
    context: null,
    pendingContext: null,
    hydrate: hydrate,
    nextScheduledRoot: null
  };
  uninitializedFiber.stateNode = root;
  return root;
}

var onCommitFiberRoot = null;
var onCommitFiberUnmount = null;
var hasLoggedError = false;

function catchErrors(fn) {
  return function (arg) {
    try {
      return fn(arg);
    } catch (err) {
      if (true && !hasLoggedError) {
        hasLoggedError = true;
        warning(false, 'React DevTools encountered an error: %s', err);
      }
    }
  };
}

function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }
  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }
  if (!hook.supportsFiber) {
    {
      warning(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
    }
    // DevTools exists, even though it doesn't support Fiber.
    return true;
  }
  try {
    var rendererID = hook.inject(internals);
    // We have successfully injected, so now it is safe to set up hooks.
    onCommitFiberRoot = catchErrors(function (root) {
      return hook.onCommitFiberRoot(rendererID, root);
    });
    onCommitFiberUnmount = catchErrors(function (fiber) {
      return hook.onCommitFiberUnmount(rendererID, fiber);
    });
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      warning(false, 'React DevTools encountered an error: %s.', err);
    }
  }
  // DevTools exists
  return true;
}

function onCommitRoot(root) {
  if (typeof onCommitFiberRoot === 'function') {
    onCommitFiberRoot(root);
  }
}

function onCommitUnmount(fiber) {
  if (typeof onCommitFiberUnmount === 'function') {
    onCommitFiberUnmount(fiber);
  }
}

{
  var didWarnUpdateInsideUpdate = false;
}

// Callbacks are not validated until invocation


// Singly linked-list of updates. When an update is scheduled, it is added to
// the queue of the current fiber and the work-in-progress fiber. The two queues
// are separate but they share a persistent structure.
//
// During reconciliation, updates are removed from the work-in-progress fiber,
// but they remain on the current fiber. That ensures that if a work-in-progress
// is aborted, the aborted updates are recovered by cloning from current.
//
// The work-in-progress queue is always a subset of the current queue.
//
// When the tree is committed, the work-in-progress becomes the current.


function createUpdateQueue(baseState) {
  var queue = {
    baseState: baseState,
    expirationTime: NoWork,
    first: null,
    last: null,
    callbackList: null,
    hasForceUpdate: false,
    isInitialized: false
  };
  {
    queue.isProcessing = false;
  }
  return queue;
}

function insertUpdateIntoQueue(queue, update) {
  // Append the update to the end of the list.
  if (queue.last === null) {
    // Queue is empty
    queue.first = queue.last = update;
  } else {
    queue.last.next = update;
    queue.last = update;
  }
  if (queue.expirationTime === NoWork || queue.expirationTime > update.expirationTime) {
    queue.expirationTime = update.expirationTime;
  }
}

function insertUpdateIntoFiber(fiber, update) {
  // We'll have at least one and at most two distinct update queues.
  var alternateFiber = fiber.alternate;
  var queue1 = fiber.updateQueue;
  if (queue1 === null) {
    // TODO: We don't know what the base state will be until we begin work.
    // It depends on which fiber is the next current. Initialize with an empty
    // base state, then set to the memoizedState when rendering. Not super
    // happy with this approach.
    queue1 = fiber.updateQueue = createUpdateQueue(null);
  }

  var queue2 = void 0;
  if (alternateFiber !== null) {
    queue2 = alternateFiber.updateQueue;
    if (queue2 === null) {
      queue2 = alternateFiber.updateQueue = createUpdateQueue(null);
    }
  } else {
    queue2 = null;
  }
  queue2 = queue2 !== queue1 ? queue2 : null;

  // Warn if an update is scheduled from inside an updater function.
  {
    if ((queue1.isProcessing || queue2 !== null && queue2.isProcessing) && !didWarnUpdateInsideUpdate) {
      warning(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
      didWarnUpdateInsideUpdate = true;
    }
  }

  // If there's only one queue, add the update to that queue and exit.
  if (queue2 === null) {
    insertUpdateIntoQueue(queue1, update);
    return;
  }

  // If either queue is empty, we need to add to both queues.
  if (queue1.last === null || queue2.last === null) {
    insertUpdateIntoQueue(queue1, update);
    insertUpdateIntoQueue(queue2, update);
    return;
  }

  // If both lists are not empty, the last update is the same for both lists
  // because of structural sharing. So, we should only append to one of
  // the lists.
  insertUpdateIntoQueue(queue1, update);
  // But we still need to update the `last` pointer of queue2.
  queue2.last = update;
}

function getUpdateExpirationTime(fiber) {
  if (fiber.tag !== ClassComponent && fiber.tag !== HostRoot) {
    return NoWork;
  }
  var updateQueue = fiber.updateQueue;
  if (updateQueue === null) {
    return NoWork;
  }
  return updateQueue.expirationTime;
}

function getStateFromUpdate(update, instance, prevState, props) {
  var partialState = update.partialState;
  if (typeof partialState === 'function') {
    var updateFn = partialState;

    // Invoke setState callback an extra time to help detect side-effects.
    if (debugRenderPhaseSideEffects) {
      updateFn.call(instance, prevState, props);
    }

    return updateFn.call(instance, prevState, props);
  } else {
    return partialState;
  }
}

function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
  if (current !== null && current.updateQueue === queue) {
    // We need to create a work-in-progress queue, by cloning the current queue.
    var currentQueue = queue;
    queue = workInProgress.updateQueue = {
      baseState: currentQueue.baseState,
      expirationTime: currentQueue.expirationTime,
      first: currentQueue.first,
      last: currentQueue.last,
      isInitialized: currentQueue.isInitialized,
      // These fields are no longer valid because they were already committed.
      // Reset them.
      callbackList: null,
      hasForceUpdate: false
    };
  }

  {
    // Set this flag so we can warn if setState is called inside the update
    // function of another setState.
    queue.isProcessing = true;
  }

  // Reset the remaining expiration time. If we skip over any updates, we'll
  // increase this accordingly.
  queue.expirationTime = NoWork;

  // TODO: We don't know what the base state will be until we begin work.
  // It depends on which fiber is the next current. Initialize with an empty
  // base state, then set to the memoizedState when rendering. Not super
  // happy with this approach.
  var state = void 0;
  if (queue.isInitialized) {
    state = queue.baseState;
  } else {
    state = queue.baseState = workInProgress.memoizedState;
    queue.isInitialized = true;
  }
  var dontMutatePrevState = true;
  var update = queue.first;
  var didSkip = false;
  while (update !== null) {
    var updateExpirationTime = update.expirationTime;
    if (updateExpirationTime > renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      var remainingExpirationTime = queue.expirationTime;
      if (remainingExpirationTime === NoWork || remainingExpirationTime > updateExpirationTime) {
        // Update the remaining expiration time.
        queue.expirationTime = updateExpirationTime;
      }
      if (!didSkip) {
        didSkip = true;
        queue.baseState = state;
      }
      // Continue to the next update.
      update = update.next;
      continue;
    }

    // This update does have sufficient priority.

    // If no previous updates were skipped, drop this update from the queue by
    // advancing the head of the list.
    if (!didSkip) {
      queue.first = update.next;
      if (queue.first === null) {
        queue.last = null;
      }
    }

    // Process the update
    var _partialState = void 0;
    if (update.isReplace) {
      state = getStateFromUpdate(update, instance, state, props);
      dontMutatePrevState = true;
    } else {
      _partialState = getStateFromUpdate(update, instance, state, props);
      if (_partialState) {
        if (dontMutatePrevState) {
          // $FlowFixMe: Idk how to type this properly.
          state = _assign({}, state, _partialState);
        } else {
          state = _assign(state, _partialState);
        }
        dontMutatePrevState = false;
      }
    }
    if (update.isForced) {
      queue.hasForceUpdate = true;
    }
    if (update.callback !== null) {
      // Append to list of callbacks.
      var _callbackList = queue.callbackList;
      if (_callbackList === null) {
        _callbackList = queue.callbackList = [];
      }
      _callbackList.push(update);
    }
    update = update.next;
  }

  if (queue.callbackList !== null) {
    workInProgress.effectTag |= Callback;
  } else if (queue.first === null && !queue.hasForceUpdate) {
    // The queue is empty. We can reset it.
    workInProgress.updateQueue = null;
  }

  if (!didSkip) {
    didSkip = true;
    queue.baseState = state;
  }

  {
    // No longer processing.
    queue.isProcessing = false;
  }

  return state;
}

function commitCallbacks(queue, context) {
  var callbackList = queue.callbackList;
  if (callbackList === null) {
    return;
  }
  // Set the list to null to make sure they don't get called more than once.
  queue.callbackList = null;
  for (var i = 0; i < callbackList.length; i++) {
    var update = callbackList[i];
    var _callback = update.callback;
    // This update might be processed again. Clear the callback so it's only
    // called once.
    update.callback = null;
    !(typeof _callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback) : void 0;
    _callback.call(context);
  }
}

var fakeInternalInstance = {};
var isArray = Array.isArray;

{
  var didWarnAboutStateAssignmentForComponent = {};

  var warnOnInvalidCallback = function (callback, callerName) {
    warning(callback === null || typeof callback === 'function', '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
  };

  // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.
  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
    }
  });
  Object.freeze(fakeInternalInstance);
}

var ReactFiberClassComponent = function (scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
  // Class component state updater
  var updater = {
    isMounted: isMounted,
    enqueueSetState: function (instance, partialState, callback) {
      var fiber = get(instance);
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'setState');
      }
      var expirationTime = computeExpirationForFiber(fiber);
      var update = {
        expirationTime: expirationTime,
        partialState: partialState,
        callback: callback,
        isReplace: false,
        isForced: false,
        nextCallback: null,
        next: null
      };
      insertUpdateIntoFiber(fiber, update);
      scheduleWork(fiber, expirationTime);
    },
    enqueueReplaceState: function (instance, state, callback) {
      var fiber = get(instance);
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'replaceState');
      }
      var expirationTime = computeExpirationForFiber(fiber);
      var update = {
        expirationTime: expirationTime,
        partialState: state,
        callback: callback,
        isReplace: true,
        isForced: false,
        nextCallback: null,
        next: null
      };
      insertUpdateIntoFiber(fiber, update);
      scheduleWork(fiber, expirationTime);
    },
    enqueueForceUpdate: function (instance, callback) {
      var fiber = get(instance);
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'forceUpdate');
      }
      var expirationTime = computeExpirationForFiber(fiber);
      var update = {
        expirationTime: expirationTime,
        partialState: null,
        callback: callback,
        isReplace: false,
        isForced: true,
        nextCallback: null,
        next: null
      };
      insertUpdateIntoFiber(fiber, update);
      scheduleWork(fiber, expirationTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
    if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {
      // If the workInProgress already has an Update effect, return true
      return true;
    }

    var instance = workInProgress.stateNode;
    var type = workInProgress.type;
    if (typeof instance.shouldComponentUpdate === 'function') {
      startPhaseTimer(workInProgress, 'shouldComponentUpdate');
      var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
      stopPhaseTimer();

      // Simulate an async bailout/interruption by invoking lifecycle twice.
      if (debugRenderPhaseSideEffects) {
        instance.shouldComponentUpdate(newProps, newState, newContext);
      }

      {
        warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(workInProgress) || 'Unknown');
      }

      return shouldUpdate;
    }

    if (type.prototype && type.prototype.isPureReactComponent) {
      return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
    }

    return true;
  }

  function checkClassInstance(workInProgress) {
    var instance = workInProgress.stateNode;
    var type = workInProgress.type;
    {
      var name = getComponentName(workInProgress);
      var renderPresent = instance.render;

      if (!renderPresent) {
        if (type.prototype && typeof type.prototype.render === 'function') {
          warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
        } else {
          warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
        }
      }

      var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
      warning(noGetInitialStateOnES6, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
      var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
      warning(noGetDefaultPropsOnES6, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
      var noInstancePropTypes = !instance.propTypes;
      warning(noInstancePropTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
      var noInstanceContextTypes = !instance.contextTypes;
      warning(noInstanceContextTypes, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
      var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
      warning(noComponentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
      if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
        warning(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(workInProgress) || 'A pure component');
      }
      var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
      warning(noComponentDidUnmount, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
      var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
      warning(noComponentDidReceiveProps, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
      var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
      warning(noComponentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
      var hasMutatedProps = instance.props !== workInProgress.pendingProps;
      warning(instance.props === undefined || !hasMutatedProps, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
      var noInstanceDefaultProps = !instance.defaultProps;
      warning(noInstanceDefaultProps, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
    }

    var state = instance.state;
    if (state && (typeof state !== 'object' || isArray(state))) {
      warning(false, '%s.state: must be set to an object or null', getComponentName(workInProgress));
    }
    if (typeof instance.getChildContext === 'function') {
      warning(typeof workInProgress.type.childContextTypes === 'object', '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', getComponentName(workInProgress));
    }
  }

  function resetInputPointers(workInProgress, instance) {
    instance.props = workInProgress.memoizedProps;
    instance.state = workInProgress.memoizedState;
  }

  function adoptClassInstance(workInProgress, instance) {
    instance.updater = updater;
    workInProgress.stateNode = instance;
    // The instance needs access to the fiber so that it can schedule updates
    set(instance, workInProgress);
    {
      instance._reactInternalInstance = fakeInternalInstance;
    }
  }

  function constructClassInstance(workInProgress, props) {
    var ctor = workInProgress.type;
    var unmaskedContext = getUnmaskedContext(workInProgress);
    var needsContext = isContextConsumer(workInProgress);
    var context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;
    var instance = new ctor(props, context);
    adoptClassInstance(workInProgress, instance);

    // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // ReactFiberContext usually updates this cache but can't for newly-created instances.
    if (needsContext) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return instance;
  }

  function callComponentWillMount(workInProgress, instance) {
    startPhaseTimer(workInProgress, 'componentWillMount');
    var oldState = instance.state;
    instance.componentWillMount();
    stopPhaseTimer();

    // Simulate an async bailout/interruption by invoking lifecycle twice.
    if (debugRenderPhaseSideEffects) {
      instance.componentWillMount();
    }

    if (oldState !== instance.state) {
      {
        warning(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress));
      }
      updater.enqueueReplaceState(instance, instance.state, null);
    }
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
    startPhaseTimer(workInProgress, 'componentWillReceiveProps');
    var oldState = instance.state;
    instance.componentWillReceiveProps(newProps, newContext);
    stopPhaseTimer();

    // Simulate an async bailout/interruption by invoking lifecycle twice.
    if (debugRenderPhaseSideEffects) {
      instance.componentWillReceiveProps(newProps, newContext);
    }

    if (instance.state !== oldState) {
      {
        var componentName = getComponentName(workInProgress) || 'Component';
        if (!didWarnAboutStateAssignmentForComponent[componentName]) {
          warning(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
          didWarnAboutStateAssignmentForComponent[componentName] = true;
        }
      }
      updater.enqueueReplaceState(instance, instance.state, null);
    }
  }

  // Invokes the mount life-cycles on a previously never rendered instance.
  function mountClassInstance(workInProgress, renderExpirationTime) {
    var current = workInProgress.alternate;

    {
      checkClassInstance(workInProgress);
    }

    var instance = workInProgress.stateNode;
    var state = instance.state || null;

    var props = workInProgress.pendingProps;
    !props ? invariant(false, 'There must be pending props for an initial mount. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    var unmaskedContext = getUnmaskedContext(workInProgress);

    instance.props = props;
    instance.state = workInProgress.memoizedState = state;
    instance.refs = emptyObject;
    instance.context = getMaskedContext(workInProgress, unmaskedContext);

    if (enableAsyncSubtreeAPI && workInProgress.type != null && workInProgress.type.prototype != null && workInProgress.type.prototype.unstable_isAsyncReactComponent === true) {
      workInProgress.internalContextTag |= AsyncUpdates;
    }

    if (typeof instance.componentWillMount === 'function') {
      callComponentWillMount(workInProgress, instance);
      // If we had additional state updates during this life-cycle, let's
      // process them now.
      var updateQueue = workInProgress.updateQueue;
      if (updateQueue !== null) {
        instance.state = processUpdateQueue(current, workInProgress, updateQueue, instance, props, renderExpirationTime);
      }
    }
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  }

  // Called on a preexisting class instance. Returns false if a resumed render
  // could be reused.
  // function resumeMountClassInstance(
  //   workInProgress: Fiber,
  //   priorityLevel: PriorityLevel,
  // ): boolean {
  //   const instance = workInProgress.stateNode;
  //   resetInputPointers(workInProgress, instance);

  //   let newState = workInProgress.memoizedState;
  //   let newProps = workInProgress.pendingProps;
  //   if (!newProps) {
  //     // If there isn't any new props, then we'll reuse the memoized props.
  //     // This could be from already completed work.
  //     newProps = workInProgress.memoizedProps;
  //     invariant(
  //       newProps != null,
  //       'There should always be pending or memoized props. This error is ' +
  //         'likely caused by a bug in React. Please file an issue.',
  //     );
  //   }
  //   const newUnmaskedContext = getUnmaskedContext(workInProgress);
  //   const newContext = getMaskedContext(workInProgress, newUnmaskedContext);

  //   const oldContext = instance.context;
  //   const oldProps = workInProgress.memoizedProps;

  //   if (
  //     typeof instance.componentWillReceiveProps === 'function' &&
  //     (oldProps !== newProps || oldContext !== newContext)
  //   ) {
  //     callComponentWillReceiveProps(
  //       workInProgress,
  //       instance,
  //       newProps,
  //       newContext,
  //     );
  //   }

  //   // Process the update queue before calling shouldComponentUpdate
  //   const updateQueue = workInProgress.updateQueue;
  //   if (updateQueue !== null) {
  //     newState = processUpdateQueue(
  //       workInProgress,
  //       updateQueue,
  //       instance,
  //       newState,
  //       newProps,
  //       priorityLevel,
  //     );
  //   }

  //   // TODO: Should we deal with a setState that happened after the last
  //   // componentWillMount and before this componentWillMount? Probably
  //   // unsupported anyway.

  //   if (
  //     !checkShouldComponentUpdate(
  //       workInProgress,
  //       workInProgress.memoizedProps,
  //       newProps,
  //       workInProgress.memoizedState,
  //       newState,
  //       newContext,
  //     )
  //   ) {
  //     // Update the existing instance's state, props, and context pointers even
  //     // though we're bailing out.
  //     instance.props = newProps;
  //     instance.state = newState;
  //     instance.context = newContext;
  //     return false;
  //   }

  //   // Update the input pointers now so that they are correct when we call
  //   // componentWillMount
  //   instance.props = newProps;
  //   instance.state = newState;
  //   instance.context = newContext;

  //   if (typeof instance.componentWillMount === 'function') {
  //     callComponentWillMount(workInProgress, instance);
  //     // componentWillMount may have called setState. Process the update queue.
  //     const newUpdateQueue = workInProgress.updateQueue;
  //     if (newUpdateQueue !== null) {
  //       newState = processUpdateQueue(
  //         workInProgress,
  //         newUpdateQueue,
  //         instance,
  //         newState,
  //         newProps,
  //         priorityLevel,
  //       );
  //     }
  //   }

  //   if (typeof instance.componentDidMount === 'function') {
  //     workInProgress.effectTag |= Update;
  //   }

  //   instance.state = newState;

  //   return true;
  // }

  // Invokes the update life-cycles and returns false if it shouldn't rerender.
  function updateClassInstance(current, workInProgress, renderExpirationTime) {
    var instance = workInProgress.stateNode;
    resetInputPointers(workInProgress, instance);

    var oldProps = workInProgress.memoizedProps;
    var newProps = workInProgress.pendingProps;
    if (!newProps) {
      // If there aren't any new props, then we'll reuse the memoized props.
      // This could be from already completed work.
      newProps = oldProps;
      !(newProps != null) ? invariant(false, 'There should always be pending or memoized props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    }
    var oldContext = instance.context;
    var newUnmaskedContext = getUnmaskedContext(workInProgress);
    var newContext = getMaskedContext(workInProgress, newUnmaskedContext);

    // Note: During these life-cycles, instance.props/instance.state are what
    // ever the previously attempted to render - not the "current". However,
    // during componentDidUpdate we pass the "current" props.

    if (typeof instance.componentWillReceiveProps === 'function' && (oldProps !== newProps || oldContext !== newContext)) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
    }

    // Compute the next state using the memoized state and the update queue.
    var oldState = workInProgress.memoizedState;
    // TODO: Previous state can be null.
    var newState = void 0;
    if (workInProgress.updateQueue !== null) {
      newState = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
    } else {
      newState = oldState;
    }

    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
      // If an update was already in progress, we should schedule an Update
      // effect even though we're bailing out, so that cWU/cDU are called.
      if (typeof instance.componentDidUpdate === 'function') {
        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.effectTag |= Update;
        }
      }
      return false;
    }

    var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

    if (shouldUpdate) {
      if (typeof instance.componentWillUpdate === 'function') {
        startPhaseTimer(workInProgress, 'componentWillUpdate');
        instance.componentWillUpdate(newProps, newState, newContext);
        stopPhaseTimer();

        // Simulate an async bailout/interruption by invoking lifecycle twice.
        if (debugRenderPhaseSideEffects) {
          instance.componentWillUpdate(newProps, newState, newContext);
        }
      }
      if (typeof instance.componentDidUpdate === 'function') {
        workInProgress.effectTag |= Update;
      }
    } else {
      // If an update was already in progress, we should schedule an Update
      // effect even though we're bailing out, so that cWU/cDU are called.
      if (typeof instance.componentDidUpdate === 'function') {
        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.effectTag |= Update;
        }
      }

      // If shouldComponentUpdate returned false, we should still update the
      // memoized props/state to indicate that this work can be reused.
      memoizeProps(workInProgress, newProps);
      memoizeState(workInProgress, newState);
    }

    // Update the existing instance's state, props, and context pointers even
    // if shouldComponentUpdate returns false.
    instance.props = newProps;
    instance.state = newState;
    instance.context = newContext;

    return shouldUpdate;
  }

  return {
    adoptClassInstance: adoptClassInstance,
    constructClassInstance: constructClassInstance,
    mountClassInstance: mountClassInstance,
    // resumeMountClassInstance,
    updateClassInstance: updateClassInstance
  };
};

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol['for'];

var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;
var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;
var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';

function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable === 'undefined') {
    return null;
  }
  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }
  return null;
}

var getCurrentFiberStackAddendum$1 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;


{
  var didWarnAboutMaps = false;
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */
  var ownerHasKeyUseWarning = {};
  var ownerHasFunctionTypeWarning = {};

  var warnForMissingKey = function (child) {
    if (child === null || typeof child !== 'object') {
      return;
    }
    if (!child._store || child._store.validated || child.key != null) {
      return;
    }
    !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    child._store.validated = true;

    var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + (getCurrentFiberStackAddendum$1() || '');
    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }
    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

    warning(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.%s', getCurrentFiberStackAddendum$1());
  };
}

var isArray$1 = Array.isArray;

function coerceRef(current, element) {
  var mixedRef = element.ref;
  if (mixedRef !== null && typeof mixedRef !== 'function') {
    if (element._owner) {
      var owner = element._owner;
      var inst = void 0;
      if (owner) {
        var ownerFiber = owner;
        !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Stateless function components cannot have refs.') : void 0;
        inst = ownerFiber.stateNode;
      }
      !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
      var stringRef = '' + mixedRef;
      // Check if previous string ref matches new string ref
      if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {
        return current.ref;
      }
      var ref = function (value) {
        var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };
      ref._stringRef = stringRef;
      return ref;
    } else {
      !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function or a string.') : void 0;
      !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. You may have multiple copies of React loaded. (details: https://fb.me/react-refs-must-have-owner).', mixedRef) : void 0;
    }
  }
  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    var addendum = '';
    {
      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + (getCurrentFiberStackAddendum$1() || '');
    }
    invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
  }
}

function warnOnFunctionType() {
  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + (getCurrentFiberStackAddendum$1() || '');

  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
    return;
  }
  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

  warning(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.%s', getCurrentFiberStackAddendum$1() || '');
}

// This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.
function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    }
    // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.
    var last = returnFiber.lastEffect;
    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    childToDelete.nextEffect = null;
    childToDelete.effectTag = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    }

    // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.
    var childToDelete = currentFirstChild;
    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }
    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    var existingChildren = new Map();

    var existingChild = currentFirstChild;
    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }
      existingChild = existingChild.sibling;
    }
    return existingChildren;
  }

  function useFiber(fiber, pendingProps, expirationTime) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;
    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }
    var current = newFiber.alternate;
    if (current !== null) {
      var oldIndex = current.index;
      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.effectTag = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.effectTag = Placement;
    }
    return newFiber;
  }

  function updateTextNode(returnFiber, current, textContent, expirationTime) {
    if (current === null || current.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
      created['return'] = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, textContent, expirationTime);
      existing['return'] = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current, element, expirationTime) {
    if (current !== null && current.type === element.type) {
      // Move based on index
      var existing = useFiber(current, element.props, expirationTime);
      existing.ref = coerceRef(current, element);
      existing['return'] = returnFiber;
      {
        existing._debugSource = element._source;
        existing._debugOwner = element._owner;
      }
      return existing;
    } else {
      // Insert
      var created = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);
      created.ref = coerceRef(current, element);
      created['return'] = returnFiber;
      return created;
    }
  }

  function updateCall(returnFiber, current, call, expirationTime) {
    // TODO: Should this also compare handler to determine whether to reuse?
    if (current === null || current.tag !== CallComponent) {
      // Insert
      var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
      created['return'] = returnFiber;
      return created;
    } else {
      // Move based on index
      var existing = useFiber(current, call, expirationTime);
      existing['return'] = returnFiber;
      return existing;
    }
  }

  function updateReturn(returnFiber, current, returnNode, expirationTime) {
    if (current === null || current.tag !== ReturnComponent) {
      // Insert
      var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
      created.type = returnNode.value;
      created['return'] = returnFiber;
      return created;
    } else {
      // Move based on index
      var existing = useFiber(current, null, expirationTime);
      existing.type = returnNode.value;
      existing['return'] = returnFiber;
      return existing;
    }
  }

  function updatePortal(returnFiber, current, portal, expirationTime) {
    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
      created['return'] = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, portal.children || [], expirationTime);
      existing['return'] = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current, fragment, expirationTime, key) {
    if (current === null || current.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.internalContextTag, expirationTime, key);
      created['return'] = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, fragment, expirationTime);
      existing['return'] = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.internalContextTag, expirationTime);
      created['return'] = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.type === REACT_FRAGMENT_TYPE) {
              var _created = createFiberFromFragment(newChild.props.children, returnFiber.internalContextTag, expirationTime, newChild.key);
              _created['return'] = returnFiber;
              return _created;
            } else {
              var _created2 = createFiberFromElement(newChild, returnFiber.internalContextTag, expirationTime);
              _created2.ref = coerceRef(null, newChild);
              _created2['return'] = returnFiber;
              return _created2;
            }
          }

        case REACT_CALL_TYPE:
          {
            var _created3 = createFiberFromCall(newChild, returnFiber.internalContextTag, expirationTime);
            _created3['return'] = returnFiber;
            return _created3;
          }

        case REACT_RETURN_TYPE:
          {
            var _created4 = createFiberFromReturn(newChild, returnFiber.internalContextTag, expirationTime);
            _created4.type = newChild.value;
            _created4['return'] = returnFiber;
            return _created4;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created5 = createFiberFromPortal(newChild, returnFiber.internalContextTag, expirationTime);
            _created5['return'] = returnFiber;
            return _created5;
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _created6 = createFiberFromFragment(newChild, returnFiber.internalContextTag, expirationTime, null);
        _created6['return'] = returnFiber;
        return _created6;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
    // Update the fiber if the keys match, otherwise return null.

    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }
      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
              }
              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_CALL_TYPE:
          {
            if (newChild.key === key) {
              return updateCall(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_RETURN_TYPE:
          {
            // Returns don't have keys. If the previous node is implicitly keyed
            // we can continue to replace it without aborting even if it is not a
            // yield.
            if (key === null) {
              return updateReturn(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
            }
            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
          }

        case REACT_CALL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            return updateCall(returnFiber, _matchedFiber2, newChild, expirationTime);
          }

        case REACT_RETURN_TYPE:
          {
            // Returns don't have keys, so we neither have to check the old nor
            // new node for the key. If both are returns, they match.
            var _matchedFiber3 = existingChildren.get(newIdx) || null;
            return updateReturn(returnFiber, _matchedFiber3, newChild, expirationTime);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber4 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            return updatePortal(returnFiber, _matchedFiber4, newChild, expirationTime);
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber5 = existingChildren.get(newIdx) || null;
        return updateFragment(returnFiber, _matchedFiber5, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  /**
   * Warns if there is a duplicate or missing key
   */
  function warnOnInvalidKey(child, knownKeys) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }
      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_CALL_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child);
          var key = child.key;
          if (typeof key !== 'string') {
            break;
          }
          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }
          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }
          warning(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.%s', key, getCurrentFiberStackAddendum$1());
          break;
        default:
          break;
      }
    }
    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
    // This algorithm can't optimize by searching from boths ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.

    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.

    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.

    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.

    {
      // First, validate keys.
      var knownKeys = null;
      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;

    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }
      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }
        break;
      }
      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }
      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
        if (!_newFiber) {
          continue;
        }
        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }
        previousNewFiber = _newFiber;
      }
      return resultingFirstChild;
    }

    // Add all children to a key map for quick lookups.
    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

    // Keep scanning and use the map to restore deleted items as moves.
    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
      if (_newFiber2) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren['delete'](_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }
        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }
        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.

    var iteratorFn = getIteratorFn(newChildrenIterable);
    !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    {
      // Warn about using Maps as children
      if (typeof newChildrenIterable.entries === 'function') {
        var possibleMap = newChildrenIterable;
        if (possibleMap.entries === iteratorFn) {
          warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getCurrentFiberStackAddendum$1());
          didWarnAboutMaps = true;
        }
      }

      // First, validate keys.
      // We'll get a different iterator later for the main pass.
      var _newChildren = iteratorFn.call(newChildrenIterable);
      if (_newChildren) {
        var knownKeys = null;
        var _step = _newChildren.next();
        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);
    !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;

    var resultingFirstChild = null;
    var previousNewFiber = null;

    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    var step = newChildren.next();
    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }
      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (!oldFiber) {
          oldFiber = nextOldFiber;
        }
        break;
      }
      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }
      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
        if (_newFiber3 === null) {
          continue;
        }
        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }
        previousNewFiber = _newFiber3;
      }
      return resultingFirstChild;
    }

    // Add all children to a key map for quick lookups.
    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

    // Keep scanning and use the map to restore deleted items as moves.
    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren['delete'](_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }
        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }
        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent, expirationTime);
      existing['return'] = returnFiber;
      return existing;
    }
    // The existing first child is not a text node so we need to create one
    // and delete the existing ones.
    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
    created['return'] = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
    var key = element.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
          existing.ref = coerceRef(child, element);
          existing['return'] = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.internalContextTag, expirationTime, element.key);
      created['return'] = returnFiber;
      return created;
    } else {
      var _created7 = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);
      _created7.ref = coerceRef(currentFirstChild, element);
      _created7['return'] = returnFiber;
      return _created7;
    }
  }

  function reconcileSingleCall(returnFiber, currentFirstChild, call, expirationTime) {
    var key = call.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === CallComponent) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, call, expirationTime);
          existing['return'] = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
    created['return'] = returnFiber;
    return created;
  }

  function reconcileSingleReturn(returnFiber, currentFirstChild, returnNode, expirationTime) {
    // There's no need to check for keys on yields since they're stateless.
    var child = currentFirstChild;
    if (child !== null) {
      if (child.tag === ReturnComponent) {
        deleteRemainingChildren(returnFiber, child.sibling);
        var existing = useFiber(child, null, expirationTime);
        existing.type = returnNode.value;
        existing['return'] = returnFiber;
        return existing;
      } else {
        deleteRemainingChildren(returnFiber, child);
      }
    }

    var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
    created.type = returnNode.value;
    created['return'] = returnFiber;
    return created;
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
    var key = portal.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || [], expirationTime);
          existing['return'] = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
    created['return'] = returnFiber;
    return created;
  }

  // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.
  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.

    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    if (typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null) {
      newChild = newChild.props.children;
    }

    // Handle object types
    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

        case REACT_CALL_TYPE:
          return placeSingleChild(reconcileSingleCall(returnFiber, currentFirstChild, newChild, expirationTime));
        case REACT_RETURN_TYPE:
          return placeSingleChild(reconcileSingleReturn(returnFiber, currentFirstChild, newChild, expirationTime));
        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
    }

    if (isArray$1(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }
    if (typeof newChild === 'undefined') {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
          {
            {
              var instance = returnFiber.stateNode;
              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough
        case FunctionalComponent:
          {
            var Component = returnFiber.type;
            invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
          }
      }
    }

    // Remaining cases are all treated as empty.
    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);

function cloneChildFibers(current, workInProgress) {
  !(current === null || workInProgress.child === current.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
  workInProgress.child = newChild;

  newChild['return'] = workInProgress;
  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
    newChild['return'] = workInProgress;
  }
  newChild.sibling = null;
}

{
  var warnedAboutStatelessRefs = {};
}

var ReactFiberBeginWork = function (config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
  var shouldSetTextContent = config.shouldSetTextContent,
      useSyncScheduling = config.useSyncScheduling,
      shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;
  var pushHostContext = hostContext.pushHostContext,
      pushHostContainer = hostContext.pushHostContainer;
  var enterHydrationState = hydrationContext.enterHydrationState,
      resetHydrationState = hydrationContext.resetHydrationState,
      tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;

  var _ReactFiberClassCompo = ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState),
      adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
      constructClassInstance = _ReactFiberClassCompo.constructClassInstance,
      mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
      updateClassInstance = _ReactFiberClassCompo.updateClassInstance;

  // TODO: Remove this and use reconcileChildrenAtExpirationTime directly.


  function reconcileChildren(current, workInProgress, nextChildren) {
    reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
  }

  function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
    if (current === null) {
      // If this is a fresh new component that hasn't been rendered yet, we
      // won't update its child set by applying minimal side-effects. Instead,
      // we will add them all to the child before it gets rendered. That means
      // we can optimize this reconciliation pass by not tracking side-effects.
      workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    } else {
      // If the current child is the same as the work in progress, it means that
      // we haven't yet started any work on these children. Therefore, we use
      // the clone algorithm to create a copy of all the current children.

      // If we had any progressed work already, that is invalid at this point so
      // let's throw it out.
      workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
    }
  }

  function updateFragment(current, workInProgress) {
    var nextChildren = workInProgress.pendingProps;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
      if (nextChildren === null) {
        nextChildren = workInProgress.memoizedProps;
      }
    } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextChildren);
    return workInProgress.child;
  }

  function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (ref !== null && (!current || current.ref !== ref)) {
      // Schedule a Ref effect
      workInProgress.effectTag |= Ref;
    }
  }

  function updateFunctionalComponent(current, workInProgress) {
    var fn = workInProgress.type;
    var nextProps = workInProgress.pendingProps;

    var memoizedProps = workInProgress.memoizedProps;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
      if (nextProps === null) {
        nextProps = memoizedProps;
      }
    } else {
      if (nextProps === null || memoizedProps === nextProps) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress);
      }
      // TODO: consider bringing fn.shouldComponentUpdate() back.
      // It used to be here.
    }

    var unmaskedContext = getUnmaskedContext(workInProgress);
    var context = getMaskedContext(workInProgress, unmaskedContext);

    var nextChildren;

    {
      ReactCurrentOwner.current = workInProgress;
      ReactDebugCurrentFiber.setCurrentPhase('render');
      nextChildren = fn(nextProps, context);
      ReactDebugCurrentFiber.setCurrentPhase(null);
    }
    // React DevTools reads this flag.
    workInProgress.effectTag |= PerformedWork;
    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextProps);
    return workInProgress.child;
  }

  function updateClassComponent(current, workInProgress, renderExpirationTime) {
    // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.
    var hasContext = pushContextProvider(workInProgress);

    var shouldUpdate = void 0;
    if (current === null) {
      if (!workInProgress.stateNode) {
        // In the initial pass we might need to construct the instance.
        constructClassInstance(workInProgress, workInProgress.pendingProps);
        mountClassInstance(workInProgress, renderExpirationTime);
        shouldUpdate = true;
      } else {
        invariant(false, 'Resuming work not yet implemented.');
        // In a resume, we'll already have an instance we can reuse.
        // shouldUpdate = resumeMountClassInstance(workInProgress, renderExpirationTime);
      }
    } else {
      shouldUpdate = updateClassInstance(current, workInProgress, renderExpirationTime);
    }
    return finishClassComponent(current, workInProgress, shouldUpdate, hasContext);
  }

  function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
    // Refs should update even if shouldComponentUpdate returns false
    markRef(current, workInProgress);

    if (!shouldUpdate) {
      // Context providers should defer to sCU for rendering
      if (hasContext) {
        invalidateContextProvider(workInProgress, false);
      }

      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }

    var instance = workInProgress.stateNode;

    // Rerender
    ReactCurrentOwner.current = workInProgress;
    var nextChildren = void 0;
    {
      ReactDebugCurrentFiber.setCurrentPhase('render');
      nextChildren = instance.render();
      if (debugRenderPhaseSideEffects) {
        instance.render();
      }
      ReactDebugCurrentFiber.setCurrentPhase(null);
    }
    // React DevTools reads this flag.
    workInProgress.effectTag |= PerformedWork;
    reconcileChildren(current, workInProgress, nextChildren);
    // Memoize props and state using the values we just used to render.
    // TODO: Restructure so we never read values from the instance.
    memoizeState(workInProgress, instance.state);
    memoizeProps(workInProgress, instance.props);

    // The context might have changed so we need to recalculate it.
    if (hasContext) {
      invalidateContextProvider(workInProgress, true);
    }

    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    if (root.pendingContext) {
      pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
    } else if (root.context) {
      // Should always be set
      pushTopLevelContextObject(workInProgress, root.context, false);
    }
    pushHostContainer(workInProgress, root.containerInfo);
  }

  function updateHostRoot(current, workInProgress, renderExpirationTime) {
    pushHostRootContext(workInProgress);
    var updateQueue = workInProgress.updateQueue;
    if (updateQueue !== null) {
      var prevState = workInProgress.memoizedState;
      var state = processUpdateQueue(current, workInProgress, updateQueue, null, null, renderExpirationTime);
      if (prevState === state) {
        // If the state is the same as before, that's a bailout because we had
        // no work that expires at this time.
        resetHydrationState();
        return bailoutOnAlreadyFinishedWork(current, workInProgress);
      }
      var element = state.element;
      var root = workInProgress.stateNode;
      if ((current === null || current.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
        // If we don't have any current children this might be the first pass.
        // We always try to hydrate. If this isn't a hydration pass there won't
        // be any children to hydrate which is effectively the same thing as
        // not hydrating.

        // This is a bit of a hack. We track the host root as a placement to
        // know that we're currently in a mounting state. That way isMounted
        // works as expected. We must reset this before committing.
        // TODO: Delete this when we delete isMounted and findDOMNode.
        workInProgress.effectTag |= Placement;

        // Ensure that children mount into this root without tracking
        // side-effects. This ensures that we don't store Placement effects on
        // nodes that will be hydrated.
        workInProgress.child = mountChildFibers(workInProgress, null, element, renderExpirationTime);
      } else {
        // Otherwise reset hydration state in case we aborted and resumed another
        // root.
        resetHydrationState();
        reconcileChildren(current, workInProgress, element);
      }
      memoizeState(workInProgress, state);
      return workInProgress.child;
    }
    resetHydrationState();
    // If there is no update queue, that's a bailout because the root has no props.
    return bailoutOnAlreadyFinishedWork(current, workInProgress);
  }

  function updateHostComponent(current, workInProgress, renderExpirationTime) {
    pushHostContext(workInProgress);

    if (current === null) {
      tryToClaimNextHydratableInstance(workInProgress);
    }

    var type = workInProgress.type;
    var memoizedProps = workInProgress.memoizedProps;
    var nextProps = workInProgress.pendingProps;
    if (nextProps === null) {
      nextProps = memoizedProps;
      !(nextProps !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    }
    var prevProps = current !== null ? current.memoizedProps : null;

    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
    } else if (nextProps === null || memoizedProps === nextProps) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }

    var nextChildren = nextProps.children;
    var isDirectTextChild = shouldSetTextContent(type, nextProps);

    if (isDirectTextChild) {
      // We special case a direct text child of a host node. This is a common
      // case. We won't handle it as a reified child. We will instead handle
      // this in the host environment that also have access to this prop. That
      // avoids allocating another HostText fiber and traversing it.
      nextChildren = null;
    } else if (prevProps && shouldSetTextContent(type, prevProps)) {
      // If we're switching from a direct text child to a normal child, or to
      // empty, we need to schedule the text content to be reset.
      workInProgress.effectTag |= ContentReset;
    }

    markRef(current, workInProgress);

    // Check the host config to see if the children are offscreen/hidden.
    if (renderExpirationTime !== Never && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps)) {
      // Down-prioritize the children.
      workInProgress.expirationTime = Never;
      // Bailout and come back to this fiber later.
      return null;
    }

    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextProps);
    return workInProgress.child;
  }

  function updateHostText(current, workInProgress) {
    if (current === null) {
      tryToClaimNextHydratableInstance(workInProgress);
    }
    var nextProps = workInProgress.pendingProps;
    if (nextProps === null) {
      nextProps = workInProgress.memoizedProps;
    }
    memoizeProps(workInProgress, nextProps);
    // Nothing to do here. This is terminal. We'll do the completion step
    // immediately after.
    return null;
  }

  function mountIndeterminateComponent(current, workInProgress, renderExpirationTime) {
    !(current === null) ? invariant(false, 'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    var fn = workInProgress.type;
    var props = workInProgress.pendingProps;
    var unmaskedContext = getUnmaskedContext(workInProgress);
    var context = getMaskedContext(workInProgress, unmaskedContext);

    var value;

    {
      if (fn.prototype && typeof fn.prototype.render === 'function') {
        var componentName = getComponentName(workInProgress);
        warning(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
      }
      ReactCurrentOwner.current = workInProgress;
      value = fn(props, context);
    }
    // React DevTools reads this flag.
    workInProgress.effectTag |= PerformedWork;

    if (typeof value === 'object' && value !== null && typeof value.render === 'function') {
      // Proceed under the assumption that this is a class instance
      workInProgress.tag = ClassComponent;

      // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.
      var hasContext = pushContextProvider(workInProgress);
      adoptClassInstance(workInProgress, value);
      mountClassInstance(workInProgress, renderExpirationTime);
      return finishClassComponent(current, workInProgress, true, hasContext);
    } else {
      // Proceed under the assumption that this is a functional component
      workInProgress.tag = FunctionalComponent;
      {
        var Component = workInProgress.type;

        if (Component) {
          warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
          var info = '';
          var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName();
          if (ownerName) {
            info += '\n\nCheck the render method of `' + ownerName + '`.';
          }

          var warningKey = ownerName || workInProgress._debugID || '';
          var debugSource = workInProgress._debugSource;
          if (debugSource) {
            warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
          }
          if (!warnedAboutStatelessRefs[warningKey]) {
            warnedAboutStatelessRefs[warningKey] = true;
            warning(false, 'Stateless function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s%s', info, ReactDebugCurrentFiber.getCurrentFiberStackAddendum());
          }
        }
      }
      reconcileChildren(current, workInProgress, value);
      memoizeProps(workInProgress, props);
      return workInProgress.child;
    }
  }

  function updateCallComponent(current, workInProgress, renderExpirationTime) {
    var nextCall = workInProgress.pendingProps;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
      if (nextCall === null) {
        nextCall = current && current.memoizedProps;
        !(nextCall !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      }
    } else if (nextCall === null || workInProgress.memoizedProps === nextCall) {
      nextCall = workInProgress.memoizedProps;
      // TODO: When bailing out, we might need to return the stateNode instead
      // of the child. To check it for work.
      // return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }

    var nextChildren = nextCall.children;

    // The following is a fork of reconcileChildrenAtExpirationTime but using
    // stateNode to store the child.
    if (current === null) {
      workInProgress.stateNode = mountChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
    } else {
      workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
    }

    memoizeProps(workInProgress, nextCall);
    // This doesn't take arbitrary time so we could synchronously just begin
    // eagerly do the work of workInProgress.child as an optimization.
    return workInProgress.stateNode;
  }

  function updatePortalComponent(current, workInProgress, renderExpirationTime) {
    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
    var nextChildren = workInProgress.pendingProps;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
      if (nextChildren === null) {
        nextChildren = current && current.memoizedProps;
        !(nextChildren != null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      }
    } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }

    if (current === null) {
      // Portals are special because we don't append the children during mount
      // but at commit. Therefore we need to track insertions which the normal
      // flow doesn't do during mount. This doesn't happen at the root because
      // the root always starts with a "current" with a null child.
      // TODO: Consider unifying this with how the root works.
      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      memoizeProps(workInProgress, nextChildren);
    } else {
      reconcileChildren(current, workInProgress, nextChildren);
      memoizeProps(workInProgress, nextChildren);
    }
    return workInProgress.child;
  }

  /*
  function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
    let child = firstChild;
    do {
      // Ensure that the first and last effect of the parent corresponds
      // to the children's first and last effect.
      if (!returnFiber.firstEffect) {
        returnFiber.firstEffect = child.firstEffect;
      }
      if (child.lastEffect) {
        if (returnFiber.lastEffect) {
          returnFiber.lastEffect.nextEffect = child.firstEffect;
        }
        returnFiber.lastEffect = child.lastEffect;
      }
    } while (child = child.sibling);
  }
  */

  function bailoutOnAlreadyFinishedWork(current, workInProgress) {
    cancelWorkTimer(workInProgress);

    // TODO: We should ideally be able to bail out early if the children have no
    // more work to do. However, since we don't have a separation of this
    // Fiber's priority and its children yet - we don't know without doing lots
    // of the same work we do anyway. Once we have that separation we can just
    // bail out here if the children has no more work at this priority level.
    // if (workInProgress.priorityOfChildren <= priorityLevel) {
    //   // If there are side-effects in these children that have not yet been
    //   // committed we need to ensure that they get properly transferred up.
    //   if (current && current.child !== workInProgress.child) {
    //     reuseChildrenEffects(workInProgress, child);
    //   }
    //   return null;
    // }

    cloneChildFibers(current, workInProgress);
    return workInProgress.child;
  }

  function bailoutOnLowPriority(current, workInProgress) {
    cancelWorkTimer(workInProgress);

    // TODO: Handle HostComponent tags here as well and call pushHostContext()?
    // See PR 8590 discussion for context
    switch (workInProgress.tag) {
      case HostRoot:
        pushHostRootContext(workInProgress);
        break;
      case ClassComponent:
        pushContextProvider(workInProgress);
        break;
      case HostPortal:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        break;
    }
    // TODO: What if this is currently in progress?
    // How can that happen? How is this not being cloned?
    return null;
  }

  // TODO: Delete memoizeProps/State and move to reconcile/bailout instead
  function memoizeProps(workInProgress, nextProps) {
    workInProgress.memoizedProps = nextProps;
  }

  function memoizeState(workInProgress, nextState) {
    workInProgress.memoizedState = nextState;
    // Don't reset the updateQueue, in case there are pending updates. Resetting
    // is handled by processUpdateQueue.
  }

  function beginWork(current, workInProgress, renderExpirationTime) {
    if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
      return bailoutOnLowPriority(current, workInProgress);
    }

    switch (workInProgress.tag) {
      case IndeterminateComponent:
        return mountIndeterminateComponent(current, workInProgress, renderExpirationTime);
      case FunctionalComponent:
        return updateFunctionalComponent(current, workInProgress);
      case ClassComponent:
        return updateClassComponent(current, workInProgress, renderExpirationTime);
      case HostRoot:
        return updateHostRoot(current, workInProgress, renderExpirationTime);
      case HostComponent:
        return updateHostComponent(current, workInProgress, renderExpirationTime);
      case HostText:
        return updateHostText(current, workInProgress);
      case CallHandlerPhase:
        // This is a restart. Reset the tag to the initial phase.
        workInProgress.tag = CallComponent;
      // Intentionally fall through since this is now the same.
      case CallComponent:
        return updateCallComponent(current, workInProgress, renderExpirationTime);
      case ReturnComponent:
        // A return component is just a placeholder, we can just run through the
        // next one immediately.
        return null;
      case HostPortal:
        return updatePortalComponent(current, workInProgress, renderExpirationTime);
      case Fragment:
        return updateFragment(current, workInProgress);
      default:
        invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
    }
  }

  function beginFailedWork(current, workInProgress, renderExpirationTime) {
    // Push context providers here to avoid a push/pop context mismatch.
    switch (workInProgress.tag) {
      case ClassComponent:
        pushContextProvider(workInProgress);
        break;
      case HostRoot:
        pushHostRootContext(workInProgress);
        break;
      default:
        invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
    }

    // Add an error effect so we can handle the error during the commit phase
    workInProgress.effectTag |= Err;

    // This is a weird case where we do "resume" work — work that failed on
    // our first attempt. Because we no longer have a notion of "progressed
    // deletions," reset the child to the current child to make sure we delete
    // it again. TODO: Find a better way to handle this, perhaps during a more
    // general overhaul of error handling.
    if (current === null) {
      workInProgress.child = null;
    } else if (workInProgress.child !== current.child) {
      workInProgress.child = current.child;
    }

    if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
      return bailoutOnLowPriority(current, workInProgress);
    }

    // If we don't bail out, we're going be recomputing our children so we need
    // to drop our effect list.
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    // Unmount the current children as if the component rendered null
    var nextChildren = null;
    reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime);

    if (workInProgress.tag === ClassComponent) {
      var instance = workInProgress.stateNode;
      workInProgress.memoizedProps = instance.props;
      workInProgress.memoizedState = instance.state;
    }

    return workInProgress.child;
  }

  return {
    beginWork: beginWork,
    beginFailedWork: beginFailedWork
  };
};

var ReactFiberCompleteWork = function (config, hostContext, hydrationContext) {
  var createInstance = config.createInstance,
      createTextInstance = config.createTextInstance,
      appendInitialChild = config.appendInitialChild,
      finalizeInitialChildren = config.finalizeInitialChildren,
      prepareUpdate = config.prepareUpdate,
      mutation = config.mutation,
      persistence = config.persistence;
  var getRootHostContainer = hostContext.getRootHostContainer,
      popHostContext = hostContext.popHostContext,
      getHostContext = hostContext.getHostContext,
      popHostContainer = hostContext.popHostContainer;
  var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
      prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
      popHydrationState = hydrationContext.popHydrationState;


  function markUpdate(workInProgress) {
    // Tag the fiber with an update effect. This turns a Placement into
    // an UpdateAndPlacement.
    workInProgress.effectTag |= Update;
  }

  function markRef(workInProgress) {
    workInProgress.effectTag |= Ref;
  }

  function appendAllReturns(returns, workInProgress) {
    var node = workInProgress.stateNode;
    if (node) {
      node['return'] = workInProgress;
    }
    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText || node.tag === HostPortal) {
        invariant(false, 'A call cannot have host component children.');
      } else if (node.tag === ReturnComponent) {
        returns.push(node.type);
      } else if (node.child !== null) {
        node.child['return'] = node;
        node = node.child;
        continue;
      }
      while (node.sibling === null) {
        if (node['return'] === null || node['return'] === workInProgress) {
          return;
        }
        node = node['return'];
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  function moveCallToHandlerPhase(current, workInProgress, renderExpirationTime) {
    var call = workInProgress.memoizedProps;
    !call ? invariant(false, 'Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    // First step of the call has completed. Now we need to do the second.
    // TODO: It would be nice to have a multi stage call represented by a
    // single component, or at least tail call optimize nested ones. Currently
    // that requires additional fields that we don't want to add to the fiber.
    // So this requires nested handlers.
    // Note: This doesn't mutate the alternate node. I don't think it needs to
    // since this stage is reset for every pass.
    workInProgress.tag = CallHandlerPhase;

    // Build up the returns.
    // TODO: Compare this to a generator or opaque helpers like Children.
    var returns = [];
    appendAllReturns(returns, workInProgress);
    var fn = call.handler;
    var props = call.props;
    var nextChildren = fn(props, returns);

    var currentFirstChild = current !== null ? current.child : null;
    workInProgress.child = reconcileChildFibers(workInProgress, currentFirstChild, nextChildren, renderExpirationTime);
    return workInProgress.child;
  }

  function appendAllChildren(parent, workInProgress) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;
    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (node.tag === HostPortal) {
        // If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.child !== null) {
        node.child['return'] = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) {
        return;
      }
      while (node.sibling === null) {
        if (node['return'] === null || node['return'] === workInProgress) {
          return;
        }
        node = node['return'];
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  var updateHostContainer = void 0;
  var updateHostComponent = void 0;
  var updateHostText = void 0;
  if (mutation) {
    if (enableMutatingReconciler) {
      // Mutation mode
      updateHostContainer = function (workInProgress) {
        // Noop
      };
      updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
        // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload;
        // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) {
          markUpdate(workInProgress);
        }
      };
      updateHostText = function (current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) {
          markUpdate(workInProgress);
        }
      };
    } else {
      invariant(false, 'Mutating reconciler is disabled.');
    }
  } else if (persistence) {
    if (enablePersistentReconciler) {
      // Persistent host tree mode
      var cloneInstance = persistence.cloneInstance,
          createContainerChildSet = persistence.createContainerChildSet,
          appendChildToContainerChildSet = persistence.appendChildToContainerChildSet,
          finalizeContainerChildren = persistence.finalizeContainerChildren;

      // An unfortunate fork of appendAllChildren because we have two different parent types.

      var appendAllChildrenToContainer = function (containerChildSet, workInProgress) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
            appendChildToContainerChildSet(containerChildSet, node.stateNode);
          } else if (node.tag === HostPortal) {
            // If we have a portal child, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.child !== null) {
            node.child['return'] = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress) {
            return;
          }
          while (node.sibling === null) {
            if (node['return'] === null || node['return'] === workInProgress) {
              return;
            }
            node = node['return'];
          }
          node.sibling['return'] = node['return'];
          node = node.sibling;
        }
      };
      updateHostContainer = function (workInProgress) {
        var portalOrRoot = workInProgress.stateNode;
        var childrenUnchanged = workInProgress.firstEffect === null;
        if (childrenUnchanged) {
          // No changes, just reuse the existing instance.
        } else {
          var container = portalOrRoot.containerInfo;
          var newChildSet = createContainerChildSet(container);
          if (finalizeContainerChildren(container, newChildSet)) {
            markUpdate(workInProgress);
          }
          portalOrRoot.pendingChildren = newChildSet;
          // If children might have changed, we have to add them all to the set.
          appendAllChildrenToContainer(newChildSet, workInProgress);
          // Schedule an update on the container to swap out the container.
          markUpdate(workInProgress);
        }
      };
      updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
        // If there are no effects associated with this node, then none of our children had any updates.
        // This guarantees that we can reuse all of them.
        var childrenUnchanged = workInProgress.firstEffect === null;
        var currentInstance = current.stateNode;
        if (childrenUnchanged && updatePayload === null) {
          // No changes, just reuse the existing instance.
          // Note that this might release a previous clone.
          workInProgress.stateNode = currentInstance;
        } else {
          var recyclableInstance = workInProgress.stateNode;
          var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);
          if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance)) {
            markUpdate(workInProgress);
          }
          workInProgress.stateNode = newInstance;
          if (childrenUnchanged) {
            // If there are no other effects in this tree, we need to flag this node as having one.
            // Even though we're not going to use it for anything.
            // Otherwise parents won't know that there are new children to propagate upwards.
            markUpdate(workInProgress);
          } else {
            // If children might have changed, we have to add them all to the set.
            appendAllChildren(newInstance, workInProgress);
          }
        }
      };
      updateHostText = function (current, workInProgress, oldText, newText) {
        if (oldText !== newText) {
          // If the text content differs, we'll create a new text instance for it.
          var rootContainerInstance = getRootHostContainer();
          var currentHostContext = getHostContext();
          workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
          // We'll have to mark it as having an effect, even though we won't use the effect for anything.
          // This lets the parents know that at least one of their children has changed.
          markUpdate(workInProgress);
        }
      };
    } else {
      invariant(false, 'Persistent reconciler is disabled.');
    }
  } else {
    if (enableNoopReconciler) {
      // No host operations
      updateHostContainer = function (workInProgress) {
        // Noop
      };
      updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
        // Noop
      };
      updateHostText = function (current, workInProgress, oldText, newText) {
        // Noop
      };
    } else {
      invariant(false, 'Noop reconciler is disabled.');
    }
  }

  function completeWork(current, workInProgress, renderExpirationTime) {
    // Get the latest props.
    var newProps = workInProgress.pendingProps;
    if (newProps === null) {
      newProps = workInProgress.memoizedProps;
    } else if (workInProgress.expirationTime !== Never || renderExpirationTime === Never) {
      // Reset the pending props, unless this was a down-prioritization.
      workInProgress.pendingProps = null;
    }

    switch (workInProgress.tag) {
      case FunctionalComponent:
        return null;
      case ClassComponent:
        {
          // We are leaving this subtree, so pop context if any.
          popContextProvider(workInProgress);
          return null;
        }
      case HostRoot:
        {
          popHostContainer(workInProgress);
          popTopLevelContextObject(workInProgress);
          var fiberRoot = workInProgress.stateNode;
          if (fiberRoot.pendingContext) {
            fiberRoot.context = fiberRoot.pendingContext;
            fiberRoot.pendingContext = null;
          }

          if (current === null || current.child === null) {
            // If we hydrated, pop so that we can delete any remaining children
            // that weren't hydrated.
            popHydrationState(workInProgress);
            // This resets the hacky state to fix isMounted before committing.
            // TODO: Delete this when we delete isMounted and findDOMNode.
            workInProgress.effectTag &= ~Placement;
          }
          updateHostContainer(workInProgress);
          return null;
        }
      case HostComponent:
        {
          popHostContext(workInProgress);
          var rootContainerInstance = getRootHostContainer();
          var type = workInProgress.type;
          if (current !== null && workInProgress.stateNode != null) {
            // If we have an alternate, that means this is an update and we need to
            // schedule a side-effect to do the updates.
            var oldProps = current.memoizedProps;
            // If we get updated because one of our children updated, we don't
            // have newProps so we'll have to reuse them.
            // TODO: Split the update API as separate for the props vs. children.
            // Even better would be if children weren't special cased at all tho.
            var instance = workInProgress.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);

            updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance);

            if (current.ref !== workInProgress.ref) {
              markRef(workInProgress);
            }
          } else {
            if (!newProps) {
              !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
              // This can happen when we abort work.
              return null;
            }

            var _currentHostContext = getHostContext();
            // TODO: Move createInstance to beginWork and keep it on a context
            // "stack" as the parent. Then append children as we go in beginWork
            // or completeWork depending on we want to add then top->down or
            // bottom->up. Top->down is faster in IE11.
            var wasHydrated = popHydrationState(workInProgress);
            if (wasHydrated) {
              // TODO: Move this and createInstance step into the beginPhase
              // to consolidate.
              if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
                // If changes to the hydrated node needs to be applied at the
                // commit-phase we mark this as such.
                markUpdate(workInProgress);
              }
            } else {
              var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);

              appendAllChildren(_instance, workInProgress);

              // Certain renderers require commit-time effects for initial mount.
              // (eg DOM renderer supports auto-focus for certain elements).
              // Make sure such renderers get scheduled for later work.
              if (finalizeInitialChildren(_instance, type, newProps, rootContainerInstance)) {
                markUpdate(workInProgress);
              }
              workInProgress.stateNode = _instance;
            }

            if (workInProgress.ref !== null) {
              // If there is a ref on a host node we need to schedule a callback
              markRef(workInProgress);
            }
          }
          return null;
        }
      case HostText:
        {
          var newText = newProps;
          if (current && workInProgress.stateNode != null) {
            var oldText = current.memoizedProps;
            // If we have an alternate, that means this is an update and we need
            // to schedule a side-effect to do the updates.
            updateHostText(current, workInProgress, oldText, newText);
          } else {
            if (typeof newText !== 'string') {
              !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
              // This can happen when we abort work.
              return null;
            }
            var _rootContainerInstance = getRootHostContainer();
            var _currentHostContext2 = getHostContext();
            var _wasHydrated = popHydrationState(workInProgress);
            if (_wasHydrated) {
              if (prepareToHydrateHostTextInstance(workInProgress)) {
                markUpdate(workInProgress);
              }
            } else {
              workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
            }
          }
          return null;
        }
      case CallComponent:
        return moveCallToHandlerPhase(current, workInProgress, renderExpirationTime);
      case CallHandlerPhase:
        // Reset the tag to now be a first phase call.
        workInProgress.tag = CallComponent;
        return null;
      case ReturnComponent:
        // Does nothing.
        return null;
      case Fragment:
        return null;
      case HostPortal:
        popHostContainer(workInProgress);
        updateHostContainer(workInProgress);
        return null;
      // Error cases
      case IndeterminateComponent:
        invariant(false, 'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.');
      // eslint-disable-next-line no-fallthrough
      default:
        invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
    }
  }

  return {
    completeWork: completeWork
  };
};

var invokeGuardedCallback$2 = ReactErrorUtils.invokeGuardedCallback;
var hasCaughtError$1 = ReactErrorUtils.hasCaughtError;
var clearCaughtError$1 = ReactErrorUtils.clearCaughtError;


var ReactFiberCommitWork = function (config, captureError) {
  var getPublicInstance = config.getPublicInstance,
      mutation = config.mutation,
      persistence = config.persistence;


  var callComponentWillUnmountWithTimer = function (current, instance) {
    startPhaseTimer(current, 'componentWillUnmount');
    instance.props = current.memoizedProps;
    instance.state = current.memoizedState;
    instance.componentWillUnmount();
    stopPhaseTimer();
  };

  // Capture errors so they don't interrupt unmounting.
  function safelyCallComponentWillUnmount(current, instance) {
    {
      invokeGuardedCallback$2(null, callComponentWillUnmountWithTimer, null, current, instance);
      if (hasCaughtError$1()) {
        var unmountError = clearCaughtError$1();
        captureError(current, unmountError);
      }
    }
  }

  function safelyDetachRef(current) {
    var ref = current.ref;
    if (ref !== null) {
      {
        invokeGuardedCallback$2(null, ref, null, null);
        if (hasCaughtError$1()) {
          var refError = clearCaughtError$1();
          captureError(current, refError);
        }
      }
    }
  }

  function commitLifeCycles(current, finishedWork) {
    switch (finishedWork.tag) {
      case ClassComponent:
        {
          var instance = finishedWork.stateNode;
          if (finishedWork.effectTag & Update) {
            if (current === null) {
              startPhaseTimer(finishedWork, 'componentDidMount');
              instance.props = finishedWork.memoizedProps;
              instance.state = finishedWork.memoizedState;
              instance.componentDidMount();
              stopPhaseTimer();
            } else {
              var prevProps = current.memoizedProps;
              var prevState = current.memoizedState;
              startPhaseTimer(finishedWork, 'componentDidUpdate');
              instance.props = finishedWork.memoizedProps;
              instance.state = finishedWork.memoizedState;
              instance.componentDidUpdate(prevProps, prevState);
              stopPhaseTimer();
            }
          }
          var updateQueue = finishedWork.updateQueue;
          if (updateQueue !== null) {
            commitCallbacks(updateQueue, instance);
          }
          return;
        }
      case HostRoot:
        {
          var _updateQueue = finishedWork.updateQueue;
          if (_updateQueue !== null) {
            var _instance = finishedWork.child !== null ? finishedWork.child.stateNode : null;
            commitCallbacks(_updateQueue, _instance);
          }
          return;
        }
      case HostComponent:
        {
          var _instance2 = finishedWork.stateNode;

          // Renderers may schedule work to be done after host components are mounted
          // (eg DOM renderer may schedule auto-focus for inputs and form controls).
          // These effects should only be committed when components are first mounted,
          // aka when there is no current/alternate.
          if (current === null && finishedWork.effectTag & Update) {
            var type = finishedWork.type;
            var props = finishedWork.memoizedProps;
            commitMount(_instance2, type, props, finishedWork);
          }

          return;
        }
      case HostText:
        {
          // We have no life-cycles associated with text.
          return;
        }
      case HostPortal:
        {
          // We have no life-cycles associated with portals.
          return;
        }
      default:
        {
          invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
        }
    }
  }

  function commitAttachRef(finishedWork) {
    var ref = finishedWork.ref;
    if (ref !== null) {
      var instance = finishedWork.stateNode;
      switch (finishedWork.tag) {
        case HostComponent:
          ref(getPublicInstance(instance));
          break;
        default:
          ref(instance);
      }
    }
  }

  function commitDetachRef(current) {
    var currentRef = current.ref;
    if (currentRef !== null) {
      currentRef(null);
    }
  }

  // User-originating errors (lifecycles and refs) should not interrupt
  // deletion, so don't let them throw. Host-originating errors should
  // interrupt deletion, so it's okay
  function commitUnmount(current) {
    if (typeof onCommitUnmount === 'function') {
      onCommitUnmount(current);
    }

    switch (current.tag) {
      case ClassComponent:
        {
          safelyDetachRef(current);
          var instance = current.stateNode;
          if (typeof instance.componentWillUnmount === 'function') {
            safelyCallComponentWillUnmount(current, instance);
          }
          return;
        }
      case HostComponent:
        {
          safelyDetachRef(current);
          return;
        }
      case CallComponent:
        {
          commitNestedUnmounts(current.stateNode);
          return;
        }
      case HostPortal:
        {
          // TODO: this is recursive.
          // We are also not using this parent because
          // the portal will get pushed immediately.
          if (enableMutatingReconciler && mutation) {
            unmountHostComponents(current);
          } else if (enablePersistentReconciler && persistence) {
            emptyPortalContainer(current);
          }
          return;
        }
    }
  }

  function commitNestedUnmounts(root) {
    // While we're inside a removed host node we don't want to call
    // removeChild on the inner nodes because they're removed by the top
    // call anyway. We also want to call componentWillUnmount on all
    // composites before this host node is removed from the tree. Therefore
    var node = root;
    while (true) {
      commitUnmount(node);
      // Visit children because they may contain more composite or host nodes.
      // Skip portals because commitUnmount() currently visits them recursively.
      if (node.child !== null && (
      // If we use mutation we drill down into portals using commitUnmount above.
      // If we don't use mutation we drill down into portals here instead.
      !mutation || node.tag !== HostPortal)) {
        node.child['return'] = node;
        node = node.child;
        continue;
      }
      if (node === root) {
        return;
      }
      while (node.sibling === null) {
        if (node['return'] === null || node['return'] === root) {
          return;
        }
        node = node['return'];
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  function detachFiber(current) {
    // Cut off the return pointers to disconnect it from the tree. Ideally, we
    // should clear the child pointer of the parent alternate to let this
    // get GC:ed but we don't know which for sure which parent is the current
    // one so we'll settle for GC:ing the subtree of this child. This child
    // itself will be GC:ed when the parent updates the next time.
    current['return'] = null;
    current.child = null;
    if (current.alternate) {
      current.alternate.child = null;
      current.alternate['return'] = null;
    }
  }

  if (!mutation) {
    var commitContainer = void 0;
    if (persistence) {
      var replaceContainerChildren = persistence.replaceContainerChildren,
          createContainerChildSet = persistence.createContainerChildSet;

      var emptyPortalContainer = function (current) {
        var portal = current.stateNode;
        var containerInfo = portal.containerInfo;

        var emptyChildSet = createContainerChildSet(containerInfo);
        replaceContainerChildren(containerInfo, emptyChildSet);
      };
      commitContainer = function (finishedWork) {
        switch (finishedWork.tag) {
          case ClassComponent:
            {
              return;
            }
          case HostComponent:
            {
              return;
            }
          case HostText:
            {
              return;
            }
          case HostRoot:
          case HostPortal:
            {
              var portalOrRoot = finishedWork.stateNode;
              var containerInfo = portalOrRoot.containerInfo,
                  _pendingChildren = portalOrRoot.pendingChildren;

              replaceContainerChildren(containerInfo, _pendingChildren);
              return;
            }
          default:
            {
              invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
            }
        }
      };
    } else {
      commitContainer = function (finishedWork) {
        // Noop
      };
    }
    if (enablePersistentReconciler || enableNoopReconciler) {
      return {
        commitResetTextContent: function (finishedWork) {},
        commitPlacement: function (finishedWork) {},
        commitDeletion: function (current) {
          // Detach refs and call componentWillUnmount() on the whole subtree.
          commitNestedUnmounts(current);
          detachFiber(current);
        },
        commitWork: function (current, finishedWork) {
          commitContainer(finishedWork);
        },

        commitLifeCycles: commitLifeCycles,
        commitAttachRef: commitAttachRef,
        commitDetachRef: commitDetachRef
      };
    } else if (persistence) {
      invariant(false, 'Persistent reconciler is disabled.');
    } else {
      invariant(false, 'Noop reconciler is disabled.');
    }
  }
  var commitMount = mutation.commitMount,
      commitUpdate = mutation.commitUpdate,
      resetTextContent = mutation.resetTextContent,
      commitTextUpdate = mutation.commitTextUpdate,
      appendChild = mutation.appendChild,
      appendChildToContainer = mutation.appendChildToContainer,
      insertBefore = mutation.insertBefore,
      insertInContainerBefore = mutation.insertInContainerBefore,
      removeChild = mutation.removeChild,
      removeChildFromContainer = mutation.removeChildFromContainer;


  function getHostParentFiber(fiber) {
    var parent = fiber['return'];
    while (parent !== null) {
      if (isHostParent(parent)) {
        return parent;
      }
      parent = parent['return'];
    }
    invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
  }

  function isHostParent(fiber) {
    return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
  }

  function getHostSibling(fiber) {
    // We're going to search forward into the tree until we find a sibling host
    // node. Unfortunately, if multiple insertions are done in a row we have to
    // search past them. This leads to exponential search for the next sibling.
    var node = fiber;
    siblings: while (true) {
      // If we didn't find anything, let's try the next sibling.
      while (node.sibling === null) {
        if (node['return'] === null || isHostParent(node['return'])) {
          // If we pop out of the root or hit the parent the fiber we are the
          // last sibling.
          return null;
        }
        node = node['return'];
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
      while (node.tag !== HostComponent && node.tag !== HostText) {
        // If it is not host node and, we might have a host node inside it.
        // Try to search down until we find one.
        if (node.effectTag & Placement) {
          // If we don't have a child, try the siblings instead.
          continue siblings;
        }
        // If we don't have a child, try the siblings instead.
        // We also skip portals because they are not part of this host tree.
        if (node.child === null || node.tag === HostPortal) {
          continue siblings;
        } else {
          node.child['return'] = node;
          node = node.child;
        }
      }
      // Check if this host node is stable or about to be placed.
      if (!(node.effectTag & Placement)) {
        // Found it!
        return node.stateNode;
      }
    }
  }

  function commitPlacement(finishedWork) {
    // Recursively insert all host nodes into the parent.
    var parentFiber = getHostParentFiber(finishedWork);
    var parent = void 0;
    var isContainer = void 0;
    switch (parentFiber.tag) {
      case HostComponent:
        parent = parentFiber.stateNode;
        isContainer = false;
        break;
      case HostRoot:
        parent = parentFiber.stateNode.containerInfo;
        isContainer = true;
        break;
      case HostPortal:
        parent = parentFiber.stateNode.containerInfo;
        isContainer = true;
        break;
      default:
        invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
    }
    if (parentFiber.effectTag & ContentReset) {
      // Reset the text content of the parent before doing any insertions
      resetTextContent(parent);
      // Clear ContentReset from the effect tag
      parentFiber.effectTag &= ~ContentReset;
    }

    var before = getHostSibling(finishedWork);
    // We only have the top Fiber that was inserted but we need recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;
    while (true) {
      if (node.tag === HostComponent || node.tag === HostText) {
        if (before) {
          if (isContainer) {
            insertInContainerBefore(parent, node.stateNode, before);
          } else {
            insertBefore(parent, node.stateNode, before);
          }
        } else {
          if (isContainer) {
            appendChildToContainer(parent, node.stateNode);
          } else {
            appendChild(parent, node.stateNode);
          }
        }
      } else if (node.tag === HostPortal) {
        // If the insertion itself is a portal, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.child !== null) {
        node.child['return'] = node;
        node = node.child;
        continue;
      }
      if (node === finishedWork) {
        return;
      }
      while (node.sibling === null) {
        if (node['return'] === null || node['return'] === finishedWork) {
          return;
        }
        node = node['return'];
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  function unmountHostComponents(current) {
    // We only have the top Fiber that was inserted but we need recurse down its
    var node = current;

    // Each iteration, currentParent is populated with node's host parent if not
    // currentParentIsValid.
    var currentParentIsValid = false;
    var currentParent = void 0;
    var currentParentIsContainer = void 0;

    while (true) {
      if (!currentParentIsValid) {
        var parent = node['return'];
        findParent: while (true) {
          !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          switch (parent.tag) {
            case HostComponent:
              currentParent = parent.stateNode;
              currentParentIsContainer = false;
              break findParent;
            case HostRoot:
              currentParent = parent.stateNode.containerInfo;
              currentParentIsContainer = true;
              break findParent;
            case HostPortal:
              currentParent = parent.stateNode.containerInfo;
              currentParentIsContainer = true;
              break findParent;
          }
          parent = parent['return'];
        }
        currentParentIsValid = true;
      }

      if (node.tag === HostComponent || node.tag === HostText) {
        commitNestedUnmounts(node);
        // After all the children have unmounted, it is now safe to remove the
        // node from the tree.
        if (currentParentIsContainer) {
          removeChildFromContainer(currentParent, node.stateNode);
        } else {
          removeChild(currentParent, node.stateNode);
        }
        // Don't visit children because we already visited them.
      } else if (node.tag === HostPortal) {
        // When we go into a portal, it becomes the parent to remove from.
        // We will reassign it back when we pop the portal on the way up.
        currentParent = node.stateNode.containerInfo;
        // Visit children because portals might contain host components.
        if (node.child !== null) {
          node.child['return'] = node;
          node = node.child;
          continue;
        }
      } else {
        commitUnmount(node);
        // Visit children because we may find more host components below.
        if (node.child !== null) {
          node.child['return'] = node;
          node = node.child;
          continue;
        }
      }
      if (node === current) {
        return;
      }
      while (node.sibling === null) {
        if (node['return'] === null || node['return'] === current) {
          return;
        }
        node = node['return'];
        if (node.tag === HostPortal) {
          // When we go out of the portal, we need to restore the parent.
          // Since we don't keep a stack of them, we will search for it.
          currentParentIsValid = false;
        }
      }
      node.sibling['return'] = node['return'];
      node = node.sibling;
    }
  }

  function commitDeletion(current) {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(current);
    detachFiber(current);
  }

  function commitWork(current, finishedWork) {
    switch (finishedWork.tag) {
      case ClassComponent:
        {
          return;
        }
      case HostComponent:
        {
          var instance = finishedWork.stateNode;
          if (instance != null) {
            // Commit the work prepared earlier.
            var newProps = finishedWork.memoizedProps;
            // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.
            var oldProps = current !== null ? current.memoizedProps : newProps;
            var type = finishedWork.type;
            // TODO: Type the updateQueue to be specific to host components.
            var updatePayload = finishedWork.updateQueue;
            finishedWork.updateQueue = null;
            if (updatePayload !== null) {
              commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
            }
          }
          return;
        }
      case HostText:
        {
          !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          var textInstance = finishedWork.stateNode;
          var newText = finishedWork.memoizedProps;
          // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.
          var oldText = current !== null ? current.memoizedProps : newText;
          commitTextUpdate(textInstance, oldText, newText);
          return;
        }
      case HostRoot:
        {
          return;
        }
      default:
        {
          invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
        }
    }
  }

  function commitResetTextContent(current) {
    resetTextContent(current.stateNode);
  }

  if (enableMutatingReconciler) {
    return {
      commitResetTextContent: commitResetTextContent,
      commitPlacement: commitPlacement,
      commitDeletion: commitDeletion,
      commitWork: commitWork,
      commitLifeCycles: commitLifeCycles,
      commitAttachRef: commitAttachRef,
      commitDetachRef: commitDetachRef
    };
  } else {
    invariant(false, 'Mutating reconciler is disabled.');
  }
};

var NO_CONTEXT = {};

var ReactFiberHostContext = function (config) {
  var getChildHostContext = config.getChildHostContext,
      getRootHostContext = config.getRootHostContext;


  var contextStackCursor = createCursor(NO_CONTEXT);
  var contextFiberStackCursor = createCursor(NO_CONTEXT);
  var rootInstanceStackCursor = createCursor(NO_CONTEXT);

  function requiredContext(c) {
    !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    return c;
  }

  function getRootHostContainer() {
    var rootInstance = requiredContext(rootInstanceStackCursor.current);
    return rootInstance;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    // Push current root instance onto the stack;
    // This allows us to reset root when portals are popped.
    push(rootInstanceStackCursor, nextRootInstance, fiber);

    var nextRootContext = getRootHostContext(nextRootInstance);

    // Track the context and the Fiber that provided it.
    // This enables us to pop only Fibers that provide unique contexts.
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor, nextRootContext, fiber);
  }

  function popHostContainer(fiber) {
    pop(contextStackCursor, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }

  function getHostContext() {
    var context = requiredContext(contextStackCursor.current);
    return context;
  }

  function pushHostContext(fiber) {
    var rootInstance = requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor.current);
    var nextContext = getChildHostContext(context, fiber.type, rootInstance);

    // Don't push this Fiber's context unless it's unique.
    if (context === nextContext) {
      return;
    }

    // Track the context and the Fiber that provided it.
    // This enables us to pop only Fibers that provide unique contexts.
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor, nextContext, fiber);
  }

  function popHostContext(fiber) {
    // Do not pop unless this Fiber provided the current context.
    // pushHostContext() only pushes Fibers that provide unique contexts.
    if (contextFiberStackCursor.current !== fiber) {
      return;
    }

    pop(contextStackCursor, fiber);
    pop(contextFiberStackCursor, fiber);
  }

  function resetHostContainer() {
    contextStackCursor.current = NO_CONTEXT;
    rootInstanceStackCursor.current = NO_CONTEXT;
  }

  return {
    getHostContext: getHostContext,
    getRootHostContainer: getRootHostContainer,
    popHostContainer: popHostContainer,
    popHostContext: popHostContext,
    pushHostContainer: pushHostContainer,
    pushHostContext: pushHostContext,
    resetHostContainer: resetHostContainer
  };
};

var ReactFiberHydrationContext = function (config) {
  var shouldSetTextContent = config.shouldSetTextContent,
      hydration = config.hydration;

  // If this doesn't have hydration mode.

  if (!hydration) {
    return {
      enterHydrationState: function () {
        return false;
      },
      resetHydrationState: function () {},
      tryToClaimNextHydratableInstance: function () {},
      prepareToHydrateHostInstance: function () {
        invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      },
      prepareToHydrateHostTextInstance: function () {
        invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      },
      popHydrationState: function (fiber) {
        return false;
      }
    };
  }

  var canHydrateInstance = hydration.canHydrateInstance,
      canHydrateTextInstance = hydration.canHydrateTextInstance,
      getNextHydratableSibling = hydration.getNextHydratableSibling,
      getFirstHydratableChild = hydration.getFirstHydratableChild,
      hydrateInstance = hydration.hydrateInstance,
      hydrateTextInstance = hydration.hydrateTextInstance,
      didNotMatchHydratedContainerTextInstance = hydration.didNotMatchHydratedContainerTextInstance,
      didNotMatchHydratedTextInstance = hydration.didNotMatchHydratedTextInstance,
      didNotHydrateContainerInstance = hydration.didNotHydrateContainerInstance,
      didNotHydrateInstance = hydration.didNotHydrateInstance,
      didNotFindHydratableContainerInstance = hydration.didNotFindHydratableContainerInstance,
      didNotFindHydratableContainerTextInstance = hydration.didNotFindHydratableContainerTextInstance,
      didNotFindHydratableInstance = hydration.didNotFindHydratableInstance,
      didNotFindHydratableTextInstance = hydration.didNotFindHydratableTextInstance;

  // The deepest Fiber on the stack involved in a hydration context.
  // This may have been an insertion or a hydration.

  var hydrationParentFiber = null;
  var nextHydratableInstance = null;
  var isHydrating = false;

  function enterHydrationState(fiber) {
    var parentInstance = fiber.stateNode.containerInfo;
    nextHydratableInstance = getFirstHydratableChild(parentInstance);
    hydrationParentFiber = fiber;
    isHydrating = true;
    return true;
  }

  function deleteHydratableInstance(returnFiber, instance) {
    {
      switch (returnFiber.tag) {
        case HostRoot:
          didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
          break;
        case HostComponent:
          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
          break;
      }
    }

    var childToDelete = createFiberFromHostInstanceForDeletion();
    childToDelete.stateNode = instance;
    childToDelete['return'] = returnFiber;
    childToDelete.effectTag = Deletion;

    // This might seem like it belongs on progressedFirstDeletion. However,
    // these children are not part of the reconciliation list of children.
    // Even if we abort and rereconcile the children, that will try to hydrate
    // again and the nodes are still in the host tree so these will be
    // recreated.
    if (returnFiber.lastEffect !== null) {
      returnFiber.lastEffect.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
  }

  function insertNonHydratedInstance(returnFiber, fiber) {
    fiber.effectTag |= Placement;
    {
      switch (returnFiber.tag) {
        case HostRoot:
          {
            var parentContainer = returnFiber.stateNode.containerInfo;
            switch (fiber.tag) {
              case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                didNotFindHydratableContainerInstance(parentContainer, type, props);
                break;
              case HostText:
                var text = fiber.pendingProps;
                didNotFindHydratableContainerTextInstance(parentContainer, text);
                break;
            }
            break;
          }
        case HostComponent:
          {
            var parentType = returnFiber.type;
            var parentProps = returnFiber.memoizedProps;
            var parentInstance = returnFiber.stateNode;
            switch (fiber.tag) {
              case HostComponent:
                var _type = fiber.type;
                var _props = fiber.pendingProps;
                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                break;
              case HostText:
                var _text = fiber.pendingProps;
                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                break;
            }
            break;
          }
        default:
          return;
      }
    }
  }

  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case HostComponent:
        {
          var type = fiber.type;
          var props = fiber.pendingProps;
          var instance = canHydrateInstance(nextInstance, type, props);
          if (instance !== null) {
            fiber.stateNode = instance;
            return true;
          }
          return false;
        }
      case HostText:
        {
          var text = fiber.pendingProps;
          var textInstance = canHydrateTextInstance(nextInstance, text);
          if (textInstance !== null) {
            fiber.stateNode = textInstance;
            return true;
          }
          return false;
        }
      default:
        return false;
    }
  }

  function tryToClaimNextHydratableInstance(fiber) {
    if (!isHydrating) {
      return;
    }
    var nextInstance = nextHydratableInstance;
    if (!nextInstance) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    }
    if (!tryHydrate(fiber, nextInstance)) {
      // If we can't hydrate this instance let's try the next one.
      // We use this as a heuristic. It's based on intuition and not data so it
      // might be flawed or unnecessary.
      nextInstance = getNextHydratableSibling(nextInstance);
      if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
        // Nothing to hydrate. Make it an insertion.
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }
      // We matched the next one, we'll now assume that the first one was
      // superfluous and we'll delete it. Since we can't eagerly delete it
      // we'll have to schedule a deletion. To do that, this node needs a dummy
      // fiber associated with it.
      deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
    }
    hydrationParentFiber = fiber;
    nextHydratableInstance = getFirstHydratableChild(nextInstance);
  }

  function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
    var instance = fiber.stateNode;
    var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
    // TODO: Type this specific to this type of component.
    fiber.updateQueue = updatePayload;
    // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update.
    if (updatePayload !== null) {
      return true;
    }
    return false;
  }

  function prepareToHydrateHostTextInstance(fiber) {
    var textInstance = fiber.stateNode;
    var textContent = fiber.memoizedProps;
    var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
    {
      if (shouldUpdate) {
        // We assume that prepareToHydrateHostTextInstance is called in a context where the
        // hydration parent is the parent host component of this host text.
        var returnFiber = hydrationParentFiber;
        if (returnFiber !== null) {
          switch (returnFiber.tag) {
            case HostRoot:
              {
                var parentContainer = returnFiber.stateNode.containerInfo;
                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                break;
              }
            case HostComponent:
              {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                break;
              }
          }
        }
      }
    }
    return shouldUpdate;
  }

  function popToNextHostParent(fiber) {
    var parent = fiber['return'];
    while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
      parent = parent['return'];
    }
    hydrationParentFiber = parent;
  }

  function popHydrationState(fiber) {
    if (fiber !== hydrationParentFiber) {
      // We're deeper than the current hydration context, inside an inserted
      // tree.
      return false;
    }
    if (!isHydrating) {
      // If we're not currently hydrating but we're in a hydration context, then
      // we were an insertion and now need to pop up reenter hydration of our
      // siblings.
      popToNextHostParent(fiber);
      isHydrating = true;
      return false;
    }

    var type = fiber.type;

    // If we have any remaining hydratable nodes, we need to delete them now.
    // We only do this deeper than head and body since they tend to have random
    // other nodes in them. We also ignore components with pure text content in
    // side of them.
    // TODO: Better heuristic.
    if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
      var nextInstance = nextHydratableInstance;
      while (nextInstance) {
        deleteHydratableInstance(fiber, nextInstance);
        nextInstance = getNextHydratableSibling(nextInstance);
      }
    }

    popToNextHostParent(fiber);
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
    return true;
  }

  function resetHydrationState() {
    hydrationParentFiber = null;
    nextHydratableInstance = null;
    isHydrating = false;
  }

  return {
    enterHydrationState: enterHydrationState,
    resetHydrationState: resetHydrationState,
    tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
    prepareToHydrateHostInstance: prepareToHydrateHostInstance,
    prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
    popHydrationState: popHydrationState
  };
};

// This lets us hook into Fiber to debug what it's doing.
// See https://github.com/facebook/react/pull/8033.
// This is not part of the public API, not even for React DevTools.
// You may only inject a debugTool if you work on React Fiber itself.
var ReactFiberInstrumentation = {
  debugTool: null
};

var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

var defaultShowDialog = function (capturedError) {
  return true;
};

var showDialog = defaultShowDialog;

function logCapturedError(capturedError) {
  var logError = showDialog(capturedError);

  // Allow injected showDialog() to prevent default console.error logging.
  // This enables renderers like ReactNative to better manage redbox behavior.
  if (logError === false) {
    return;
  }

  var error = capturedError.error;
  var suppressLogging = error && error.suppressReactErrorLogging;
  if (suppressLogging) {
    return;
  }

  {
    var componentName = capturedError.componentName,
        componentStack = capturedError.componentStack,
        errorBoundaryName = capturedError.errorBoundaryName,
        errorBoundaryFound = capturedError.errorBoundaryFound,
        willRetry = capturedError.willRetry;


    var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';

    var errorBoundaryMessage = void 0;
    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
    if (errorBoundaryFound && errorBoundaryName) {
      if (willRetry) {
        errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
      } else {
        errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
      }
    } else {
      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
    }
    var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);

    // In development, we provide our own message with just the component stack.
    // We don't include the original error message and JS stack because the browser
    // has already printed it. Even if the application swallows the error, it is still
    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
    console.error(combinedMessage);
  }
}

var invokeGuardedCallback$1 = ReactErrorUtils.invokeGuardedCallback;
var hasCaughtError = ReactErrorUtils.hasCaughtError;
var clearCaughtError = ReactErrorUtils.clearCaughtError;


{
  var didWarnAboutStateTransition = false;
  var didWarnSetStateChildContext = false;
  var didWarnStateUpdateForUnmountedComponent = {};

  var warnAboutUpdateOnUnmounted = function (fiber) {
    var componentName = getComponentName(fiber) || 'ReactClass';
    if (didWarnStateUpdateForUnmountedComponent[componentName]) {
      return;
    }
    warning(false, 'Can only update a mounted or mounting ' + 'component. This usually means you called setState, replaceState, ' + 'or forceUpdate on an unmounted component. This is a no-op.\n\nPlease ' + 'check the code for the %s component.', componentName);
    didWarnStateUpdateForUnmountedComponent[componentName] = true;
  };

  var warnAboutInvalidUpdates = function (instance) {
    switch (ReactDebugCurrentFiber.phase) {
      case 'getChildContext':
        if (didWarnSetStateChildContext) {
          return;
        }
        warning(false, 'setState(...): Cannot call setState() inside getChildContext()');
        didWarnSetStateChildContext = true;
        break;
      case 'render':
        if (didWarnAboutStateTransition) {
          return;
        }
        warning(false, 'Cannot update during an existing state transition (such as within ' + "`render` or another component's constructor). Render methods should " + 'be a pure function of props and state; constructor side-effects are ' + 'an anti-pattern, but can be moved to `componentWillMount`.');
        didWarnAboutStateTransition = true;
        break;
    }
  };
}

var ReactFiberScheduler = function (config) {
  var hostContext = ReactFiberHostContext(config);
  var hydrationContext = ReactFiberHydrationContext(config);
  var popHostContainer = hostContext.popHostContainer,
      popHostContext = hostContext.popHostContext,
      resetHostContainer = hostContext.resetHostContainer;

  var _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber),
      beginWork = _ReactFiberBeginWork.beginWork,
      beginFailedWork = _ReactFiberBeginWork.beginFailedWork;

  var _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext),
      completeWork = _ReactFiberCompleteWo.completeWork;

  var _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError),
      commitResetTextContent = _ReactFiberCommitWork.commitResetTextContent,
      commitPlacement = _ReactFiberCommitWork.commitPlacement,
      commitDeletion = _ReactFiberCommitWork.commitDeletion,
      commitWork = _ReactFiberCommitWork.commitWork,
      commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
      commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
      commitDetachRef = _ReactFiberCommitWork.commitDetachRef;

  var now = config.now,
      scheduleDeferredCallback = config.scheduleDeferredCallback,
      cancelDeferredCallback = config.cancelDeferredCallback,
      useSyncScheduling = config.useSyncScheduling,
      prepareForCommit = config.prepareForCommit,
      resetAfterCommit = config.resetAfterCommit;

  // Represents the current time in ms.

  var startTime = now();
  var mostRecentCurrentTime = msToExpirationTime(0);

  // Represents the expiration time that incoming updates should use. (If this
  // is NoWork, use the default strategy: async updates in async mode, sync
  // updates in sync mode.)
  var expirationContext = NoWork;

  var isWorking = false;

  // The next work in progress fiber that we're currently working on.
  var nextUnitOfWork = null;
  var nextRoot = null;
  // The time at which we're currently rendering work.
  var nextRenderExpirationTime = NoWork;

  // The next fiber with an effect that we're currently committing.
  var nextEffect = null;

  // Keep track of which fibers have captured an error that need to be handled.
  // Work is removed from this collection after componentDidCatch is called.
  var capturedErrors = null;
  // Keep track of which fibers have failed during the current batch of work.
  // This is a different set than capturedErrors, because it is not reset until
  // the end of the batch. This is needed to propagate errors correctly if a
  // subtree fails more than once.
  var failedBoundaries = null;
  // Error boundaries that captured an error during the current commit.
  var commitPhaseBoundaries = null;
  var firstUncaughtError = null;
  var didFatal = false;

  var isCommitting = false;
  var isUnmounting = false;

  // Used for performance tracking.
  var interruptedBy = null;

  function resetContextStack() {
    // Reset the stack
    reset$1();
    // Reset the cursors
    resetContext();
    resetHostContainer();
  }

  function commitAllHostEffects() {
    while (nextEffect !== null) {
      {
        ReactDebugCurrentFiber.setCurrentFiber(nextEffect);
      }
      recordEffect();

      var effectTag = nextEffect.effectTag;
      if (effectTag & ContentReset) {
        commitResetTextContent(nextEffect);
      }

      if (effectTag & Ref) {
        var current = nextEffect.alternate;
        if (current !== null) {
          commitDetachRef(current);
        }
      }

      // The following switch statement is only concerned about placement,
      // updates, and deletions. To avoid needing to add a case for every
      // possible bitmap value, we remove the secondary effects from the
      // effect tag and switch on that value.
      var primaryEffectTag = effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork);
      switch (primaryEffectTag) {
        case Placement:
          {
            commitPlacement(nextEffect);
            // Clear the "placement" from effect tag so that we know that this is inserted, before
            // any life-cycles like componentDidMount gets called.
            // TODO: findDOMNode doesn't rely on this any more but isMounted
            // does and isMounted is deprecated anyway so we should be able
            // to kill this.
            nextEffect.effectTag &= ~Placement;
            break;
          }
        case PlacementAndUpdate:
          {
            // Placement
            commitPlacement(nextEffect);
            // Clear the "placement" from effect tag so that we know that this is inserted, before
            // any life-cycles like componentDidMount gets called.
            nextEffect.effectTag &= ~Placement;

            // Update
            var _current = nextEffect.alternate;
            commitWork(_current, nextEffect);
            break;
          }
        case Update:
          {
            var _current2 = nextEffect.alternate;
            commitWork(_current2, nextEffect);
            break;
          }
        case Deletion:
          {
            isUnmounting = true;
            commitDeletion(nextEffect);
            isUnmounting = false;
            break;
          }
      }
      nextEffect = nextEffect.nextEffect;
    }

    {
      ReactDebugCurrentFiber.resetCurrentFiber();
    }
  }

  function commitAllLifeCycles() {
    while (nextEffect !== null) {
      var effectTag = nextEffect.effectTag;

      if (effectTag & (Update | Callback)) {
        recordEffect();
        var current = nextEffect.alternate;
        commitLifeCycles(current, nextEffect);
      }

      if (effectTag & Ref) {
        recordEffect();
        commitAttachRef(nextEffect);
      }

      if (effectTag & Err) {
        recordEffect();
        commitErrorHandling(nextEffect);
      }

      var next = nextEffect.nextEffect;
      // Ensure that we clean these up so that we don't accidentally keep them.
      // I'm not actually sure this matters because we can't reset firstEffect
      // and lastEffect since they're on every node, not just the effectful
      // ones. So we have to clean everything as we reuse nodes anyway.
      nextEffect.nextEffect = null;
      // Ensure that we reset the effectTag here so that we can rely on effect
      // tags to reason about the current life-cycle.
      nextEffect = next;
    }
  }

  function commitRoot(finishedWork) {
    // We keep track of this so that captureError can collect any boundaries
    // that capture an error during the commit phase. The reason these aren't
    // local to this function is because errors that occur during cWU are
    // captured elsewhere, to prevent the unmount from being interrupted.
    isWorking = true;
    isCommitting = true;
    startCommitTimer();

    var root = finishedWork.stateNode;
    !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    root.isReadyForCommit = false;

    // Reset this to null before calling lifecycles
    ReactCurrentOwner.current = null;

    var firstEffect = void 0;
    if (finishedWork.effectTag > PerformedWork) {
      // A fiber's effect list consists only of its children, not itself. So if
      // the root has an effect, we need to add it to the end of the list. The
      // resulting list is the set that would belong to the root's parent, if
      // it had one; that is, all the effects in the tree including the root.
      if (finishedWork.lastEffect !== null) {
        finishedWork.lastEffect.nextEffect = finishedWork;
        firstEffect = finishedWork.firstEffect;
      } else {
        firstEffect = finishedWork;
      }
    } else {
      // There is no effect on the root.
      firstEffect = finishedWork.firstEffect;
    }

    prepareForCommit();

    // Commit all the side-effects within a tree. We'll do this in two passes.
    // The first pass performs all the host insertions, updates, deletions and
    // ref unmounts.
    nextEffect = firstEffect;
    startCommitHostEffectsTimer();
    while (nextEffect !== null) {
      var didError = false;
      var _error = void 0;
      {
        invokeGuardedCallback$1(null, commitAllHostEffects, null);
        if (hasCaughtError()) {
          didError = true;
          _error = clearCaughtError();
        }
      }
      if (didError) {
        !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        captureError(nextEffect, _error);
        // Clean-up
        if (nextEffect !== null) {
          nextEffect = nextEffect.nextEffect;
        }
      }
    }
    stopCommitHostEffectsTimer();

    resetAfterCommit();

    // The work-in-progress tree is now the current tree. This must come after
    // the first pass of the commit phase, so that the previous tree is still
    // current during componentWillUnmount, but before the second pass, so that
    // the finished work is current during componentDidMount/Update.
    root.current = finishedWork;

    // In the second pass we'll perform all life-cycles and ref callbacks.
    // Life-cycles happen as a separate pass so that all placements, updates,
    // and deletions in the entire tree have already been invoked.
    // This pass also triggers any renderer-specific initial effects.
    nextEffect = firstEffect;
    startCommitLifeCyclesTimer();
    while (nextEffect !== null) {
      var _didError = false;
      var _error2 = void 0;
      {
        invokeGuardedCallback$1(null, commitAllLifeCycles, null);
        if (hasCaughtError()) {
          _didError = true;
          _error2 = clearCaughtError();
        }
      }
      if (_didError) {
        !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        captureError(nextEffect, _error2);
        if (nextEffect !== null) {
          nextEffect = nextEffect.nextEffect;
        }
      }
    }

    isCommitting = false;
    isWorking = false;
    stopCommitLifeCyclesTimer();
    stopCommitTimer();
    if (typeof onCommitRoot === 'function') {
      onCommitRoot(finishedWork.stateNode);
    }
    if (true && ReactFiberInstrumentation_1.debugTool) {
      ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
    }

    // If we caught any errors during this commit, schedule their boundaries
    // to update.
    if (commitPhaseBoundaries) {
      commitPhaseBoundaries.forEach(scheduleErrorRecovery);
      commitPhaseBoundaries = null;
    }

    if (firstUncaughtError !== null) {
      var _error3 = firstUncaughtError;
      firstUncaughtError = null;
      onUncaughtError(_error3);
    }

    var remainingTime = root.current.expirationTime;

    if (remainingTime === NoWork) {
      capturedErrors = null;
      failedBoundaries = null;
    }

    return remainingTime;
  }

  function resetExpirationTime(workInProgress, renderTime) {
    if (renderTime !== Never && workInProgress.expirationTime === Never) {
      // The children of this component are hidden. Don't bubble their
      // expiration times.
      return;
    }

    // Check for pending updates.
    var newExpirationTime = getUpdateExpirationTime(workInProgress);

    // TODO: Calls need to visit stateNode

    // Bubble up the earliest expiration time.
    var child = workInProgress.child;
    while (child !== null) {
      if (child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > child.expirationTime)) {
        newExpirationTime = child.expirationTime;
      }
      child = child.sibling;
    }
    workInProgress.expirationTime = newExpirationTime;
  }

  function completeUnitOfWork(workInProgress) {
    while (true) {
      // The current, flushed, state of this fiber is the alternate.
      // Ideally nothing should rely on this, but relying on it here
      // means that we don't need an additional field on the work in
      // progress.
      var current = workInProgress.alternate;
      {
        ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
      }
      var next = completeWork(current, workInProgress, nextRenderExpirationTime);
      {
        ReactDebugCurrentFiber.resetCurrentFiber();
      }

      var returnFiber = workInProgress['return'];
      var siblingFiber = workInProgress.sibling;

      resetExpirationTime(workInProgress, nextRenderExpirationTime);

      if (next !== null) {
        stopWorkTimer(workInProgress);
        if (true && ReactFiberInstrumentation_1.debugTool) {
          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
        }
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        return next;
      }

      if (returnFiber !== null) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = workInProgress.firstEffect;
        }
        if (workInProgress.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
          }
          returnFiber.lastEffect = workInProgress.lastEffect;
        }

        // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if
        // needed, by doing multiple passes over the effect list. We don't want
        // to schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.
        var effectTag = workInProgress.effectTag;
        // Skip both NoWork and PerformedWork tags when creating the effect list.
        // PerformedWork effect is read by React DevTools but shouldn't be committed.
        if (effectTag > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress;
          } else {
            returnFiber.firstEffect = workInProgress;
          }
          returnFiber.lastEffect = workInProgress;
        }
      }

      stopWorkTimer(workInProgress);
      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
      }

      if (siblingFiber !== null) {
        // If there is more work to do in this returnFiber, do that next.
        return siblingFiber;
      } else if (returnFiber !== null) {
        // If there's no more work in this returnFiber. Complete the returnFiber.
        workInProgress = returnFiber;
        continue;
      } else {
        // We've reached the root.
        var root = workInProgress.stateNode;
        root.isReadyForCommit = true;
        return null;
      }
    }

    // Without this explicit null return Flow complains of invalid return type
    // TODO Remove the above while(true) loop
    // eslint-disable-next-line no-unreachable
    return null;
  }

  function performUnitOfWork(workInProgress) {
    // The current, flushed, state of this fiber is the alternate.
    // Ideally nothing should rely on this, but relying on it here
    // means that we don't need an additional field on the work in
    // progress.
    var current = workInProgress.alternate;

    // See if beginning this work spawns more work.
    startWorkTimer(workInProgress);
    {
      ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
    }

    var next = beginWork(current, workInProgress, nextRenderExpirationTime);
    {
      ReactDebugCurrentFiber.resetCurrentFiber();
    }
    if (true && ReactFiberInstrumentation_1.debugTool) {
      ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
    }

    if (next === null) {
      // If this doesn't spawn new work, complete the current work.
      next = completeUnitOfWork(workInProgress);
    }

    ReactCurrentOwner.current = null;

    return next;
  }

  function performFailedUnitOfWork(workInProgress) {
    // The current, flushed, state of this fiber is the alternate.
    // Ideally nothing should rely on this, but relying on it here
    // means that we don't need an additional field on the work in
    // progress.
    var current = workInProgress.alternate;

    // See if beginning this work spawns more work.
    startWorkTimer(workInProgress);
    {
      ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
    }
    var next = beginFailedWork(current, workInProgress, nextRenderExpirationTime);
    {
      ReactDebugCurrentFiber.resetCurrentFiber();
    }
    if (true && ReactFiberInstrumentation_1.debugTool) {
      ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
    }

    if (next === null) {
      // If this doesn't spawn new work, complete the current work.
      next = completeUnitOfWork(workInProgress);
    }

    ReactCurrentOwner.current = null;

    return next;
  }

  function workLoop(expirationTime) {
    if (capturedErrors !== null) {
      // If there are unhandled errors, switch to the slow work loop.
      // TODO: How to avoid this check in the fast path? Maybe the renderer
      // could keep track of which roots have unhandled errors and call a
      // forked version of renderRoot.
      slowWorkLoopThatChecksForFailedWork(expirationTime);
      return;
    }
    if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
      return;
    }

    if (nextRenderExpirationTime <= mostRecentCurrentTime) {
      // Flush all expired work.
      while (nextUnitOfWork !== null) {
        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
      }
    } else {
      // Flush asynchronous work until the deadline runs out of time.
      while (nextUnitOfWork !== null && !shouldYield()) {
        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
      }
    }
  }

  function slowWorkLoopThatChecksForFailedWork(expirationTime) {
    if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
      return;
    }

    if (nextRenderExpirationTime <= mostRecentCurrentTime) {
      // Flush all expired work.
      while (nextUnitOfWork !== null) {
        if (hasCapturedError(nextUnitOfWork)) {
          // Use a forked version of performUnitOfWork
          nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
        } else {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      }
    } else {
      // Flush asynchronous work until the deadline runs out of time.
      while (nextUnitOfWork !== null && !shouldYield()) {
        if (hasCapturedError(nextUnitOfWork)) {
          // Use a forked version of performUnitOfWork
          nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
        } else {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      }
    }
  }

  function renderRootCatchBlock(root, failedWork, boundary, expirationTime) {
    // We're going to restart the error boundary that captured the error.
    // Conceptually, we're unwinding the stack. We need to unwind the
    // context stack, too.
    unwindContexts(failedWork, boundary);

    // Restart the error boundary using a forked version of
    // performUnitOfWork that deletes the boundary's children. The entire
    // failed subree will be unmounted. During the commit phase, a special
    // lifecycle method is called on the error boundary, which triggers
    // a re-render.
    nextUnitOfWork = performFailedUnitOfWork(boundary);

    // Continue working.
    workLoop(expirationTime);
  }

  function renderRoot(root, expirationTime) {
    !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    isWorking = true;

    // We're about to mutate the work-in-progress tree. If the root was pending
    // commit, it no longer is: we'll need to complete it again.
    root.isReadyForCommit = false;

    // Check if we're starting from a fresh stack, or if we're resuming from
    // previously yielded work.
    if (root !== nextRoot || expirationTime !== nextRenderExpirationTime || nextUnitOfWork === null) {
      // Reset the stack and start working from the root.
      resetContextStack();
      nextRoot = root;
      nextRenderExpirationTime = expirationTime;
      nextUnitOfWork = createWorkInProgress(nextRoot.current, null, expirationTime);
    }

    startWorkLoopTimer(nextUnitOfWork);

    var didError = false;
    var error = null;
    {
      invokeGuardedCallback$1(null, workLoop, null, expirationTime);
      if (hasCaughtError()) {
        didError = true;
        error = clearCaughtError();
      }
    }

    // An error was thrown during the render phase.
    while (didError) {
      if (didFatal) {
        // This was a fatal error. Don't attempt to recover from it.
        firstUncaughtError = error;
        break;
      }

      var failedWork = nextUnitOfWork;
      if (failedWork === null) {
        // An error was thrown but there's no current unit of work. This can
        // happen during the commit phase if there's a bug in the renderer.
        didFatal = true;
        continue;
      }

      // "Capture" the error by finding the nearest boundary. If there is no
      // error boundary, we use the root.
      var boundary = captureError(failedWork, error);
      !(boundary !== null) ? invariant(false, 'Should have found an error boundary. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      if (didFatal) {
        // The error we just captured was a fatal error. This happens
        // when the error propagates to the root more than once.
        continue;
      }

      didError = false;
      error = null;
      {
        invokeGuardedCallback$1(null, renderRootCatchBlock, null, root, failedWork, boundary, expirationTime);
        if (hasCaughtError()) {
          didError = true;
          error = clearCaughtError();
          continue;
        }
      }
      // We're finished working. Exit the error loop.
      break;
    }

    var uncaughtError = firstUncaughtError;

    // We're done performing work. Time to clean up.
    stopWorkLoopTimer(interruptedBy);
    interruptedBy = null;
    isWorking = false;
    didFatal = false;
    firstUncaughtError = null;

    if (uncaughtError !== null) {
      onUncaughtError(uncaughtError);
    }

    return root.isReadyForCommit ? root.current.alternate : null;
  }

  // Returns the boundary that captured the error, or null if the error is ignored
  function captureError(failedWork, error) {
    // It is no longer valid because we exited the user code.
    ReactCurrentOwner.current = null;
    {
      ReactDebugCurrentFiber.resetCurrentFiber();
    }

    // Search for the nearest error boundary.
    var boundary = null;

    // Passed to logCapturedError()
    var errorBoundaryFound = false;
    var willRetry = false;
    var errorBoundaryName = null;

    // Host containers are a special case. If the failed work itself is a host
    // container, then it acts as its own boundary. In all other cases, we
    // ignore the work itself and only search through the parents.
    if (failedWork.tag === HostRoot) {
      boundary = failedWork;

      if (isFailedBoundary(failedWork)) {
        // If this root already failed, there must have been an error when
        // attempting to unmount it. This is a worst-case scenario and
        // should only be possible if there's a bug in the renderer.
        didFatal = true;
      }
    } else {
      var node = failedWork['return'];
      while (node !== null && boundary === null) {
        if (node.tag === ClassComponent) {
          var instance = node.stateNode;
          if (typeof instance.componentDidCatch === 'function') {
            errorBoundaryFound = true;
            errorBoundaryName = getComponentName(node);

            // Found an error boundary!
            boundary = node;
            willRetry = true;
          }
        } else if (node.tag === HostRoot) {
          // Treat the root like a no-op error boundary
          boundary = node;
        }

        if (isFailedBoundary(node)) {
          // This boundary is already in a failed state.

          // If we're currently unmounting, that means this error was
          // thrown while unmounting a failed subtree. We should ignore
          // the error.
          if (isUnmounting) {
            return null;
          }

          // If we're in the commit phase, we should check to see if
          // this boundary already captured an error during this commit.
          // This case exists because multiple errors can be thrown during
          // a single commit without interruption.
          if (commitPhaseBoundaries !== null && (commitPhaseBoundaries.has(node) || node.alternate !== null && commitPhaseBoundaries.has(node.alternate))) {
            // If so, we should ignore this error.
            return null;
          }

          // The error should propagate to the next boundary -— we keep looking.
          boundary = null;
          willRetry = false;
        }

        node = node['return'];
      }
    }

    if (boundary !== null) {
      // Add to the collection of failed boundaries. This lets us know that
      // subsequent errors in this subtree should propagate to the next boundary.
      if (failedBoundaries === null) {
        failedBoundaries = new Set();
      }
      failedBoundaries.add(boundary);

      // This method is unsafe outside of the begin and complete phases.
      // We might be in the commit phase when an error is captured.
      // The risk is that the return path from this Fiber may not be accurate.
      // That risk is acceptable given the benefit of providing users more context.
      var _componentStack = getStackAddendumByWorkInProgressFiber(failedWork);
      var _componentName = getComponentName(failedWork);

      // Add to the collection of captured errors. This is stored as a global
      // map of errors and their component stack location keyed by the boundaries
      // that capture them. We mostly use this Map as a Set; it's a Map only to
      // avoid adding a field to Fiber to store the error.
      if (capturedErrors === null) {
        capturedErrors = new Map();
      }

      var capturedError = {
        componentName: _componentName,
        componentStack: _componentStack,
        error: error,
        errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
        errorBoundaryFound: errorBoundaryFound,
        errorBoundaryName: errorBoundaryName,
        willRetry: willRetry
      };

      capturedErrors.set(boundary, capturedError);

      try {
        logCapturedError(capturedError);
      } catch (e) {
        // Prevent cycle if logCapturedError() throws.
        // A cycle may still occur if logCapturedError renders a component that throws.
        var suppressLogging = e && e.suppressReactErrorLogging;
        if (!suppressLogging) {
          console.error(e);
        }
      }

      // If we're in the commit phase, defer scheduling an update on the
      // boundary until after the commit is complete
      if (isCommitting) {
        if (commitPhaseBoundaries === null) {
          commitPhaseBoundaries = new Set();
        }
        commitPhaseBoundaries.add(boundary);
      } else {
        // Otherwise, schedule an update now.
        // TODO: Is this actually necessary during the render phase? Is it
        // possible to unwind and continue rendering at the same priority,
        // without corrupting internal state?
        scheduleErrorRecovery(boundary);
      }
      return boundary;
    } else if (firstUncaughtError === null) {
      // If no boundary is found, we'll need to throw the error
      firstUncaughtError = error;
    }
    return null;
  }

  function hasCapturedError(fiber) {
    // TODO: capturedErrors should store the boundary instance, to avoid needing
    // to check the alternate.
    return capturedErrors !== null && (capturedErrors.has(fiber) || fiber.alternate !== null && capturedErrors.has(fiber.alternate));
  }

  function isFailedBoundary(fiber) {
    // TODO: failedBoundaries should store the boundary instance, to avoid
    // needing to check the alternate.
    return failedBoundaries !== null && (failedBoundaries.has(fiber) || fiber.alternate !== null && failedBoundaries.has(fiber.alternate));
  }

  function commitErrorHandling(effectfulFiber) {
    var capturedError = void 0;
    if (capturedErrors !== null) {
      capturedError = capturedErrors.get(effectfulFiber);
      capturedErrors['delete'](effectfulFiber);
      if (capturedError == null) {
        if (effectfulFiber.alternate !== null) {
          effectfulFiber = effectfulFiber.alternate;
          capturedError = capturedErrors.get(effectfulFiber);
          capturedErrors['delete'](effectfulFiber);
        }
      }
    }

    !(capturedError != null) ? invariant(false, 'No error for given unit of work. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    switch (effectfulFiber.tag) {
      case ClassComponent:
        var instance = effectfulFiber.stateNode;

        var info = {
          componentStack: capturedError.componentStack
        };

        // Allow the boundary to handle the error, usually by scheduling
        // an update to itself
        instance.componentDidCatch(capturedError.error, info);
        return;
      case HostRoot:
        if (firstUncaughtError === null) {
          firstUncaughtError = capturedError.error;
        }
        return;
      default:
        invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
    }
  }

  function unwindContexts(from, to) {
    var node = from;
    while (node !== null) {
      switch (node.tag) {
        case ClassComponent:
          popContextProvider(node);
          break;
        case HostComponent:
          popHostContext(node);
          break;
        case HostRoot:
          popHostContainer(node);
          break;
        case HostPortal:
          popHostContainer(node);
          break;
      }
      if (node === to || node.alternate === to) {
        stopFailedWorkTimer(node);
        break;
      } else {
        stopWorkTimer(node);
      }
      node = node['return'];
    }
  }

  function computeAsyncExpiration() {
    // Given the current clock time, returns an expiration time. We use rounding
    // to batch like updates together.
    // Should complete within ~1000ms. 1200ms max.
    var currentTime = recalculateCurrentTime();
    var expirationMs = 1000;
    var bucketSizeMs = 200;
    return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
  }

  function computeExpirationForFiber(fiber) {
    var expirationTime = void 0;
    if (expirationContext !== NoWork) {
      // An explicit expiration context was set;
      expirationTime = expirationContext;
    } else if (isWorking) {
      if (isCommitting) {
        // Updates that occur during the commit phase should have sync priority
        // by default.
        expirationTime = Sync;
      } else {
        // Updates during the render phase should expire at the same time as
        // the work that is being rendered.
        expirationTime = nextRenderExpirationTime;
      }
    } else {
      // No explicit expiration context was set, and we're not currently
      // performing work. Calculate a new expiration time.
      if (useSyncScheduling && !(fiber.internalContextTag & AsyncUpdates)) {
        // This is a sync update
        expirationTime = Sync;
      } else {
        // This is an async update
        expirationTime = computeAsyncExpiration();
      }
    }
    return expirationTime;
  }

  function scheduleWork(fiber, expirationTime) {
    return scheduleWorkImpl(fiber, expirationTime, false);
  }

  function checkRootNeedsClearing(root, fiber, expirationTime) {
    if (!isWorking && root === nextRoot && expirationTime < nextRenderExpirationTime) {
      // Restart the root from the top.
      if (nextUnitOfWork !== null) {
        // This is an interruption. (Used for performance tracking.)
        interruptedBy = fiber;
      }
      nextRoot = null;
      nextUnitOfWork = null;
      nextRenderExpirationTime = NoWork;
    }
  }

  function scheduleWorkImpl(fiber, expirationTime, isErrorRecovery) {
    recordScheduleUpdate();

    {
      if (!isErrorRecovery && fiber.tag === ClassComponent) {
        var instance = fiber.stateNode;
        warnAboutInvalidUpdates(instance);
      }
    }

    var node = fiber;
    while (node !== null) {
      // Walk the parent path to the root and update each node's
      // expiration time.
      if (node.expirationTime === NoWork || node.expirationTime > expirationTime) {
        node.expirationTime = expirationTime;
      }
      if (node.alternate !== null) {
        if (node.alternate.expirationTime === NoWork || node.alternate.expirationTime > expirationTime) {
          node.alternate.expirationTime = expirationTime;
        }
      }
      if (node['return'] === null) {
        if (node.tag === HostRoot) {
          var root = node.stateNode;

          checkRootNeedsClearing(root, fiber, expirationTime);
          requestWork(root, expirationTime);
          checkRootNeedsClearing(root, fiber, expirationTime);
        } else {
          {
            if (!isErrorRecovery && fiber.tag === ClassComponent) {
              warnAboutUpdateOnUnmounted(fiber);
            }
          }
          return;
        }
      }
      node = node['return'];
    }
  }

  function scheduleErrorRecovery(fiber) {
    scheduleWorkImpl(fiber, Sync, true);
  }

  function recalculateCurrentTime() {
    // Subtract initial time so it fits inside 32bits
    var ms = now() - startTime;
    mostRecentCurrentTime = msToExpirationTime(ms);
    return mostRecentCurrentTime;
  }

  function deferredUpdates(fn) {
    var previousExpirationContext = expirationContext;
    expirationContext = computeAsyncExpiration();
    try {
      return fn();
    } finally {
      expirationContext = previousExpirationContext;
    }
  }

  function syncUpdates(fn) {
    var previousExpirationContext = expirationContext;
    expirationContext = Sync;
    try {
      return fn();
    } finally {
      expirationContext = previousExpirationContext;
    }
  }

  // TODO: Everything below this is written as if it has been lifted to the
  // renderers. I'll do this in a follow-up.

  // Linked-list of roots
  var firstScheduledRoot = null;
  var lastScheduledRoot = null;

  var callbackExpirationTime = NoWork;
  var callbackID = -1;
  var isRendering = false;
  var nextFlushedRoot = null;
  var nextFlushedExpirationTime = NoWork;
  var deadlineDidExpire = false;
  var hasUnhandledError = false;
  var unhandledError = null;
  var deadline = null;

  var isBatchingUpdates = false;
  var isUnbatchingUpdates = false;

  // Use these to prevent an infinite loop of nested updates
  var NESTED_UPDATE_LIMIT = 1000;
  var nestedUpdateCount = 0;

  var timeHeuristicForUnitOfWork = 1;

  function scheduleCallbackWithExpiration(expirationTime) {
    if (callbackExpirationTime !== NoWork) {
      // A callback is already scheduled. Check its expiration time (timeout).
      if (expirationTime > callbackExpirationTime) {
        // Existing callback has sufficient timeout. Exit.
        return;
      } else {
        // Existing callback has insufficient timeout. Cancel and schedule a
        // new one.
        cancelDeferredCallback(callbackID);
      }
      // The request callback timer is already running. Don't start a new one.
    } else {
      startRequestCallbackTimer();
    }

    // Compute a timeout for the given expiration time.
    var currentMs = now() - startTime;
    var expirationMs = expirationTimeToMs(expirationTime);
    var timeout = expirationMs - currentMs;

    callbackExpirationTime = expirationTime;
    callbackID = scheduleDeferredCallback(performAsyncWork, { timeout: timeout });
  }

  // requestWork is called by the scheduler whenever a root receives an update.
  // It's up to the renderer to call renderRoot at some point in the future.
  function requestWork(root, expirationTime) {
    if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
      invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
    }

    // Add the root to the schedule.
    // Check if this root is already part of the schedule.
    if (root.nextScheduledRoot === null) {
      // This root is not already scheduled. Add it.
      root.remainingExpirationTime = expirationTime;
      if (lastScheduledRoot === null) {
        firstScheduledRoot = lastScheduledRoot = root;
        root.nextScheduledRoot = root;
      } else {
        lastScheduledRoot.nextScheduledRoot = root;
        lastScheduledRoot = root;
        lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
      }
    } else {
      // This root is already scheduled, but its priority may have increased.
      var remainingExpirationTime = root.remainingExpirationTime;
      if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
        // Update the priority.
        root.remainingExpirationTime = expirationTime;
      }
    }

    if (isRendering) {
      // Prevent reentrancy. Remaining work will be scheduled at the end of
      // the currently rendering batch.
      return;
    }

    if (isBatchingUpdates) {
      // Flush work at the end of the batch.
      if (isUnbatchingUpdates) {
        // ...unless we're inside unbatchedUpdates, in which case we should
        // flush it now.
        nextFlushedRoot = root;
        nextFlushedExpirationTime = Sync;
        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime);
      }
      return;
    }

    // TODO: Get rid of Sync and use current time?
    if (expirationTime === Sync) {
      performWork(Sync, null);
    } else {
      scheduleCallbackWithExpiration(expirationTime);
    }
  }

  function findHighestPriorityRoot() {
    var highestPriorityWork = NoWork;
    var highestPriorityRoot = null;

    if (lastScheduledRoot !== null) {
      var previousScheduledRoot = lastScheduledRoot;
      var root = firstScheduledRoot;
      while (root !== null) {
        var remainingExpirationTime = root.remainingExpirationTime;
        if (remainingExpirationTime === NoWork) {
          // This root no longer has work. Remove it from the scheduler.

          // TODO: This check is redudant, but Flow is confused by the branch
          // below where we set lastScheduledRoot to null, even though we break
          // from the loop right after.
          !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          if (root === root.nextScheduledRoot) {
            // This is the only root in the list.
            root.nextScheduledRoot = null;
            firstScheduledRoot = lastScheduledRoot = null;
            break;
          } else if (root === firstScheduledRoot) {
            // This is the first root in the list.
            var next = root.nextScheduledRoot;
            firstScheduledRoot = next;
            lastScheduledRoot.nextScheduledRoot = next;
            root.nextScheduledRoot = null;
          } else if (root === lastScheduledRoot) {
            // This is the last root in the list.
            lastScheduledRoot = previousScheduledRoot;
            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            root.nextScheduledRoot = null;
            break;
          } else {
            previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
            root.nextScheduledRoot = null;
          }
          root = previousScheduledRoot.nextScheduledRoot;
        } else {
          if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
            // Update the priority, if it's higher
            highestPriorityWork = remainingExpirationTime;
            highestPriorityRoot = root;
          }
          if (root === lastScheduledRoot) {
            break;
          }
          previousScheduledRoot = root;
          root = root.nextScheduledRoot;
        }
      }
    }

    // If the next root is the same as the previous root, this is a nested
    // update. To prevent an infinite loop, increment the nested update count.
    var previousFlushedRoot = nextFlushedRoot;
    if (previousFlushedRoot !== null && previousFlushedRoot === highestPriorityRoot) {
      nestedUpdateCount++;
    } else {
      // Reset whenever we switch roots.
      nestedUpdateCount = 0;
    }
    nextFlushedRoot = highestPriorityRoot;
    nextFlushedExpirationTime = highestPriorityWork;
  }

  function performAsyncWork(dl) {
    performWork(NoWork, dl);
  }

  function performWork(minExpirationTime, dl) {
    deadline = dl;

    // Keep working on roots until there's no more work, or until the we reach
    // the deadline.
    findHighestPriorityRoot();

    if (enableUserTimingAPI && deadline !== null) {
      var didExpire = nextFlushedExpirationTime < recalculateCurrentTime();
      stopRequestCallbackTimer(didExpire);
    }

    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || nextFlushedExpirationTime <= minExpirationTime) && !deadlineDidExpire) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime);
      // Find the next highest priority work.
      findHighestPriorityRoot();
    }

    // We're done flushing work. Either we ran out of time in this callback,
    // or there's no more work left with sufficient priority.

    // If we're inside a callback, set this to false since we just completed it.
    if (deadline !== null) {
      callbackExpirationTime = NoWork;
      callbackID = -1;
    }
    // If there's work left over, schedule a new callback.
    if (nextFlushedExpirationTime !== NoWork) {
      scheduleCallbackWithExpiration(nextFlushedExpirationTime);
    }

    // Clean-up.
    deadline = null;
    deadlineDidExpire = false;
    nestedUpdateCount = 0;

    if (hasUnhandledError) {
      var _error4 = unhandledError;
      unhandledError = null;
      hasUnhandledError = false;
      throw _error4;
    }
  }

  function performWorkOnRoot(root, expirationTime) {
    !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    isRendering = true;

    // Check if this is async work or sync/expired work.
    // TODO: Pass current time as argument to renderRoot, commitRoot
    if (expirationTime <= recalculateCurrentTime()) {
      // Flush sync work.
      var finishedWork = root.finishedWork;
      if (finishedWork !== null) {
        // This root is already complete. We can commit it.
        root.finishedWork = null;
        root.remainingExpirationTime = commitRoot(finishedWork);
      } else {
        root.finishedWork = null;
        finishedWork = renderRoot(root, expirationTime);
        if (finishedWork !== null) {
          // We've completed the root. Commit it.
          root.remainingExpirationTime = commitRoot(finishedWork);
        }
      }
    } else {
      // Flush async work.
      var _finishedWork = root.finishedWork;
      if (_finishedWork !== null) {
        // This root is already complete. We can commit it.
        root.finishedWork = null;
        root.remainingExpirationTime = commitRoot(_finishedWork);
      } else {
        root.finishedWork = null;
        _finishedWork = renderRoot(root, expirationTime);
        if (_finishedWork !== null) {
          // We've completed the root. Check the deadline one more time
          // before committing.
          if (!shouldYield()) {
            // Still time left. Commit the root.
            root.remainingExpirationTime = commitRoot(_finishedWork);
          } else {
            // There's no time left. Mark this root as complete. We'll come
            // back and commit it later.
            root.finishedWork = _finishedWork;
          }
        }
      }
    }

    isRendering = false;
  }

  // When working on async work, the reconciler asks the renderer if it should
  // yield execution. For DOM, we implement this with requestIdleCallback.
  function shouldYield() {
    if (deadline === null) {
      return false;
    }
    if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
      // Disregard deadline.didTimeout. Only expired work should be flushed
      // during a timeout. This path is only hit for non-expired work.
      return false;
    }
    deadlineDidExpire = true;
    return true;
  }

  // TODO: Not happy about this hook. Conceptually, renderRoot should return a
  // tuple of (isReadyForCommit, didError, error)
  function onUncaughtError(error) {
    !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    // Unschedule this root so we don't work on it again until there's
    // another update.
    nextFlushedRoot.remainingExpirationTime = NoWork;
    if (!hasUnhandledError) {
      hasUnhandledError = true;
      unhandledError = error;
    }
  }

  // TODO: Batching should be implemented at the renderer level, not inside
  // the reconciler.
  function batchedUpdates(fn, a) {
    var previousIsBatchingUpdates = isBatchingUpdates;
    isBatchingUpdates = true;
    try {
      return fn(a);
    } finally {
      isBatchingUpdates = previousIsBatchingUpdates;
      if (!isBatchingUpdates && !isRendering) {
        performWork(Sync, null);
      }
    }
  }

  // TODO: Batching should be implemented at the renderer level, not inside
  // the reconciler.
  function unbatchedUpdates(fn) {
    if (isBatchingUpdates && !isUnbatchingUpdates) {
      isUnbatchingUpdates = true;
      try {
        return fn();
      } finally {
        isUnbatchingUpdates = false;
      }
    }
    return fn();
  }

  // TODO: Batching should be implemented at the renderer level, not within
  // the reconciler.
  function flushSync(fn) {
    var previousIsBatchingUpdates = isBatchingUpdates;
    isBatchingUpdates = true;
    try {
      return syncUpdates(fn);
    } finally {
      isBatchingUpdates = previousIsBatchingUpdates;
      !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
      performWork(Sync, null);
    }
  }

  return {
    computeAsyncExpiration: computeAsyncExpiration,
    computeExpirationForFiber: computeExpirationForFiber,
    scheduleWork: scheduleWork,
    batchedUpdates: batchedUpdates,
    unbatchedUpdates: unbatchedUpdates,
    flushSync: flushSync,
    deferredUpdates: deferredUpdates
  };
};

{
  var didWarnAboutNestedUpdates = false;
}

// 0 is PROD, 1 is DEV.
// Might add PROFILE later.


function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);
  return isContextProvider(fiber) ? processChildContext(fiber, parentContext) : parentContext;
}

var ReactFiberReconciler$1 = function (config) {
  var getPublicInstance = config.getPublicInstance;

  var _ReactFiberScheduler = ReactFiberScheduler(config),
      computeAsyncExpiration = _ReactFiberScheduler.computeAsyncExpiration,
      computeExpirationForFiber = _ReactFiberScheduler.computeExpirationForFiber,
      scheduleWork = _ReactFiberScheduler.scheduleWork,
      batchedUpdates = _ReactFiberScheduler.batchedUpdates,
      unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
      flushSync = _ReactFiberScheduler.flushSync,
      deferredUpdates = _ReactFiberScheduler.deferredUpdates;

  function scheduleTopLevelUpdate(current, element, callback) {
    {
      if (ReactDebugCurrentFiber.phase === 'render' && ReactDebugCurrentFiber.current !== null && !didWarnAboutNestedUpdates) {
        didWarnAboutNestedUpdates = true;
        warning(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(ReactDebugCurrentFiber.current) || 'Unknown');
      }
    }

    callback = callback === undefined ? null : callback;
    {
      warning(callback === null || typeof callback === 'function', 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
    }

    var expirationTime = void 0;
    // Check if the top-level element is an async wrapper component. If so,
    // treat updates to the root as async. This is a bit weird but lets us
    // avoid a separate `renderAsync` API.
    if (enableAsyncSubtreeAPI && element != null && element.type != null && element.type.prototype != null && element.type.prototype.unstable_isAsyncReactComponent === true) {
      expirationTime = computeAsyncExpiration();
    } else {
      expirationTime = computeExpirationForFiber(current);
    }

    var update = {
      expirationTime: expirationTime,
      partialState: { element: element },
      callback: callback,
      isReplace: false,
      isForced: false,
      nextCallback: null,
      next: null
    };
    insertUpdateIntoFiber(current, update);
    scheduleWork(current, expirationTime);
  }

  function findHostInstance(fiber) {
    var hostFiber = findCurrentHostFiber(fiber);
    if (hostFiber === null) {
      return null;
    }
    return hostFiber.stateNode;
  }

  return {
    createContainer: function (containerInfo, hydrate) {
      return createFiberRoot(containerInfo, hydrate);
    },
    updateContainer: function (element, container, parentComponent, callback) {
      // TODO: If this is a nested container, this won't be the root.
      var current = container.current;

      {
        if (ReactFiberInstrumentation_1.debugTool) {
          if (current.alternate === null) {
            ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
          } else if (element === null) {
            ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
          } else {
            ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
          }
        }
      }

      var context = getContextForSubtree(parentComponent);
      if (container.context === null) {
        container.context = context;
      } else {
        container.pendingContext = context;
      }

      scheduleTopLevelUpdate(current, element, callback);
    },


    batchedUpdates: batchedUpdates,

    unbatchedUpdates: unbatchedUpdates,

    deferredUpdates: deferredUpdates,

    flushSync: flushSync,

    getPublicRootInstance: function (container) {
      var containerFiber = container.current;
      if (!containerFiber.child) {
        return null;
      }
      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);
        default:
          return containerFiber.child.stateNode;
      }
    },


    findHostInstance: findHostInstance,

    findHostInstanceWithNoPortals: function (fiber) {
      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    },
    injectIntoDevTools: function (devToolsConfig) {
      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;

      return injectInternals(_assign({}, devToolsConfig, {
        findHostInstanceByFiber: function (fiber) {
          return findHostInstance(fiber);
        },
        findFiberByHostInstance: function (instance) {
          if (!findFiberByHostInstance) {
            // Might not be implemented by the renderer.
            return null;
          }
          return findFiberByHostInstance(instance);
        }
      }));
    }
  };
};

var ReactFiberReconciler$2 = Object.freeze({
	default: ReactFiberReconciler$1
});

var ReactFiberReconciler$3 = ( ReactFiberReconciler$2 && ReactFiberReconciler$1 ) || ReactFiberReconciler$2;

// TODO: bundle Flow types with the package.



// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var reactReconciler = ReactFiberReconciler$3['default'] ? ReactFiberReconciler$3['default'] : ReactFiberReconciler$3;

function createPortal$1(children, containerInfo,
// TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.2.0';

// a requestAnimationFrame, storing the time for the start of the frame, then
// scheduling a postMessage which gets scheduled after paint. Within the
// postMessage handler do as much work as possible until time + frame rate.
// By separating the idle call into a separate event tick we ensure that
// layout, paint and other browser work is counted against the available time.
// The frame rate is dynamically adjusted.

{
  if (ExecutionEnvironment.canUseDOM && typeof requestAnimationFrame !== 'function') {
    warning(false, 'React depends on requestAnimationFrame. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');
  }
}

var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

var now = void 0;
if (hasNativePerformanceNow) {
  now = function () {
    return performance.now();
  };
} else {
  now = function () {
    return Date.now();
  };
}

// TODO: There's no way to cancel, because Fiber doesn't atm.
var rIC = void 0;
var cIC = void 0;

if (!ExecutionEnvironment.canUseDOM) {
  rIC = function (frameCallback) {
    return setTimeout(function () {
      frameCallback({
        timeRemaining: function () {
          return Infinity;
        }
      });
    });
  };
  cIC = function (timeoutID) {
    clearTimeout(timeoutID);
  };
} else if (typeof requestIdleCallback !== 'function' || typeof cancelIdleCallback !== 'function') {
  // Polyfill requestIdleCallback and cancelIdleCallback

  var scheduledRICCallback = null;
  var isIdleScheduled = false;
  var timeoutTime = -1;

  var isAnimationFrameScheduled = false;

  var frameDeadline = 0;
  // We start out assuming that we run at 30fps but then the heuristic tracking
  // will adjust this value to a faster fps if we get more frequent animation
  // frames.
  var previousFrameTime = 33;
  var activeFrameTime = 33;

  var frameDeadlineObject;
  if (hasNativePerformanceNow) {
    frameDeadlineObject = {
      didTimeout: false,
      timeRemaining: function () {
        // We assume that if we have a performance timer that the rAF callback
        // gets a performance timer value. Not sure if this is always true.
        var remaining = frameDeadline - performance.now();
        return remaining > 0 ? remaining : 0;
      }
    };
  } else {
    frameDeadlineObject = {
      didTimeout: false,
      timeRemaining: function () {
        // Fallback to Date.now()
        var remaining = frameDeadline - Date.now();
        return remaining > 0 ? remaining : 0;
      }
    };
  }

  // We use the postMessage trick to defer idle work until after the repaint.
  var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
  var idleTick = function (event) {
    if (event.source !== window || event.data !== messageKey) {
      return;
    }

    isIdleScheduled = false;

    var currentTime = now();
    if (frameDeadline - currentTime <= 0) {
      // There's no time left in this idle period. Check if the callback has
      // a timeout and whether it's been exceeded.
      if (timeoutTime !== -1 && timeoutTime <= currentTime) {
        // Exceeded the timeout. Invoke the callback even though there's no
        // time left.
        frameDeadlineObject.didTimeout = true;
      } else {
        // No timeout.
        if (!isAnimationFrameScheduled) {
          // Schedule another animation callback so we retry later.
          isAnimationFrameScheduled = true;
          requestAnimationFrame(animationTick);
        }
        // Exit without invoking the callback.
        return;
      }
    } else {
      // There's still time left in this idle period.
      frameDeadlineObject.didTimeout = false;
    }

    timeoutTime = -1;
    var callback = scheduledRICCallback;
    scheduledRICCallback = null;
    if (callback !== null) {
      callback(frameDeadlineObject);
    }
  };
  // Assumes that we have addEventListener in this environment. Might need
  // something better for old IE.
  window.addEventListener('message', idleTick, false);

  var animationTick = function (rafTime) {
    isAnimationFrameScheduled = false;
    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
      if (nextFrameTime < 8) {
        // Defensive coding. We don't support higher frame rates than 120hz.
        // If we get lower than that, it is probably a bug.
        nextFrameTime = 8;
      }
      // If one frame goes long, then the next one can be short to catch up.
      // If two frames are short in a row, then that's an indication that we
      // actually have a higher frame rate than what we're currently optimizing.
      // We adjust our heuristic dynamically accordingly. For example, if we're
      // running on 120hz display or 90hz VR display.
      // Take the max of the two in case one of them was an anomaly due to
      // missed frame deadlines.
      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
    } else {
      previousFrameTime = nextFrameTime;
    }
    frameDeadline = rafTime + activeFrameTime;
    if (!isIdleScheduled) {
      isIdleScheduled = true;
      window.postMessage(messageKey, '*');
    }
  };

  rIC = function (callback, options) {
    // This assumes that we only schedule one callback at a time because that's
    // how Fiber uses it.
    scheduledRICCallback = callback;
    if (options != null && typeof options.timeout === 'number') {
      timeoutTime = now() + options.timeout;
    }
    if (!isAnimationFrameScheduled) {
      // If rAF didn't already schedule one, we need to schedule a frame.
      // TODO: If this rAF doesn't materialize because the browser throttles, we
      // might want to still have setTimeout trigger rIC as a backup to ensure
      // that we keep performing work.
      isAnimationFrameScheduled = true;
      requestAnimationFrame(animationTick);
    }
    return 0;
  };

  cIC = function () {
    scheduledRICCallback = null;
    isIdleScheduled = false;
    timeoutTime = -1;
  };
} else {
  rIC = window.requestIdleCallback;
  cIC = window.cancelIdleCallback;
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

// isAttributeNameSafe() is currently duplicated in DOMMarkupOperations.
// TODO: Find a better place for this.
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};
function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  {
    warning(false, 'Invalid attribute name: `%s`', attributeName);
  }
  return false;
}

// shouldIgnoreValue() is currently duplicated in DOMMarkupOperations.
// TODO: Find a better place for this.
function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */





/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected) {
  {
    var propertyInfo = getPropertyInfo(name);
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod || propertyInfo.mustUseProperty) {
        return node[propertyInfo.propertyName];
      } else {
        var attributeName = propertyInfo.attributeName;

        var stringValue = null;

        if (propertyInfo.hasOverloadedBooleanValue) {
          if (node.hasAttribute(attributeName)) {
            var value = node.getAttribute(attributeName);
            if (value === '') {
              return true;
            }
            if (shouldIgnoreValue(propertyInfo, expected)) {
              return value;
            }
            if (value === '' + expected) {
              return expected;
            }
            return value;
          }
        } else if (node.hasAttribute(attributeName)) {
          if (shouldIgnoreValue(propertyInfo, expected)) {
            // We had an attribute but shouldn't have had one, so read it
            // for the error message.
            return node.getAttribute(attributeName);
          }
          if (propertyInfo.hasBooleanValue) {
            // If this was a boolean, it doesn't matter what the value is
            // the fact that we have it is the same as the expected.
            return expected;
          }
          // Even if this property uses a namespace we use getAttribute
          // because we assume its namespaced name is the same as our config.
          // To use getAttributeNS we need the local name which we don't have
          // in our config atm.
          stringValue = node.getAttribute(attributeName);
        }

        if (shouldIgnoreValue(propertyInfo, expected)) {
          return stringValue === null ? expected : stringValue;
        } else if (stringValue === '' + expected) {
          return expected;
        } else {
          return stringValue;
        }
      }
    }
  }
}

/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */
function getValueForAttribute(node, name, expected) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }
    var value = node.getAttribute(name);
    if (value === '' + expected) {
      return expected;
    }
    return value;
  }
}

/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */
function setValueForProperty(node, name, value) {
  var propertyInfo = getPropertyInfo(name);

  if (propertyInfo && shouldSetAttribute(name, value)) {
    var mutationMethod = propertyInfo.mutationMethod;
    if (mutationMethod) {
      mutationMethod(node, value);
    } else if (shouldIgnoreValue(propertyInfo, value)) {
      deleteValueForProperty(node, name);
      return;
    } else if (propertyInfo.mustUseProperty) {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyInfo.propertyName] = value;
    } else {
      var attributeName = propertyInfo.attributeName;
      var namespace = propertyInfo.attributeNamespace;
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      if (namespace) {
        node.setAttributeNS(namespace, attributeName, '' + value);
      } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        node.setAttribute(attributeName, '');
      } else {
        node.setAttribute(attributeName, '' + value);
      }
    }
  } else {
    setValueForAttribute(node, name, shouldSetAttribute(name, value) ? value : null);
    return;
  }

  {
    
  }
}

function setValueForAttribute(node, name, value) {
  if (!isAttributeNameSafe(name)) {
    return;
  }
  if (value == null) {
    node.removeAttribute(name);
  } else {
    node.setAttribute(name, '' + value);
  }

  {
    
  }
}

/**
 * Deletes an attributes from a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 */
function deleteValueForAttribute(node, name) {
  node.removeAttribute(name);
}

/**
 * Deletes the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 */
function deleteValueForProperty(node, name) {
  var propertyInfo = getPropertyInfo(name);
  if (propertyInfo) {
    var mutationMethod = propertyInfo.mutationMethod;
    if (mutationMethod) {
      mutationMethod(node, undefined);
    } else if (propertyInfo.mustUseProperty) {
      var propName = propertyInfo.propertyName;
      if (propertyInfo.hasBooleanValue) {
        node[propName] = false;
      } else {
        node[propName] = '';
      }
    } else {
      node.removeAttribute(propertyInfo.attributeName);
    }
  } else {
    node.removeAttribute(name);
  }
}

var ReactControlledValuePropTypes = {
  checkPropTypes: null
};

{
  var hasReadOnlyValue = {
    button: true,
    checkbox: true,
    image: true,
    hidden: true,
    radio: true,
    reset: true,
    submit: true
  };

  var propTypes = {
    value: function (props, propName, componentName) {
      if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  };

  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */
  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props, getStack) {
    checkPropTypes(propTypes, props, 'prop', tagName, getStack);
  };
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberOwnerName$2 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
var getCurrentFiberStackAddendum$3 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */

function getHostProps(element, props) {
  var node = element;
  var value = props.value;
  var checked = props.checked;

  var hostProps = _assign({
    // Make sure we set .type before any other properties (setting .value
    // before .type means .value is lost in IE11 and below)
    type: undefined,
    // Make sure we set .step before .value (setting .value before .step
    // means .value is rounded on mount, based upon step precision)
    step: undefined,
    // Make sure we set .min & .max before .value (to ensure proper order
    // in corner cases such as min or max deriving from value, e.g. Issue #7170)
    min: undefined,
    max: undefined
  }, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: value != null ? value : node._wrapperState.initialValue,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });

  return hostProps;
}

function initWrapperState(element, props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('input', props, getCurrentFiberStackAddendum$3);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$2() || 'A component', props.type);
      didWarnCheckedDefaultChecked = true;
    }
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$2() || 'A component', props.type);
      didWarnValueDefaultValue = true;
    }
  }

  var defaultValue = props.defaultValue;
  var node = element;
  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: props.value != null ? props.value : defaultValue,
    controlled: isControlled(props)
  };
}

function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;
  if (checked != null) {
    setValueForProperty(node, 'checked', checked);
  }
}

function updateWrapper(element, props) {
  var node = element;
  {
    var controlled = isControlled(props);

    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
      warning(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$3());
      didWarnUncontrolledToControlled = true;
    }
    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
      warning(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$3());
      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);

  var value = props.value;
  if (value != null) {
    if (value === 0 && node.value === '') {
      node.value = '0';
      // Note: IE9 reports a number inputs as 'text', so check props instead.
    } else if (props.type === 'number') {
      // Simulate `input.valueAsNumber`. IE9 does not support it
      var valueAsNumber = parseFloat(node.value) || 0;

      if (
      // eslint-disable-next-line
      value != valueAsNumber ||
      // eslint-disable-next-line
      value == valueAsNumber && node.value != value) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        node.value = '' + value;
      }
    } else if (node.value !== '' + value) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      node.value = '' + value;
    }
  } else {
    if (props.value == null && props.defaultValue != null) {
      // In Chrome, assigning defaultValue to certain input types triggers input validation.
      // For number inputs, the display value loses trailing decimal points. For email inputs,
      // Chrome raises "The specified value <x> is not a valid email address".
      //
      // Here we check to see if the defaultValue has actually changed, avoiding these problems
      // when the user is inputting text
      //
      // https://github.com/facebook/react/issues/7253
      if (node.defaultValue !== '' + props.defaultValue) {
        node.defaultValue = '' + props.defaultValue;
      }
    }
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}

function postMountWrapper(element, props) {
  var node = element;

  // Detach value from defaultValue. We won't do anything if we're working on
  // submit or reset inputs as those values & defaultValues are linked. They
  // are not resetable nodes so this operation doesn't matter and actually
  // removes browser-default values (eg "Submit Query") when no value is
  // provided.

  switch (props.type) {
    case 'submit':
    case 'reset':
      break;
    case 'color':
    case 'date':
    case 'datetime':
    case 'datetime-local':
    case 'month':
    case 'time':
    case 'week':
      // This fixes the no-show issue on iOS Safari and Android Chrome:
      // https://github.com/facebook/react/issues/7233
      node.value = '';
      node.value = node.defaultValue;
      break;
    default:
      node.value = node.value;
      break;
  }

  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.
  var name = node.name;
  if (name !== '') {
    node.name = '';
  }
  node.defaultChecked = !node.defaultChecked;
  node.defaultChecked = !node.defaultChecked;
  if (name !== '') {
    node.name = name;
  }
}

function restoreControlledState$1(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
      !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;

      // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set
      updateValueIfChanged(otherNode);

      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      updateWrapper(otherNode, otherProps);
    }
  }
}

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  // We can silently skip them because invalid DOM nesting warning
  // catches these cases in Fiber.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */

function validateProps(element, props) {
  // TODO (yungsters): Remove support for `selected` in <option>.
  {
    warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
  }
}

function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', props.value);
  }
}

function getHostProps$1(element, props) {
  var hostProps = _assign({ children: undefined }, props);
  var content = flattenChildren(props.children);

  if (content) {
    hostProps.children = content;
  }

  return hostProps;
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberOwnerName$3 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
var getCurrentFiberStackAddendum$4 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;


{
  var didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerName$3();
  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 */
function checkSelectPropTypes(props) {
  ReactControlledValuePropTypes.checkPropTypes('select', props, getCurrentFiberStackAddendum$4);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
    } else if (!props.multiple && isArray) {
      warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};
    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }
    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }
      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = '' + propValue;
    var defaultSelected = null;
    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;
        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }
        return;
      }
      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }
    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */

function getHostProps$2(element, props) {
  return _assign({}, props, {
    value: undefined
  });
}

function initWrapperState$1(element, props) {
  var node = element;
  {
    checkSelectPropTypes(props);
  }

  var value = props.value;
  node._wrapperState = {
    initialValue: value != null ? value : props.defaultValue,
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
      didWarnValueDefaultValue$1 = true;
    }
  }
}

function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;
  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}

function postUpdateWrapper(element, props) {
  var node = element;
  // After the initial mount, we control selected-ness manually so don't pass
  // this value down
  node._wrapperState.initialValue = undefined;

  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;

  var value = props.value;
  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}

function restoreControlledState$2(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberStackAddendum$5 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */

function getHostProps$3(element, props) {
  var node = element;
  !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;

  // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.
  var hostProps = _assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: '' + node._wrapperState.initialValue
  });

  return hostProps;
}

function initWrapperState$2(element, props) {
  var node = element;
  {
    ReactControlledValuePropTypes.checkPropTypes('textarea', props, getCurrentFiberStackAddendum$5);
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value;

  // Only bother fetching default value if we're going to use it
  if (initialValue == null) {
    var defaultValue = props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = props.children;
    if (children != null) {
      {
        warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }
      !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
      if (Array.isArray(children)) {
        !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: '' + initialValue
  };
}

function updateWrapper$1(element, props) {
  var node = element;
  var value = props.value;
  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = '' + value;

    // To avoid side effects (such as losing text selection), only set value if changed
    if (newValue !== node.value) {
      node.value = newValue;
    }
    if (props.defaultValue == null) {
      node.defaultValue = newValue;
    }
  }
  if (props.defaultValue != null) {
    node.defaultValue = props.defaultValue;
  }
}

function postMountWrapper$3(element, props) {
  var node = element;
  // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.
  var textContent = node.textContent;

  // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
  if (textContent === node._wrapperState.initialValue) {
    node.value = textContent;
  }
}

function restoreControlledState$3(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';

var Namespaces = {
  html: HTML_NAMESPACE$1,
  mathml: MATH_NAMESPACE,
  svg: SVG_NAMESPACE
};

// Assumes there is no parent namespace.
function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;
    case 'math':
      return MATH_NAMESPACE;
    default:
      return HTML_NAMESPACE$1;
  }
}

function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }
  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE$1;
  }
  // By default, pass namespace below.
  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer = void 0;

/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node

  if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  return ('' + value).trim();
}

var warnValidStyle = emptyFunction;

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var warnHyphenatedStyleName = function (name, getStack) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), getStack());
  };

  var warnBadVendoredStyleName = function (name, getStack) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), getStack());
  };

  var warnStyleValueWithSemicolon = function (name, value, getStack) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    warning(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.%s', name, value.replace(badStyleValueWithSemicolonPattern, ''), getStack());
  };

  var warnStyleValueIsNaN = function (name, value, getStack) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, getStack());
  };

  var warnStyleValueIsInfinity = function (name, value, getStack) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;
    warning(false, '`Infinity` is an invalid value for the `%s` css style property.%s', name, getStack());
  };

  warnValidStyle = function (name, value, getStack) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, getStack);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, getStack);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, getStack);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value, getStack);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value, getStack);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */
function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + hyphenateStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);

        delimiter = ';';
      }
    }
    return serialized || null;
  }
}

/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */
function setValueForStyles(node, styles, getStack) {
  var style = node.style;
  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }
    var isCustomProperty = styleName.indexOf('--') === 0;
    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName], getStack);
      }
    }
    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
    if (styleName === 'float') {
      styleName = 'cssFloat';
    }
    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

var HTML$1 = '__html';

function assertValidProps(tag, props, getStack) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, getStack()) : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
  }
  {
    warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.%s', getStack());
  }
  !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getStack()) : void 0;
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }
  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this whitelist too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;
    default:
      return true;
  }
}

var ariaProperties = {
  'aria-current': 0, // state
  'aria-details': 0,
  'aria-disabled': 0, // state
  'aria-hidden': 0, // state
  'aria-invalid': 0, // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

var hasOwnProperty = Object.prototype.hasOwnProperty;

function getStackAddendum() {
  var stack = ReactDebugCurrentFrame.getStackAddendum();
  return stack != null ? stack : '';
}

function validateProperty(tagName, name) {
  if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
    return true;
  }

  if (rARIACamel.test(name)) {
    var ariaName = 'aria-' + name.slice(4).toLowerCase();
    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (correctName == null) {
      warning(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s', name, getStackAddendum());
      warnedProperties[name] = true;
      return true;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== correctName) {
      warning(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?%s', name, correctName, getStackAddendum());
      warnedProperties[name] = true;
      return true;
    }
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      warning(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum());
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  var invalidProps = [];

  for (var key in props) {
    var isValid = validateProperty(type, key);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());
  } else if (invalidProps.length > 1) {
    warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }
  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;

function getStackAddendum$1() {
  var stack = ReactDebugCurrentFrame.getStackAddendum();
  return stack != null ? stack : '';
}

function validateProperties$1(type, props) {
  if (type !== 'input' && type !== 'textarea' && type !== 'select') {
    return;
  }

  if (props != null && props.value === null && !didWarnValueNull) {
    didWarnValueNull = true;
    if (type === 'select' && props.multiple) {
      warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.%s', type, getStackAddendum$1());
    } else {
      warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', type, getStackAddendum$1());
    }
  }
}

// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  'class': 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  'default': 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  'for': 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',

  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  'in': 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  'typeof': 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

function getStackAddendum$2() {
  var stack = ReactDebugCurrentFrame.getStackAddendum();
  return stack != null ? stack : '';
}

{
  var warnedProperties$1 = {};
  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  var validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
    if (hasOwnProperty$1.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();
    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      warning(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
      warnedProperties$1[name] = true;
      return true;
    }

    // We can't rely on the event system being injected on the server.
    if (canUseEventSystem) {
      if (registrationNameModules.hasOwnProperty(name)) {
        return true;
      }
      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
      if (registrationName != null) {
        warning(false, 'Invalid event handler property `%s`. Did you mean `%s`?%s', name, registrationName, getStackAddendum$2());
        warnedProperties$1[name] = true;
        return true;
      }
      if (EVENT_NAME_REGEX.test(name)) {
        warning(false, 'Unknown event handler property `%s`. It will be ignored.%s', name, getStackAddendum$2());
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        warning(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.%s', name, getStackAddendum$2());
      }
      warnedProperties$1[name] = true;
      return true;
    }

    // Let the ARIA attribute hook validate ARIA attributes
    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      warning(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      warning(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      warning(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.%s', typeof value, getStackAddendum$2());
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      warning(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.%s', name, getStackAddendum$2());
      warnedProperties$1[name] = true;
      return true;
    }

    var isReserved = isReservedProp(name);

    // Known attributes should match the casing specified in the property config.
    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];
      if (standardName !== name) {
        warning(false, 'Invalid DOM property `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum$2());
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      warning(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.%s', name, lowerCasedName, getStackAddendum$2());
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && !shouldAttributeAcceptBooleanValue(name)) {
      if (value) {
        warning(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.%s', value, name, name, value, name, getStackAddendum$2());
      } else {
        warning(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', value, name, name, value, name, name, name, getStackAddendum$2());
      }
      warnedProperties$1[name] = true;
      return true;
    }

    // Now that we've validated casing, do not validate
    // data types for reserved props
    if (isReserved) {
      return true;
    }

    // Warn when a known attribute is a bad type
    if (!shouldSetAttribute(name, value)) {
      warnedProperties$1[name] = true;
      return false;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, canUseEventSystem) {
  var unknownProps = [];
  for (var key in props) {
    var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');
  if (unknownProps.length === 1) {
    warning(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());
  } else if (unknownProps.length > 1) {
    warning(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());
  }
};

function validateProperties$2(type, props, canUseEventSystem) {
  if (isCustomComponent(type, props)) {
    return;
  }
  warnUnknownProperties(type, props, canUseEventSystem);
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberOwnerName$1 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
var getCurrentFiberStackAddendum$2 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var didWarnInvalidHydration = false;
var didWarnShadyDOM = false;

var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE = 'style';
var HTML = '__html';

var HTML_NAMESPACE = Namespaces.html;


var getStack = emptyFunction.thatReturns('');

{
  getStack = getCurrentFiberStackAddendum$2;

  var warnedUnknownTags = {
    // Chrome is the only major browser not shipping <time>. But as of July
    // 2017 it intends to ship it due to widespread usage. We intentionally
    // *don't* warn for <time> even if it's unrecognized by Chrome because
    // it soon will be, and many apps have been using it anyway.
    time: true,
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true
  };

  var validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props, /* canUseEventSystem */true);
  };

  // HTML parsing normalizes CR and CRLF to LF.
  // It also can turn \u0000 into \uFFFD inside attributes.
  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
  // If we have a mismatch, it might be caused by that.
  // We will still patch up in this case but not fire the warning.
  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

  var normalizeMarkupForTextOrAttribute = function (markup) {
    var markupString = typeof markup === 'string' ? markup : '' + markup;
    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
  };

  var warnForTextDifference = function (serverText, clientText) {
    if (didWarnInvalidHydration) {
      return;
    }
    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
    if (normalizedServerText === normalizedClientText) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
  };

  var warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }
    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
    if (normalizedServerValue === normalizedClientValue) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  var warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });
    warning(false, 'Extra attributes from the server: %s', names);
  };

  var warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      warning(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', registrationName, registrationName, registrationName, getCurrentFiberStackAddendum$2());
    } else {
      warning(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.%s', registrationName, typeof listener, getCurrentFiberStackAddendum$2());
    }
  };

  // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.
  var normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
}

function ensureListeningTo(rootContainerElement, registrationName) {
  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
  listenTo(registrationName, doc);
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = emptyFunction;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }
    var nextProp = nextProps[propKey];
    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }
      // Relies on `updateStylesByID` not mutating `styleUpdates`.
      setValueForStyles(domElement, nextProp, getStack);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';
        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (propKey === AUTOFOCUS) {
      // We polyfill it separately on the client during commit.
      // We blacklist it here rather than in the property list because we emit it in SSR.
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (isCustomComponentTag) {
      setValueForAttribute(domElement, propKey, nextProp);
    } else if (nextProp != null) {
      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertently setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      setValueForProperty(domElement, propKey, nextProp);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];
    if (propKey === STYLE) {
      setValueForStyles(domElement, propValue, getStack);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else if (isCustomComponentTag) {
      if (propValue != null) {
        setValueForAttribute(domElement, propKey, propValue);
      } else {
        deleteValueForAttribute(domElement, propKey);
      }
    } else if (propValue != null) {
      setValueForProperty(domElement, propKey, propValue);
    } else {
      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertently setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      deleteValueForProperty(domElement, propKey);
    }
  }
}

function createElement$1(type, props, rootContainerElement, parentNamespace) {
  // We create tags in the namespace of their parent container, except HTML
  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement;
  var namespaceURI = parentNamespace;
  if (namespaceURI === HTML_NAMESPACE) {
    namespaceURI = getIntrinsicNamespace(type);
  }
  if (namespaceURI === HTML_NAMESPACE) {
    {
      var isCustomComponentTag = isCustomComponent(type, props);
      // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.
      warning(isCustomComponentTag || type === type.toLowerCase(), '<%s /> is using uppercase HTML. Always use lowercase HTML tags ' + 'in React.', type);
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');
      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.
      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, { is: props.is });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type);
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;
        warning(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}

function createTextNode$1(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}

function setInitialProperties$1(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);
  {
    validatePropertiesInDevelopment(tag, rawProps);
    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$1() || 'A component');
      didWarnShadyDOM = true;
    }
  }

  // TODO: Make sure that we check isMounted before firing any of these events.
  var props;
  switch (tag) {
    case 'iframe':
    case 'object':
      trapBubbledEvent('topLoad', 'load', domElement);
      props = rawProps;
      break;
    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          trapBubbledEvent(event, mediaEvents[event], domElement);
        }
      }
      props = rawProps;
      break;
    case 'source':
      trapBubbledEvent('topError', 'error', domElement);
      props = rawProps;
      break;
    case 'img':
    case 'image':
      trapBubbledEvent('topError', 'error', domElement);
      trapBubbledEvent('topLoad', 'load', domElement);
      props = rawProps;
      break;
    case 'form':
      trapBubbledEvent('topReset', 'reset', domElement);
      trapBubbledEvent('topSubmit', 'submit', domElement);
      props = rawProps;
      break;
    case 'details':
      trapBubbledEvent('topToggle', 'toggle', domElement);
      props = rawProps;
      break;
    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'option':
      validateProps(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps);
      break;
    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$3(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    default:
      props = rawProps;
  }

  assertValidProps(tag, props, getStack);

  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps);
      break;
    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;
    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;
    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;
    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }
}

// Calculate the diff between the two objects.
function diffProperties$1(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;

  var lastProps;
  var nextProps;
  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'option':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'select':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'textarea':
      lastProps = getHostProps$3(domElement, lastRawProps);
      nextProps = getHostProps$3(domElement, nextRawProps);
      updatePayload = [];
      break;
    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;
      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }

  assertValidProps(tag, nextProps, getStack);

  var propKey;
  var styleName;
  var styleUpdates = null;
  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }
    if (propKey === STYLE) {
      var lastStyle = lastProps[propKey];
      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }
          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
      // Noop. This is handled by the clear text mechanism.
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (propKey === AUTOFOCUS) {
      // Noop. It doesn't work on updates anyway.
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the whitelist in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }
  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;
    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }
    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }
      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = '';
          }
        }
        // Update styles that changed since `lastProp`.
        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }
          updatePayload.push(propKey, styleUpdates);
        }
        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      var lastHtml = lastProp ? lastProp[HTML] : undefined;
      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
        }
      } else {
        // TODO: It might be too late to clear this if we have children
        // inserted already.
      }
    } else if (propKey === CHILDREN) {
      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the whitelist during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }
  if (styleUpdates) {
    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
  }
  return updatePayload;
}

// Apply the diff.
function updateProperties$1(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
  // Apply the diff.
  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);

  // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.
  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;
    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;
    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function diffHydratedProperties$1(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
  {
    var suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
    var isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$1() || 'A component');
      didWarnShadyDOM = true;
    }
  }

  // TODO: Make sure that we check isMounted before firing any of these events.
  switch (tag) {
    case 'iframe':
    case 'object':
      trapBubbledEvent('topLoad', 'load', domElement);
      break;
    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          trapBubbledEvent(event, mediaEvents[event], domElement);
        }
      }
      break;
    case 'source':
      trapBubbledEvent('topError', 'error', domElement);
      break;
    case 'img':
    case 'image':
      trapBubbledEvent('topError', 'error', domElement);
      trapBubbledEvent('topLoad', 'load', domElement);
      break;
    case 'form':
      trapBubbledEvent('topReset', 'reset', domElement);
      trapBubbledEvent('topSubmit', 'submit', domElement);
      break;
    case 'details':
      trapBubbledEvent('topToggle', 'toggle', domElement);
      break;
    case 'input':
      initWrapperState(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'option':
      validateProps(domElement, rawProps);
      break;
    case 'select':
      initWrapperState$1(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      trapBubbledEvent('topInvalid', 'invalid', domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
  }

  assertValidProps(tag, rawProps, getStack);

  {
    var extraAttributeNames = new Set();
    var attributes = domElement.attributes;
    for (var i = 0; i < attributes.length; i++) {
      var name = attributes[i].name.toLowerCase();
      switch (name) {
        // Built-in SSR attribute is whitelisted
        case 'data-reactroot':
          break;
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.
        case 'value':
          break;
        case 'checked':
          break;
        case 'selected':
          break;
        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[i].name);
      }
    }
  }

  var updatePayload = null;
  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }
    var nextProp = rawProps[propKey];
    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }
          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }
          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
    } else {
      // Validate that the properties correspond to their expected values.
      var serverValue;
      var propertyInfo;
      if (suppressHydrationWarning) {
        // Don't bother comparing. We're ignoring all these warnings.
      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||
      // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') {
        // Noop
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var rawHtml = nextProp ? nextProp[HTML] || '' : '';
        var serverHTML = domElement.innerHTML;
        var expectedHTML = normalizeHTML(domElement, rawHtml);
        if (expectedHTML !== serverHTML) {
          warnForPropDifference(propKey, serverHTML, expectedHTML);
        }
      } else if (propKey === STYLE) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames['delete'](propKey);
        var expectedStyle = createDangerousStringForStyles(nextProp);
        serverValue = domElement.getAttribute('style');
        if (expectedStyle !== serverValue) {
          warnForPropDifference(propKey, serverValue, expectedStyle);
        }
      } else if (isCustomComponentTag) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames['delete'](propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (shouldSetAttribute(propKey, nextProp)) {
        if (propertyInfo = getPropertyInfo(propKey)) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames['delete'](propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp);
        } else {
          var ownNamespace = parentNamespace;
          if (ownNamespace === HTML_NAMESPACE) {
            ownNamespace = getIntrinsicNamespace(tag);
          }
          if (ownNamespace === HTML_NAMESPACE) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames['delete'](propKey.toLowerCase());
          } else {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames['delete'](propKey);
          }
          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    // $FlowFixMe - Should be inferred as not undefined.
    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
      // $FlowFixMe - Should be inferred as not undefined.
      warnForExtraAttributes(extraAttributeNames);
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps);
      break;
    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;
    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;
    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }

  return updatePayload;
}

function diffHydratedText$1(textNode, text) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}

function warnForUnmatchedText$1(textNode, text) {
  {
    warnForTextDifference(textNode.nodeValue, text);
  }
}

function warnForDeletedHydratableElement$1(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}

function warnForDeletedHydratableText$1(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}

function warnForInsertedHydratedElement$1(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}

function warnForInsertedHydratedText$1(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warning(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}

function restoreControlledState(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState$1(domElement, props);
      return;
    case 'textarea':
      restoreControlledState$3(domElement, props);
      return;
    case 'select':
      restoreControlledState$2(domElement, props);
      return;
  }
}

var ReactDOMFiberComponent = Object.freeze({
	createElement: createElement$1,
	createTextNode: createTextNode$1,
	setInitialProperties: setInitialProperties$1,
	diffProperties: diffProperties$1,
	updateProperties: updateProperties$1,
	diffHydratedProperties: diffHydratedProperties$1,
	diffHydratedText: diffHydratedText$1,
	warnForUnmatchedText: warnForUnmatchedText$1,
	warnForDeletedHydratableElement: warnForDeletedHydratableElement$1,
	warnForDeletedHydratableText: warnForDeletedHydratableText$1,
	warnForInsertedHydratedElement: warnForInsertedHydratedElement$1,
	warnForInsertedHydratedText: warnForInsertedHydratedText$1,
	restoreControlledState: restoreControlledState
});

// TODO: direct imports like some-package/src/* are bad. Fix me.
var getCurrentFiberStackAddendum$6 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

var validateDOMNesting = emptyFunction;

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo$1 = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null');
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;
    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var addendum = getCurrentFiberStackAddendum$6();

    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
    if (didWarn[warnKey]) {
      return;
    }
    didWarn[warnKey] = true;

    var tagDisplayName = childTag;
    var whitespaceInfo = '';
    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';
      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
      }
      warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
    } else {
      warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
    }
  };

  // TODO: turn this into a named export
  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo$1;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

var validateDOMNesting$1 = validateDOMNesting;

// TODO: direct imports like some-package/src/* are bad. Fix me.
var createElement = createElement$1;
var createTextNode = createTextNode$1;
var setInitialProperties = setInitialProperties$1;
var diffProperties = diffProperties$1;
var updateProperties = updateProperties$1;
var diffHydratedProperties = diffHydratedProperties$1;
var diffHydratedText = diffHydratedText$1;
var warnForUnmatchedText = warnForUnmatchedText$1;
var warnForDeletedHydratableElement = warnForDeletedHydratableElement$1;
var warnForDeletedHydratableText = warnForDeletedHydratableText$1;
var warnForInsertedHydratedElement = warnForInsertedHydratedElement$1;
var warnForInsertedHydratedText = warnForInsertedHydratedText$1;
var updatedAncestorInfo = validateDOMNesting$1.updatedAncestorInfo;
var precacheFiberNode = precacheFiberNode$1;
var updateFiberProps = updateFiberProps$1;


{
  var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
  if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    warning(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');
  }
}

injection$3.injectFiberControlledHostComponent(ReactDOMFiberComponent);

var eventsEnabled = null;
var selectionInformation = null;

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function shouldHydrateDueToLegacyHeuristic(container) {
  var rootElement = getReactRootElementInContainer(container);
  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
}

function shouldAutoFocusHostComponent(type, props) {
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;
  }
  return false;
}

var DOMRenderer = reactReconciler({
  getRootHostContext: function (rootContainerInstance) {
    var type = void 0;
    var namespace = void 0;
    var nodeType = rootContainerInstance.nodeType;
    switch (nodeType) {
      case DOCUMENT_NODE:
      case DOCUMENT_FRAGMENT_NODE:
        {
          type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
          var root = rootContainerInstance.documentElement;
          namespace = root ? root.namespaceURI : getChildNamespace(null, '');
          break;
        }
      default:
        {
          var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
          var ownNamespace = container.namespaceURI || null;
          type = container.tagName;
          namespace = getChildNamespace(ownNamespace, type);
          break;
        }
    }
    {
      var validatedTag = type.toLowerCase();
      var _ancestorInfo = updatedAncestorInfo(null, validatedTag, null);
      return { namespace: namespace, ancestorInfo: _ancestorInfo };
    }
    return namespace;
  },
  getChildHostContext: function (parentHostContext, type) {
    {
      var parentHostContextDev = parentHostContext;
      var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
      var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type, null);
      return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
    }
    var parentNamespace = parentHostContext;
    return getChildNamespace(parentNamespace, type);
  },
  getPublicInstance: function (instance) {
    return instance;
  },
  prepareForCommit: function () {
    eventsEnabled = isEnabled();
    selectionInformation = getSelectionInformation();
    setEnabled(false);
  },
  resetAfterCommit: function () {
    restoreSelection(selectionInformation);
    selectionInformation = null;
    setEnabled(eventsEnabled);
    eventsEnabled = null;
  },
  createInstance: function (type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
    var parentNamespace = void 0;
    {
      // TODO: take namespace into account when validating.
      var hostContextDev = hostContext;
      validateDOMNesting$1(type, null, hostContextDev.ancestorInfo);
      if (typeof props.children === 'string' || typeof props.children === 'number') {
        var string = '' + props.children;
        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
        validateDOMNesting$1(null, string, ownAncestorInfo);
      }
      parentNamespace = hostContextDev.namespace;
    }
    var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
    precacheFiberNode(internalInstanceHandle, domElement);
    updateFiberProps(domElement, props);
    return domElement;
  },
  appendInitialChild: function (parentInstance, child) {
    parentInstance.appendChild(child);
  },
  finalizeInitialChildren: function (domElement, type, props, rootContainerInstance) {
    setInitialProperties(domElement, type, props, rootContainerInstance);
    return shouldAutoFocusHostComponent(type, props);
  },
  prepareUpdate: function (domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
    {
      var hostContextDev = hostContext;
      if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
        var string = '' + newProps.children;
        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
        validateDOMNesting$1(null, string, ownAncestorInfo);
      }
    }
    return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
  },
  shouldSetTextContent: function (type, props) {
    return type === 'textarea' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && typeof props.dangerouslySetInnerHTML.__html === 'string';
  },
  shouldDeprioritizeSubtree: function (type, props) {
    return !!props.hidden;
  },
  createTextInstance: function (text, rootContainerInstance, hostContext, internalInstanceHandle) {
    {
      var hostContextDev = hostContext;
      validateDOMNesting$1(null, text, hostContextDev.ancestorInfo);
    }
    var textNode = createTextNode(text, rootContainerInstance);
    precacheFiberNode(internalInstanceHandle, textNode);
    return textNode;
  },


  now: now,

  mutation: {
    commitMount: function (domElement, type, newProps, internalInstanceHandle) {
      domElement.focus();
    },
    commitUpdate: function (domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
      // Update the props handle so that we know which props are the ones with
      // with current event handlers.
      updateFiberProps(domElement, newProps);
      // Apply the diff to the DOM node.
      updateProperties(domElement, updatePayload, type, oldProps, newProps);
    },
    resetTextContent: function (domElement) {
      domElement.textContent = '';
    },
    commitTextUpdate: function (textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    },
    appendChild: function (parentInstance, child) {
      parentInstance.appendChild(child);
    },
    appendChildToContainer: function (container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, container);
      } else {
        container.appendChild(child);
      }
    },
    insertBefore: function (parentInstance, child, beforeChild) {
      parentInstance.insertBefore(child, beforeChild);
    },
    insertInContainerBefore: function (container, child, beforeChild) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, beforeChild);
      } else {
        container.insertBefore(child, beforeChild);
      }
    },
    removeChild: function (parentInstance, child) {
      parentInstance.removeChild(child);
    },
    removeChildFromContainer: function (container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.removeChild(child);
      } else {
        container.removeChild(child);
      }
    }
  },

  hydration: {
    canHydrateInstance: function (instance, type, props) {
      if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
        return null;
      }
      // This has now been refined to an element node.
      return instance;
    },
    canHydrateTextInstance: function (instance, text) {
      if (text === '' || instance.nodeType !== TEXT_NODE) {
        // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
      }
      // This has now been refined to a text node.
      return instance;
    },
    getNextHydratableSibling: function (instance) {
      var node = instance.nextSibling;
      // Skip non-hydratable nodes.
      while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
        node = node.nextSibling;
      }
      return node;
    },
    getFirstHydratableChild: function (parentInstance) {
      var next = parentInstance.firstChild;
      // Skip non-hydratable nodes.
      while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
        next = next.nextSibling;
      }
      return next;
    },
    hydrateInstance: function (instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, instance);
      // TODO: Possibly defer this until the commit phase where all the events
      // get attached.
      updateFiberProps(instance, props);
      var parentNamespace = void 0;
      {
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
      }
      return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
    },
    hydrateTextInstance: function (textInstance, text, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, textInstance);
      return diffHydratedText(textInstance, text);
    },
    didNotMatchHydratedContainerTextInstance: function (parentContainer, textInstance, text) {
      {
        warnForUnmatchedText(textInstance, text);
      }
    },
    didNotMatchHydratedTextInstance: function (parentType, parentProps, parentInstance, textInstance, text) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForUnmatchedText(textInstance, text);
      }
    },
    didNotHydrateContainerInstance: function (parentContainer, instance) {
      {
        if (instance.nodeType === 1) {
          warnForDeletedHydratableElement(parentContainer, instance);
        } else {
          warnForDeletedHydratableText(parentContainer, instance);
        }
      }
    },
    didNotHydrateInstance: function (parentType, parentProps, parentInstance, instance) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        if (instance.nodeType === 1) {
          warnForDeletedHydratableElement(parentInstance, instance);
        } else {
          warnForDeletedHydratableText(parentInstance, instance);
        }
      }
    },
    didNotFindHydratableContainerInstance: function (parentContainer, type, props) {
      {
        warnForInsertedHydratedElement(parentContainer, type, props);
      }
    },
    didNotFindHydratableContainerTextInstance: function (parentContainer, text) {
      {
        warnForInsertedHydratedText(parentContainer, text);
      }
    },
    didNotFindHydratableInstance: function (parentType, parentProps, parentInstance, type, props) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedElement(parentInstance, type, props);
      }
    },
    didNotFindHydratableTextInstance: function (parentType, parentProps, parentInstance, text) {
      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedText(parentInstance, text);
      }
    }
  },

  scheduleDeferredCallback: rIC,
  cancelDeferredCallback: cIC,

  useSyncScheduling: !enableAsyncSchedulingByDefaultInReactDOM
});

injection$4.injectFiberBatchedUpdates(DOMRenderer.batchedUpdates);

var warnedAboutHydrateAPI = false;

function renderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;

  {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = DOMRenderer.findHostInstanceWithNoPortals(container._reactRootContainer.current);
      if (hostInstance) {
        warning(hostInstance.parentNode === container, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

    warning(!hasNonRootReactChild || isRootRenderedBySomeReact, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');

    warning(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
  }

  var root = container._reactRootContainer;
  if (!root) {
    var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
    // First clear any existing content.
    if (!shouldHydrate) {
      var warned = false;
      var rootSibling = void 0;
      while (rootSibling = container.lastChild) {
        {
          if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
            warned = true;
            warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
          }
        }
        container.removeChild(rootSibling);
      }
    }
    {
      if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
        warnedAboutHydrateAPI = true;
        lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
      }
    }
    var newRoot = DOMRenderer.createContainer(container, shouldHydrate);
    root = container._reactRootContainer = newRoot;
    // Initial mount should not be batched.
    DOMRenderer.unbatchedUpdates(function () {
      DOMRenderer.updateContainer(children, newRoot, parentComponent, callback);
    });
  } else {
    DOMRenderer.updateContainer(children, root, parentComponent, callback);
  }
  return DOMRenderer.getPublicRootInstance(root);
}

function createPortal(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
  // TODO: pass ReactDOM portal implementation as third argument
  return createPortal$1(children, container, null, key);
}

function ReactRoot(container, hydrate) {
  var root = DOMRenderer.createContainer(container, hydrate);
  this._reactRootContainer = root;
}
ReactRoot.prototype.render = function (children, callback) {
  var root = this._reactRootContainer;
  DOMRenderer.updateContainer(children, root, null, callback);
};
ReactRoot.prototype.unmount = function (callback) {
  var root = this._reactRootContainer;
  DOMRenderer.updateContainer(null, root, null, callback);
};

var ReactDOM = {
  createPortal: createPortal,

  findDOMNode: function (componentOrElement) {
    {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
        warning(warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner) || 'A component');
        owner.stateNode._warnedAboutRefsInRender = true;
      }
    }
    if (componentOrElement == null) {
      return null;
    }
    if (componentOrElement.nodeType === ELEMENT_NODE) {
      return componentOrElement;
    }

    var inst = get(componentOrElement);
    if (inst) {
      return DOMRenderer.findHostInstance(inst);
    }

    if (typeof componentOrElement.render === 'function') {
      invariant(false, 'Unable to find node on an unmounted component.');
    } else {
      invariant(false, 'Element appears to be neither ReactComponent nor DOMNode. Keys: %s', Object.keys(componentOrElement));
    }
  },
  hydrate: function (element, container, callback) {
    // TODO: throw or warn if we couldn't hydrate?
    return renderSubtreeIntoContainer(null, element, container, true, callback);
  },
  render: function (element, container, callback) {
    return renderSubtreeIntoContainer(null, element, container, false, callback);
  },
  unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
    !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
    return renderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
  },
  unmountComponentAtNode: function (container) {
    !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;

    if (container._reactRootContainer) {
      {
        var rootEl = getReactRootElementInContainer(container);
        var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
        warning(!renderedByDifferentReact, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
      }

      // Unmount should not be batched.
      DOMRenderer.unbatchedUpdates(function () {
        renderSubtreeIntoContainer(null, null, container, false, function () {
          container._reactRootContainer = null;
        });
      });
      // If you call unmountComponentAtNode twice in quick succession, you'll
      // get `true` twice. That's probably fine?
      return true;
    } else {
      {
        var _rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));

        // Check if the container itself is a React root node.
        var isContainerReactRoot = container.nodeType === 1 && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

        warning(!hasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
      }

      return false;
    }
  },


  // Temporary alias since we already shipped React 16 RC with it.
  // TODO: remove in React 17.
  unstable_createPortal: createPortal,

  unstable_batchedUpdates: batchedUpdates,

  unstable_deferredUpdates: DOMRenderer.deferredUpdates,

  flushSync: DOMRenderer.flushSync,

  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    // For TapEventPlugin which is popular in open source
    EventPluginHub: EventPluginHub,
    // Used by test-utils
    EventPluginRegistry: EventPluginRegistry,
    EventPropagators: EventPropagators,
    ReactControlledComponent: ReactControlledComponent,
    ReactDOMComponentTree: ReactDOMComponentTree,
    ReactDOMEventListener: ReactDOMEventListener
  }
};

if (enableCreateRoot) {
  ReactDOM.createRoot = function createRoot(container, options) {
    var hydrate = options != null && options.hydrate === true;
    return new ReactRoot(container, hydrate);
  };
}

var foundDevTools = DOMRenderer.injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType: 1,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && ExecutionEnvironment.canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol;
      // Don't warn in exotic cases like chrome-extension://.
      if (/^(https?|file):$/.test(protocol)) {
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}



var ReactDOM$2 = Object.freeze({
	default: ReactDOM
});

var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var reactDom = ReactDOM$3['default'] ? ReactDOM$3['default'] : ReactDOM$3;

module.exports = reactDom;
  })();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"react-router-dom":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router-dom/package.json                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "react-router-dom";                                                                                     // 1
exports.version = "4.2.2";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router-dom/index.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.withRouter = exports.matchPath = exports.Switch = exports.StaticRouter = exports.Router = exports.Route = exports.Redirect = exports.Prompt = exports.NavLink = exports.MemoryRouter = exports.Link = exports.HashRouter = exports.BrowserRouter = undefined;
                                                                                                                       // 5
var _BrowserRouter2 = require('./BrowserRouter');                                                                      // 6
                                                                                                                       // 7
var _BrowserRouter3 = _interopRequireDefault(_BrowserRouter2);                                                         // 8
                                                                                                                       // 9
var _HashRouter2 = require('./HashRouter');                                                                            // 10
                                                                                                                       // 11
var _HashRouter3 = _interopRequireDefault(_HashRouter2);                                                               // 12
                                                                                                                       // 13
var _Link2 = require('./Link');                                                                                        // 14
                                                                                                                       // 15
var _Link3 = _interopRequireDefault(_Link2);                                                                           // 16
                                                                                                                       // 17
var _MemoryRouter2 = require('./MemoryRouter');                                                                        // 18
                                                                                                                       // 19
var _MemoryRouter3 = _interopRequireDefault(_MemoryRouter2);                                                           // 20
                                                                                                                       // 21
var _NavLink2 = require('./NavLink');                                                                                  // 22
                                                                                                                       // 23
var _NavLink3 = _interopRequireDefault(_NavLink2);                                                                     // 24
                                                                                                                       // 25
var _Prompt2 = require('./Prompt');                                                                                    // 26
                                                                                                                       // 27
var _Prompt3 = _interopRequireDefault(_Prompt2);                                                                       // 28
                                                                                                                       // 29
var _Redirect2 = require('./Redirect');                                                                                // 30
                                                                                                                       // 31
var _Redirect3 = _interopRequireDefault(_Redirect2);                                                                   // 32
                                                                                                                       // 33
var _Route2 = require('./Route');                                                                                      // 34
                                                                                                                       // 35
var _Route3 = _interopRequireDefault(_Route2);                                                                         // 36
                                                                                                                       // 37
var _Router2 = require('./Router');                                                                                    // 38
                                                                                                                       // 39
var _Router3 = _interopRequireDefault(_Router2);                                                                       // 40
                                                                                                                       // 41
var _StaticRouter2 = require('./StaticRouter');                                                                        // 42
                                                                                                                       // 43
var _StaticRouter3 = _interopRequireDefault(_StaticRouter2);                                                           // 44
                                                                                                                       // 45
var _Switch2 = require('./Switch');                                                                                    // 46
                                                                                                                       // 47
var _Switch3 = _interopRequireDefault(_Switch2);                                                                       // 48
                                                                                                                       // 49
var _matchPath2 = require('./matchPath');                                                                              // 50
                                                                                                                       // 51
var _matchPath3 = _interopRequireDefault(_matchPath2);                                                                 // 52
                                                                                                                       // 53
var _withRouter2 = require('./withRouter');                                                                            // 54
                                                                                                                       // 55
var _withRouter3 = _interopRequireDefault(_withRouter2);                                                               // 56
                                                                                                                       // 57
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 58
                                                                                                                       // 59
exports.BrowserRouter = _BrowserRouter3.default;                                                                       // 60
exports.HashRouter = _HashRouter3.default;                                                                             // 61
exports.Link = _Link3.default;                                                                                         // 62
exports.MemoryRouter = _MemoryRouter3.default;                                                                         // 63
exports.NavLink = _NavLink3.default;                                                                                   // 64
exports.Prompt = _Prompt3.default;                                                                                     // 65
exports.Redirect = _Redirect3.default;                                                                                 // 66
exports.Route = _Route3.default;                                                                                       // 67
exports.Router = _Router3.default;                                                                                     // 68
exports.StaticRouter = _StaticRouter3.default;                                                                         // 69
exports.Switch = _Switch3.default;                                                                                     // 70
exports.matchPath = _matchPath3.default;                                                                               // 71
exports.withRouter = _withRouter3.default;                                                                             // 72
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"BrowserRouter.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router-dom/BrowserRouter.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _warning = require('warning');                                                                                     // 5
                                                                                                                       // 6
var _warning2 = _interopRequireDefault(_warning);                                                                      // 7
                                                                                                                       // 8
var _react = require('react');                                                                                         // 9
                                                                                                                       // 10
var _react2 = _interopRequireDefault(_react);                                                                          // 11
                                                                                                                       // 12
var _propTypes = require('prop-types');                                                                                // 13
                                                                                                                       // 14
var _propTypes2 = _interopRequireDefault(_propTypes);                                                                  // 15
                                                                                                                       // 16
var _createBrowserHistory = require('history/createBrowserHistory');                                                   // 17
                                                                                                                       // 18
var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);                                            // 19
                                                                                                                       // 20
var _Router = require('./Router');                                                                                     // 21
                                                                                                                       // 22
var _Router2 = _interopRequireDefault(_Router);                                                                        // 23
                                                                                                                       // 24
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 25
                                                                                                                       // 26
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 28
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
                                                                                                                       // 30
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
                                                                                                                       // 32
/**                                                                                                                    // 33
 * The public API for a <Router> that uses HTML5 history.                                                              // 34
 */                                                                                                                    // 35
var BrowserRouter = function (_React$Component) {                                                                      // 36
  _inherits(BrowserRouter, _React$Component);                                                                          // 37
                                                                                                                       // 38
  function BrowserRouter() {                                                                                           // 39
    var _temp, _this, _ret;                                                                                            // 40
                                                                                                                       // 41
    _classCallCheck(this, BrowserRouter);                                                                              // 42
                                                                                                                       // 43
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             // 44
      args[_key] = arguments[_key];                                                                                    // 45
    }                                                                                                                  // 46
                                                                                                                       // 47
    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _createBrowserHistory2.default)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }                                                                                                                    // 49
                                                                                                                       // 50
  BrowserRouter.prototype.componentWillMount = function componentWillMount() {                                         // 51
    (0, _warning2.default)(!this.props.history, '<BrowserRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { BrowserRouter as Router }`.');
  };                                                                                                                   // 53
                                                                                                                       // 54
  BrowserRouter.prototype.render = function render() {                                                                 // 55
    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });  // 56
  };                                                                                                                   // 57
                                                                                                                       // 58
  return BrowserRouter;                                                                                                // 59
}(_react2.default.Component);                                                                                          // 60
                                                                                                                       // 61
BrowserRouter.propTypes = {                                                                                            // 62
  basename: _propTypes2.default.string,                                                                                // 63
  forceRefresh: _propTypes2.default.bool,                                                                              // 64
  getUserConfirmation: _propTypes2.default.func,                                                                       // 65
  keyLength: _propTypes2.default.number,                                                                               // 66
  children: _propTypes2.default.node                                                                                   // 67
};                                                                                                                     // 68
exports.default = BrowserRouter;                                                                                       // 69
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Router.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router-dom/Router.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _Router = require('react-router/Router');                                                                          // 5
                                                                                                                       // 6
var _Router2 = _interopRequireDefault(_Router);                                                                        // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = _Router2.default; // Written in this round about way for babel-transform-imports                     // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"HashRouter.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router-dom/HashRouter.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _warning = require('warning');                                                                                     // 5
                                                                                                                       // 6
var _warning2 = _interopRequireDefault(_warning);                                                                      // 7
                                                                                                                       // 8
var _react = require('react');                                                                                         // 9
                                                                                                                       // 10
var _react2 = _interopRequireDefault(_react);                                                                          // 11
                                                                                                                       // 12
var _propTypes = require('prop-types');                                                                                // 13
                                                                                                                       // 14
var _propTypes2 = _interopRequireDefault(_propTypes);                                                                  // 15
                                                                                                                       // 16
var _createHashHistory = require('history/createHashHistory');                                                         // 17
                                                                                                                       // 18
var _createHashHistory2 = _interopRequireDefault(_createHashHistory);                                                  // 19
                                                                                                                       // 20
var _Router = require('./Router');                                                                                     // 21
                                                                                                                       // 22
var _Router2 = _interopRequireDefault(_Router);                                                                        // 23
                                                                                                                       // 24
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 25
                                                                                                                       // 26
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 28
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
                                                                                                                       // 30
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
                                                                                                                       // 32
/**                                                                                                                    // 33
 * The public API for a <Router> that uses window.location.hash.                                                       // 34
 */                                                                                                                    // 35
var HashRouter = function (_React$Component) {                                                                         // 36
  _inherits(HashRouter, _React$Component);                                                                             // 37
                                                                                                                       // 38
  function HashRouter() {                                                                                              // 39
    var _temp, _this, _ret;                                                                                            // 40
                                                                                                                       // 41
    _classCallCheck(this, HashRouter);                                                                                 // 42
                                                                                                                       // 43
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             // 44
      args[_key] = arguments[_key];                                                                                    // 45
    }                                                                                                                  // 46
                                                                                                                       // 47
    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _createHashHistory2.default)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }                                                                                                                    // 49
                                                                                                                       // 50
  HashRouter.prototype.componentWillMount = function componentWillMount() {                                            // 51
    (0, _warning2.default)(!this.props.history, '<HashRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { HashRouter as Router }`.');
  };                                                                                                                   // 53
                                                                                                                       // 54
  HashRouter.prototype.render = function render() {                                                                    // 55
    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });  // 56
  };                                                                                                                   // 57
                                                                                                                       // 58
  return HashRouter;                                                                                                   // 59
}(_react2.default.Component);                                                                                          // 60
                                                                                                                       // 61
HashRouter.propTypes = {                                                                                               // 62
  basename: _propTypes2.default.string,                                                                                // 63
  getUserConfirmation: _propTypes2.default.func,                                                                       // 64
  hashType: _propTypes2.default.oneOf(['hashbang', 'noslash', 'slash']),                                               // 65
  children: _propTypes2.default.node                                                                                   // 66
};                                                                                                                     // 67
exports.default = HashRouter;                                                                                          // 68
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Link.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router-dom/Link.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 6
var _react = require('react');                                                                                         // 7
                                                                                                                       // 8
var _react2 = _interopRequireDefault(_react);                                                                          // 9
                                                                                                                       // 10
var _propTypes = require('prop-types');                                                                                // 11
                                                                                                                       // 12
var _propTypes2 = _interopRequireDefault(_propTypes);                                                                  // 13
                                                                                                                       // 14
var _invariant = require('invariant');                                                                                 // 15
                                                                                                                       // 16
var _invariant2 = _interopRequireDefault(_invariant);                                                                  // 17
                                                                                                                       // 18
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 19
                                                                                                                       // 20
function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
                                                                                                                       // 22
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 24
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
                                                                                                                       // 26
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
                                                                                                                       // 28
var isModifiedEvent = function isModifiedEvent(event) {                                                                // 29
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);                                         // 30
};                                                                                                                     // 31
                                                                                                                       // 32
/**                                                                                                                    // 33
 * The public API for rendering a history-aware <a>.                                                                   // 34
 */                                                                                                                    // 35
                                                                                                                       // 36
var Link = function (_React$Component) {                                                                               // 37
  _inherits(Link, _React$Component);                                                                                   // 38
                                                                                                                       // 39
  function Link() {                                                                                                    // 40
    var _temp, _this, _ret;                                                                                            // 41
                                                                                                                       // 42
    _classCallCheck(this, Link);                                                                                       // 43
                                                                                                                       // 44
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             // 45
      args[_key] = arguments[_key];                                                                                    // 46
    }                                                                                                                  // 47
                                                                                                                       // 48
    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
      if (_this.props.onClick) _this.props.onClick(event);                                                             // 50
                                                                                                                       // 51
      if (!event.defaultPrevented && // onClick prevented default                                                      // 52
      event.button === 0 && // ignore right clicks                                                                     // 53
      !_this.props.target && // let browser handle "target=_blank" etc.                                                // 54
      !isModifiedEvent(event) // ignore clicks with modifier keys                                                      // 55
      ) {                                                                                                              // 56
          event.preventDefault();                                                                                      // 57
                                                                                                                       // 58
          var history = _this.context.router.history;                                                                  // 59
          var _this$props = _this.props,                                                                               // 60
              replace = _this$props.replace,                                                                           // 61
              to = _this$props.to;                                                                                     // 62
                                                                                                                       // 63
                                                                                                                       // 64
          if (replace) {                                                                                               // 65
            history.replace(to);                                                                                       // 66
          } else {                                                                                                     // 67
            history.push(to);                                                                                          // 68
          }                                                                                                            // 69
        }                                                                                                              // 70
    }, _temp), _possibleConstructorReturn(_this, _ret);                                                                // 71
  }                                                                                                                    // 72
                                                                                                                       // 73
  Link.prototype.render = function render() {                                                                          // 74
    var _props = this.props,                                                                                           // 75
        replace = _props.replace,                                                                                      // 76
        to = _props.to,                                                                                                // 77
        innerRef = _props.innerRef,                                                                                    // 78
        props = _objectWithoutProperties(_props, ['replace', 'to', 'innerRef']); // eslint-disable-line no-unused-vars
                                                                                                                       // 80
    (0, _invariant2.default)(this.context.router, 'You should not use <Link> outside a <Router>');                     // 81
                                                                                                                       // 82
    var href = this.context.router.history.createHref(typeof to === 'string' ? { pathname: to } : to);                 // 83
                                                                                                                       // 84
    return _react2.default.createElement('a', _extends({}, props, { onClick: this.handleClick, href: href, ref: innerRef }));
  };                                                                                                                   // 86
                                                                                                                       // 87
  return Link;                                                                                                         // 88
}(_react2.default.Component);                                                                                          // 89
                                                                                                                       // 90
Link.propTypes = {                                                                                                     // 91
  onClick: _propTypes2.default.func,                                                                                   // 92
  target: _propTypes2.default.string,                                                                                  // 93
  replace: _propTypes2.default.bool,                                                                                   // 94
  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired,              // 95
  innerRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func])                      // 96
};                                                                                                                     // 97
Link.defaultProps = {                                                                                                  // 98
  replace: false                                                                                                       // 99
};                                                                                                                     // 100
Link.contextTypes = {                                                                                                  // 101
  router: _propTypes2.default.shape({                                                                                  // 102
    history: _propTypes2.default.shape({                                                                               // 103
      push: _propTypes2.default.func.isRequired,                                                                       // 104
      replace: _propTypes2.default.func.isRequired,                                                                    // 105
      createHref: _propTypes2.default.func.isRequired                                                                  // 106
    }).isRequired                                                                                                      // 107
  }).isRequired                                                                                                        // 108
};                                                                                                                     // 109
exports.default = Link;                                                                                                // 110
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"MemoryRouter.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router-dom/MemoryRouter.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _MemoryRouter = require('react-router/MemoryRouter');                                                              // 5
                                                                                                                       // 6
var _MemoryRouter2 = _interopRequireDefault(_MemoryRouter);                                                            // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = _MemoryRouter2.default; // Written in this round about way for babel-transform-imports               // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"NavLink.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router-dom/NavLink.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 6
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
                                                                                                                       // 8
var _react = require('react');                                                                                         // 9
                                                                                                                       // 10
var _react2 = _interopRequireDefault(_react);                                                                          // 11
                                                                                                                       // 12
var _propTypes = require('prop-types');                                                                                // 13
                                                                                                                       // 14
var _propTypes2 = _interopRequireDefault(_propTypes);                                                                  // 15
                                                                                                                       // 16
var _Route = require('./Route');                                                                                       // 17
                                                                                                                       // 18
var _Route2 = _interopRequireDefault(_Route);                                                                          // 19
                                                                                                                       // 20
var _Link = require('./Link');                                                                                         // 21
                                                                                                                       // 22
var _Link2 = _interopRequireDefault(_Link);                                                                            // 23
                                                                                                                       // 24
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 25
                                                                                                                       // 26
function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
                                                                                                                       // 28
/**                                                                                                                    // 29
 * A <Link> wrapper that knows if it's "active" or not.                                                                // 30
 */                                                                                                                    // 31
var NavLink = function NavLink(_ref) {                                                                                 // 32
  var to = _ref.to,                                                                                                    // 33
      exact = _ref.exact,                                                                                              // 34
      strict = _ref.strict,                                                                                            // 35
      location = _ref.location,                                                                                        // 36
      activeClassName = _ref.activeClassName,                                                                          // 37
      className = _ref.className,                                                                                      // 38
      activeStyle = _ref.activeStyle,                                                                                  // 39
      style = _ref.style,                                                                                              // 40
      getIsActive = _ref.isActive,                                                                                     // 41
      ariaCurrent = _ref.ariaCurrent,                                                                                  // 42
      rest = _objectWithoutProperties(_ref, ['to', 'exact', 'strict', 'location', 'activeClassName', 'className', 'activeStyle', 'style', 'isActive', 'ariaCurrent']);
                                                                                                                       // 44
  return _react2.default.createElement(_Route2.default, {                                                              // 45
    path: (typeof to === 'undefined' ? 'undefined' : _typeof(to)) === 'object' ? to.pathname : to,                     // 46
    exact: exact,                                                                                                      // 47
    strict: strict,                                                                                                    // 48
    location: location,                                                                                                // 49
    children: function children(_ref2) {                                                                               // 50
      var location = _ref2.location,                                                                                   // 51
          match = _ref2.match;                                                                                         // 52
                                                                                                                       // 53
      var isActive = !!(getIsActive ? getIsActive(match, location) : match);                                           // 54
                                                                                                                       // 55
      return _react2.default.createElement(_Link2.default, _extends({                                                  // 56
        to: to,                                                                                                        // 57
        className: isActive ? [className, activeClassName].filter(function (i) {                                       // 58
          return i;                                                                                                    // 59
        }).join(' ') : className,                                                                                      // 60
        style: isActive ? _extends({}, style, activeStyle) : style,                                                    // 61
        'aria-current': isActive && ariaCurrent                                                                        // 62
      }, rest));                                                                                                       // 63
    }                                                                                                                  // 64
  });                                                                                                                  // 65
};                                                                                                                     // 66
                                                                                                                       // 67
NavLink.propTypes = {                                                                                                  // 68
  to: _Link2.default.propTypes.to,                                                                                     // 69
  exact: _propTypes2.default.bool,                                                                                     // 70
  strict: _propTypes2.default.bool,                                                                                    // 71
  location: _propTypes2.default.object,                                                                                // 72
  activeClassName: _propTypes2.default.string,                                                                         // 73
  className: _propTypes2.default.string,                                                                               // 74
  activeStyle: _propTypes2.default.object,                                                                             // 75
  style: _propTypes2.default.object,                                                                                   // 76
  isActive: _propTypes2.default.func,                                                                                  // 77
  ariaCurrent: _propTypes2.default.oneOf(['page', 'step', 'location', 'true'])                                         // 78
};                                                                                                                     // 79
                                                                                                                       // 80
NavLink.defaultProps = {                                                                                               // 81
  activeClassName: 'active',                                                                                           // 82
  ariaCurrent: 'true'                                                                                                  // 83
};                                                                                                                     // 84
                                                                                                                       // 85
exports.default = NavLink;                                                                                             // 86
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Route.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router-dom/Route.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _Route = require('react-router/Route');                                                                            // 5
                                                                                                                       // 6
var _Route2 = _interopRequireDefault(_Route);                                                                          // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = _Route2.default; // Written in this round about way for babel-transform-imports                      // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Prompt.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router-dom/Prompt.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _Prompt = require('react-router/Prompt');                                                                          // 5
                                                                                                                       // 6
var _Prompt2 = _interopRequireDefault(_Prompt);                                                                        // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = _Prompt2.default; // Written in this round about way for babel-transform-imports                     // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Redirect.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router-dom/Redirect.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _Redirect = require('react-router/Redirect');                                                                      // 5
                                                                                                                       // 6
var _Redirect2 = _interopRequireDefault(_Redirect);                                                                    // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = _Redirect2.default; // Written in this round about way for babel-transform-imports                   // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"StaticRouter.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router-dom/StaticRouter.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _StaticRouter = require('react-router/StaticRouter');                                                              // 5
                                                                                                                       // 6
var _StaticRouter2 = _interopRequireDefault(_StaticRouter);                                                            // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = _StaticRouter2.default; // Written in this round about way for babel-transform-imports               // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Switch.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router-dom/Switch.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _Switch = require('react-router/Switch');                                                                          // 5
                                                                                                                       // 6
var _Switch2 = _interopRequireDefault(_Switch);                                                                        // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = _Switch2.default; // Written in this round about way for babel-transform-imports                     // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"matchPath.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router-dom/matchPath.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _matchPath = require('react-router/matchPath');                                                                    // 5
                                                                                                                       // 6
var _matchPath2 = _interopRequireDefault(_matchPath);                                                                  // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = _matchPath2.default; // Written in this round about way for babel-transform-imports                  // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"withRouter.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router-dom/withRouter.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _withRouter = require('react-router/withRouter');                                                                  // 5
                                                                                                                       // 6
var _withRouter2 = _interopRequireDefault(_withRouter);                                                                // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
exports.default = _withRouter2.default; // Written in this round about way for babel-transform-imports                 // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"warning":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/warning/package.json                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "warning";                                                                                              // 1
exports.version = "3.0.0";                                                                                             // 2
exports.browser = "browser.js";                                                                                        // 3
exports.main = "warning.js";                                                                                           // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"browser.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/warning/browser.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2014-2015, Facebook, Inc.                                                                                 // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 */                                                                                                                    // 8
                                                                                                                       // 9
'use strict';                                                                                                          // 10
                                                                                                                       // 11
/**                                                                                                                    // 12
 * Similar to invariant but only logs a warning if the condition is not met.                                           // 13
 * This can be used to log issues in development environments in critical                                              // 14
 * paths. Removing the logging code for production environments will keep the                                          // 15
 * same logic and follow the same code paths.                                                                          // 16
 */                                                                                                                    // 17
                                                                                                                       // 18
var warning = function() {};                                                                                           // 19
                                                                                                                       // 20
if (process.env.NODE_ENV !== 'production') {                                                                           // 21
  warning = function(condition, format, args) {                                                                        // 22
    var len = arguments.length;                                                                                        // 23
    args = new Array(len > 2 ? len - 2 : 0);                                                                           // 24
    for (var key = 2; key < len; key++) {                                                                              // 25
      args[key - 2] = arguments[key];                                                                                  // 26
    }                                                                                                                  // 27
    if (format === undefined) {                                                                                        // 28
      throw new Error(                                                                                                 // 29
        '`warning(condition, format, ...args)` requires a warning ' +                                                  // 30
        'message argument'                                                                                             // 31
      );                                                                                                               // 32
    }                                                                                                                  // 33
                                                                                                                       // 34
    if (format.length < 10 || (/^[s\W]*$/).test(format)) {                                                             // 35
      throw new Error(                                                                                                 // 36
        'The warning format should be able to uniquely identify this ' +                                               // 37
        'warning. Please, use a more descriptive format than: ' + format                                               // 38
      );                                                                                                               // 39
    }                                                                                                                  // 40
                                                                                                                       // 41
    if (!condition) {                                                                                                  // 42
      var argIndex = 0;                                                                                                // 43
      var message = 'Warning: ' +                                                                                      // 44
        format.replace(/%s/g, function() {                                                                             // 45
          return args[argIndex++];                                                                                     // 46
        });                                                                                                            // 47
      if (typeof console !== 'undefined') {                                                                            // 48
        console.error(message);                                                                                        // 49
      }                                                                                                                // 50
      try {                                                                                                            // 51
        // This error was thrown as a convenience so that you can use this stack                                       // 52
        // to find the callsite that caused this warning to fire.                                                      // 53
        throw new Error(message);                                                                                      // 54
      } catch(x) {}                                                                                                    // 55
    }                                                                                                                  // 56
  };                                                                                                                   // 57
}                                                                                                                      // 58
                                                                                                                       // 59
module.exports = warning;                                                                                              // 60
                                                                                                                       // 61
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"history":{"createBrowserHistory.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/history/createBrowserHistory.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
                                                                                                                       // 6
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 8
var _warning = require('warning');                                                                                     // 9
                                                                                                                       // 10
var _warning2 = _interopRequireDefault(_warning);                                                                      // 11
                                                                                                                       // 12
var _invariant = require('invariant');                                                                                 // 13
                                                                                                                       // 14
var _invariant2 = _interopRequireDefault(_invariant);                                                                  // 15
                                                                                                                       // 16
var _LocationUtils = require('./LocationUtils');                                                                       // 17
                                                                                                                       // 18
var _PathUtils = require('./PathUtils');                                                                               // 19
                                                                                                                       // 20
var _createTransitionManager = require('./createTransitionManager');                                                   // 21
                                                                                                                       // 22
var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);                                      // 23
                                                                                                                       // 24
var _DOMUtils = require('./DOMUtils');                                                                                 // 25
                                                                                                                       // 26
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 27
                                                                                                                       // 28
var PopStateEvent = 'popstate';                                                                                        // 29
var HashChangeEvent = 'hashchange';                                                                                    // 30
                                                                                                                       // 31
var getHistoryState = function getHistoryState() {                                                                     // 32
  try {                                                                                                                // 33
    return window.history.state || {};                                                                                 // 34
  } catch (e) {                                                                                                        // 35
    // IE 11 sometimes throws when accessing window.history.state                                                      // 36
    // See https://github.com/ReactTraining/history/pull/289                                                           // 37
    return {};                                                                                                         // 38
  }                                                                                                                    // 39
};                                                                                                                     // 40
                                                                                                                       // 41
/**                                                                                                                    // 42
 * Creates a history object that uses the HTML5 history API including                                                  // 43
 * pushState, replaceState, and the popstate event.                                                                    // 44
 */                                                                                                                    // 45
var createBrowserHistory = function createBrowserHistory() {                                                           // 46
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                                  // 47
                                                                                                                       // 48
  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Browser history needs a DOM');                                        // 49
                                                                                                                       // 50
  var globalHistory = window.history;                                                                                  // 51
  var canUseHistory = (0, _DOMUtils.supportsHistory)();                                                                // 52
  var needsHashChangeListener = !(0, _DOMUtils.supportsPopStateOnHashChange)();                                        // 53
                                                                                                                       // 54
  var _props$forceRefresh = props.forceRefresh,                                                                        // 55
      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,                                  // 56
      _props$getUserConfirm = props.getUserConfirmation,                                                               // 57
      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,   // 58
      _props$keyLength = props.keyLength,                                                                              // 59
      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;                                               // 60
                                                                                                                       // 61
  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';
                                                                                                                       // 63
  var getDOMLocation = function getDOMLocation(historyState) {                                                         // 64
    var _ref = historyState || {},                                                                                     // 65
        key = _ref.key,                                                                                                // 66
        state = _ref.state;                                                                                            // 67
                                                                                                                       // 68
    var _window$location = window.location,                                                                            // 69
        pathname = _window$location.pathname,                                                                          // 70
        search = _window$location.search,                                                                              // 71
        hash = _window$location.hash;                                                                                  // 72
                                                                                                                       // 73
                                                                                                                       // 74
    var path = pathname + search + hash;                                                                               // 75
                                                                                                                       // 76
    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
                                                                                                                       // 78
    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);                                                // 79
                                                                                                                       // 80
    return (0, _LocationUtils.createLocation)(path, state, key);                                                       // 81
  };                                                                                                                   // 82
                                                                                                                       // 83
  var createKey = function createKey() {                                                                               // 84
    return Math.random().toString(36).substr(2, keyLength);                                                            // 85
  };                                                                                                                   // 86
                                                                                                                       // 87
  var transitionManager = (0, _createTransitionManager2.default)();                                                    // 88
                                                                                                                       // 89
  var setState = function setState(nextState) {                                                                        // 90
    _extends(history, nextState);                                                                                      // 91
                                                                                                                       // 92
    history.length = globalHistory.length;                                                                             // 93
                                                                                                                       // 94
    transitionManager.notifyListeners(history.location, history.action);                                               // 95
  };                                                                                                                   // 96
                                                                                                                       // 97
  var handlePopState = function handlePopState(event) {                                                                // 98
    // Ignore extraneous popstate events in WebKit.                                                                    // 99
    if ((0, _DOMUtils.isExtraneousPopstateEvent)(event)) return;                                                       // 100
                                                                                                                       // 101
    handlePop(getDOMLocation(event.state));                                                                            // 102
  };                                                                                                                   // 103
                                                                                                                       // 104
  var handleHashChange = function handleHashChange() {                                                                 // 105
    handlePop(getDOMLocation(getHistoryState()));                                                                      // 106
  };                                                                                                                   // 107
                                                                                                                       // 108
  var forceNextPop = false;                                                                                            // 109
                                                                                                                       // 110
  var handlePop = function handlePop(location) {                                                                       // 111
    if (forceNextPop) {                                                                                                // 112
      forceNextPop = false;                                                                                            // 113
      setState();                                                                                                      // 114
    } else {                                                                                                           // 115
      var action = 'POP';                                                                                              // 116
                                                                                                                       // 117
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {                     // 118
        if (ok) {                                                                                                      // 119
          setState({ action: action, location: location });                                                            // 120
        } else {                                                                                                       // 121
          revertPop(location);                                                                                         // 122
        }                                                                                                              // 123
      });                                                                                                              // 124
    }                                                                                                                  // 125
  };                                                                                                                   // 126
                                                                                                                       // 127
  var revertPop = function revertPop(fromLocation) {                                                                   // 128
    var toLocation = history.location;                                                                                 // 129
                                                                                                                       // 130
    // TODO: We could probably make this more reliable by                                                              // 131
    // keeping a list of keys we've seen in sessionStorage.                                                            // 132
    // Instead, we just default to 0 for keys we don't know.                                                           // 133
                                                                                                                       // 134
    var toIndex = allKeys.indexOf(toLocation.key);                                                                     // 135
                                                                                                                       // 136
    if (toIndex === -1) toIndex = 0;                                                                                   // 137
                                                                                                                       // 138
    var fromIndex = allKeys.indexOf(fromLocation.key);                                                                 // 139
                                                                                                                       // 140
    if (fromIndex === -1) fromIndex = 0;                                                                               // 141
                                                                                                                       // 142
    var delta = toIndex - fromIndex;                                                                                   // 143
                                                                                                                       // 144
    if (delta) {                                                                                                       // 145
      forceNextPop = true;                                                                                             // 146
      go(delta);                                                                                                       // 147
    }                                                                                                                  // 148
  };                                                                                                                   // 149
                                                                                                                       // 150
  var initialLocation = getDOMLocation(getHistoryState());                                                             // 151
  var allKeys = [initialLocation.key];                                                                                 // 152
                                                                                                                       // 153
  // Public interface                                                                                                  // 154
                                                                                                                       // 155
  var createHref = function createHref(location) {                                                                     // 156
    return basename + (0, _PathUtils.createPath)(location);                                                            // 157
  };                                                                                                                   // 158
                                                                                                                       // 159
  var push = function push(path, state) {                                                                              // 160
    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
                                                                                                                       // 162
    var action = 'PUSH';                                                                                               // 163
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);                     // 164
                                                                                                                       // 165
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {                       // 166
      if (!ok) return;                                                                                                 // 167
                                                                                                                       // 168
      var href = createHref(location);                                                                                 // 169
      var key = location.key,                                                                                          // 170
          state = location.state;                                                                                      // 171
                                                                                                                       // 172
                                                                                                                       // 173
      if (canUseHistory) {                                                                                             // 174
        globalHistory.pushState({ key: key, state: state }, null, href);                                               // 175
                                                                                                                       // 176
        if (forceRefresh) {                                                                                            // 177
          window.location.href = href;                                                                                 // 178
        } else {                                                                                                       // 179
          var prevIndex = allKeys.indexOf(history.location.key);                                                       // 180
          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);                                       // 181
                                                                                                                       // 182
          nextKeys.push(location.key);                                                                                 // 183
          allKeys = nextKeys;                                                                                          // 184
                                                                                                                       // 185
          setState({ action: action, location: location });                                                            // 186
        }                                                                                                              // 187
      } else {                                                                                                         // 188
        (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');
                                                                                                                       // 190
        window.location.href = href;                                                                                   // 191
      }                                                                                                                // 192
    });                                                                                                                // 193
  };                                                                                                                   // 194
                                                                                                                       // 195
  var replace = function replace(path, state) {                                                                        // 196
    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
                                                                                                                       // 198
    var action = 'REPLACE';                                                                                            // 199
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);                     // 200
                                                                                                                       // 201
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {                       // 202
      if (!ok) return;                                                                                                 // 203
                                                                                                                       // 204
      var href = createHref(location);                                                                                 // 205
      var key = location.key,                                                                                          // 206
          state = location.state;                                                                                      // 207
                                                                                                                       // 208
                                                                                                                       // 209
      if (canUseHistory) {                                                                                             // 210
        globalHistory.replaceState({ key: key, state: state }, null, href);                                            // 211
                                                                                                                       // 212
        if (forceRefresh) {                                                                                            // 213
          window.location.replace(href);                                                                               // 214
        } else {                                                                                                       // 215
          var prevIndex = allKeys.indexOf(history.location.key);                                                       // 216
                                                                                                                       // 217
          if (prevIndex !== -1) allKeys[prevIndex] = location.key;                                                     // 218
                                                                                                                       // 219
          setState({ action: action, location: location });                                                            // 220
        }                                                                                                              // 221
      } else {                                                                                                         // 222
        (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');
                                                                                                                       // 224
        window.location.replace(href);                                                                                 // 225
      }                                                                                                                // 226
    });                                                                                                                // 227
  };                                                                                                                   // 228
                                                                                                                       // 229
  var go = function go(n) {                                                                                            // 230
    globalHistory.go(n);                                                                                               // 231
  };                                                                                                                   // 232
                                                                                                                       // 233
  var goBack = function goBack() {                                                                                     // 234
    return go(-1);                                                                                                     // 235
  };                                                                                                                   // 236
                                                                                                                       // 237
  var goForward = function goForward() {                                                                               // 238
    return go(1);                                                                                                      // 239
  };                                                                                                                   // 240
                                                                                                                       // 241
  var listenerCount = 0;                                                                                               // 242
                                                                                                                       // 243
  var checkDOMListeners = function checkDOMListeners(delta) {                                                          // 244
    listenerCount += delta;                                                                                            // 245
                                                                                                                       // 246
    if (listenerCount === 1) {                                                                                         // 247
      (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);                                          // 248
                                                                                                                       // 249
      if (needsHashChangeListener) (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);         // 250
    } else if (listenerCount === 0) {                                                                                  // 251
      (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);                                       // 252
                                                                                                                       // 253
      if (needsHashChangeListener) (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);      // 254
    }                                                                                                                  // 255
  };                                                                                                                   // 256
                                                                                                                       // 257
  var isBlocked = false;                                                                                               // 258
                                                                                                                       // 259
  var block = function block() {                                                                                       // 260
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;                            // 261
                                                                                                                       // 262
    var unblock = transitionManager.setPrompt(prompt);                                                                 // 263
                                                                                                                       // 264
    if (!isBlocked) {                                                                                                  // 265
      checkDOMListeners(1);                                                                                            // 266
      isBlocked = true;                                                                                                // 267
    }                                                                                                                  // 268
                                                                                                                       // 269
    return function () {                                                                                               // 270
      if (isBlocked) {                                                                                                 // 271
        isBlocked = false;                                                                                             // 272
        checkDOMListeners(-1);                                                                                         // 273
      }                                                                                                                // 274
                                                                                                                       // 275
      return unblock();                                                                                                // 276
    };                                                                                                                 // 277
  };                                                                                                                   // 278
                                                                                                                       // 279
  var listen = function listen(listener) {                                                                             // 280
    var unlisten = transitionManager.appendListener(listener);                                                         // 281
    checkDOMListeners(1);                                                                                              // 282
                                                                                                                       // 283
    return function () {                                                                                               // 284
      checkDOMListeners(-1);                                                                                           // 285
      unlisten();                                                                                                      // 286
    };                                                                                                                 // 287
  };                                                                                                                   // 288
                                                                                                                       // 289
  var history = {                                                                                                      // 290
    length: globalHistory.length,                                                                                      // 291
    action: 'POP',                                                                                                     // 292
    location: initialLocation,                                                                                         // 293
    createHref: createHref,                                                                                            // 294
    push: push,                                                                                                        // 295
    replace: replace,                                                                                                  // 296
    go: go,                                                                                                            // 297
    goBack: goBack,                                                                                                    // 298
    goForward: goForward,                                                                                              // 299
    block: block,                                                                                                      // 300
    listen: listen                                                                                                     // 301
  };                                                                                                                   // 302
                                                                                                                       // 303
  return history;                                                                                                      // 304
};                                                                                                                     // 305
                                                                                                                       // 306
exports.default = createBrowserHistory;                                                                                // 307
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"LocationUtils.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/history/LocationUtils.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.locationsAreEqual = exports.createLocation = undefined;                                                        // 4
                                                                                                                       // 5
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 7
var _resolvePathname = require('resolve-pathname');                                                                    // 8
                                                                                                                       // 9
var _resolvePathname2 = _interopRequireDefault(_resolvePathname);                                                      // 10
                                                                                                                       // 11
var _valueEqual = require('value-equal');                                                                              // 12
                                                                                                                       // 13
var _valueEqual2 = _interopRequireDefault(_valueEqual);                                                                // 14
                                                                                                                       // 15
var _PathUtils = require('./PathUtils');                                                                               // 16
                                                                                                                       // 17
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 18
                                                                                                                       // 19
var createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {             // 20
  var location = void 0;                                                                                               // 21
  if (typeof path === 'string') {                                                                                      // 22
    // Two-arg form: push(path, state)                                                                                 // 23
    location = (0, _PathUtils.parsePath)(path);                                                                        // 24
    location.state = state;                                                                                            // 25
  } else {                                                                                                             // 26
    // One-arg form: push(location)                                                                                    // 27
    location = _extends({}, path);                                                                                     // 28
                                                                                                                       // 29
    if (location.pathname === undefined) location.pathname = '';                                                       // 30
                                                                                                                       // 31
    if (location.search) {                                                                                             // 32
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;                                  // 33
    } else {                                                                                                           // 34
      location.search = '';                                                                                            // 35
    }                                                                                                                  // 36
                                                                                                                       // 37
    if (location.hash) {                                                                                               // 38
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;                                        // 39
    } else {                                                                                                           // 40
      location.hash = '';                                                                                              // 41
    }                                                                                                                  // 42
                                                                                                                       // 43
    if (state !== undefined && location.state === undefined) location.state = state;                                   // 44
  }                                                                                                                    // 45
                                                                                                                       // 46
  try {                                                                                                                // 47
    location.pathname = decodeURI(location.pathname);                                                                  // 48
  } catch (e) {                                                                                                        // 49
    if (e instanceof URIError) {                                                                                       // 50
      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
    } else {                                                                                                           // 52
      throw e;                                                                                                         // 53
    }                                                                                                                  // 54
  }                                                                                                                    // 55
                                                                                                                       // 56
  if (key) location.key = key;                                                                                         // 57
                                                                                                                       // 58
  if (currentLocation) {                                                                                               // 59
    // Resolve incomplete/relative pathname relative to current location.                                              // 60
    if (!location.pathname) {                                                                                          // 61
      location.pathname = currentLocation.pathname;                                                                    // 62
    } else if (location.pathname.charAt(0) !== '/') {                                                                  // 63
      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);                 // 64
    }                                                                                                                  // 65
  } else {                                                                                                             // 66
    // When there is no prior location and pathname is empty, set it to /                                              // 67
    if (!location.pathname) {                                                                                          // 68
      location.pathname = '/';                                                                                         // 69
    }                                                                                                                  // 70
  }                                                                                                                    // 71
                                                                                                                       // 72
  return location;                                                                                                     // 73
};                                                                                                                     // 74
                                                                                                                       // 75
var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {                                 // 76
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
};                                                                                                                     // 78
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"PathUtils.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/history/PathUtils.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {                                       // 4
  return path.charAt(0) === '/' ? path : '/' + path;                                                                   // 5
};                                                                                                                     // 6
                                                                                                                       // 7
var stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {                                 // 8
  return path.charAt(0) === '/' ? path.substr(1) : path;                                                               // 9
};                                                                                                                     // 10
                                                                                                                       // 11
var hasBasename = exports.hasBasename = function hasBasename(path, prefix) {                                           // 12
  return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);                                                   // 13
};                                                                                                                     // 14
                                                                                                                       // 15
var stripBasename = exports.stripBasename = function stripBasename(path, prefix) {                                     // 16
  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;                                                // 17
};                                                                                                                     // 18
                                                                                                                       // 19
var stripTrailingSlash = exports.stripTrailingSlash = function stripTrailingSlash(path) {                              // 20
  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;                                              // 21
};                                                                                                                     // 22
                                                                                                                       // 23
var parsePath = exports.parsePath = function parsePath(path) {                                                         // 24
  var pathname = path || '/';                                                                                          // 25
  var search = '';                                                                                                     // 26
  var hash = '';                                                                                                       // 27
                                                                                                                       // 28
  var hashIndex = pathname.indexOf('#');                                                                               // 29
  if (hashIndex !== -1) {                                                                                              // 30
    hash = pathname.substr(hashIndex);                                                                                 // 31
    pathname = pathname.substr(0, hashIndex);                                                                          // 32
  }                                                                                                                    // 33
                                                                                                                       // 34
  var searchIndex = pathname.indexOf('?');                                                                             // 35
  if (searchIndex !== -1) {                                                                                            // 36
    search = pathname.substr(searchIndex);                                                                             // 37
    pathname = pathname.substr(0, searchIndex);                                                                        // 38
  }                                                                                                                    // 39
                                                                                                                       // 40
  return {                                                                                                             // 41
    pathname: pathname,                                                                                                // 42
    search: search === '?' ? '' : search,                                                                              // 43
    hash: hash === '#' ? '' : hash                                                                                     // 44
  };                                                                                                                   // 45
};                                                                                                                     // 46
                                                                                                                       // 47
var createPath = exports.createPath = function createPath(location) {                                                  // 48
  var pathname = location.pathname,                                                                                    // 49
      search = location.search,                                                                                        // 50
      hash = location.hash;                                                                                            // 51
                                                                                                                       // 52
                                                                                                                       // 53
  var path = pathname || '/';                                                                                          // 54
                                                                                                                       // 55
  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;                              // 56
                                                                                                                       // 57
  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;                                        // 58
                                                                                                                       // 59
  return path;                                                                                                         // 60
};                                                                                                                     // 61
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createTransitionManager.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/history/createTransitionManager.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _warning = require('warning');                                                                                     // 5
                                                                                                                       // 6
var _warning2 = _interopRequireDefault(_warning);                                                                      // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
var createTransitionManager = function createTransitionManager() {                                                     // 11
  var prompt = null;                                                                                                   // 12
                                                                                                                       // 13
  var setPrompt = function setPrompt(nextPrompt) {                                                                     // 14
    (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time');                            // 15
                                                                                                                       // 16
    prompt = nextPrompt;                                                                                               // 17
                                                                                                                       // 18
    return function () {                                                                                               // 19
      if (prompt === nextPrompt) prompt = null;                                                                        // 20
    };                                                                                                                 // 21
  };                                                                                                                   // 22
                                                                                                                       // 23
  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {            // 24
    // TODO: If another transition starts while we're still confirming                                                 // 25
    // the previous one, we may end up in a weird state. Figure out the                                                // 26
    // best way to handle this.                                                                                        // 27
    if (prompt != null) {                                                                                              // 28
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;                                   // 29
                                                                                                                       // 30
      if (typeof result === 'string') {                                                                                // 31
        if (typeof getUserConfirmation === 'function') {                                                               // 32
          getUserConfirmation(result, callback);                                                                       // 33
        } else {                                                                                                       // 34
          (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message');
                                                                                                                       // 36
          callback(true);                                                                                              // 37
        }                                                                                                              // 38
      } else {                                                                                                         // 39
        // Return false from a transition hook to cancel the transition.                                               // 40
        callback(result !== false);                                                                                    // 41
      }                                                                                                                // 42
    } else {                                                                                                           // 43
      callback(true);                                                                                                  // 44
    }                                                                                                                  // 45
  };                                                                                                                   // 46
                                                                                                                       // 47
  var listeners = [];                                                                                                  // 48
                                                                                                                       // 49
  var appendListener = function appendListener(fn) {                                                                   // 50
    var isActive = true;                                                                                               // 51
                                                                                                                       // 52
    var listener = function listener() {                                                                               // 53
      if (isActive) fn.apply(undefined, arguments);                                                                    // 54
    };                                                                                                                 // 55
                                                                                                                       // 56
    listeners.push(listener);                                                                                          // 57
                                                                                                                       // 58
    return function () {                                                                                               // 59
      isActive = false;                                                                                                // 60
      listeners = listeners.filter(function (item) {                                                                   // 61
        return item !== listener;                                                                                      // 62
      });                                                                                                              // 63
    };                                                                                                                 // 64
  };                                                                                                                   // 65
                                                                                                                       // 66
  var notifyListeners = function notifyListeners() {                                                                   // 67
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             // 68
      args[_key] = arguments[_key];                                                                                    // 69
    }                                                                                                                  // 70
                                                                                                                       // 71
    listeners.forEach(function (listener) {                                                                            // 72
      return listener.apply(undefined, args);                                                                          // 73
    });                                                                                                                // 74
  };                                                                                                                   // 75
                                                                                                                       // 76
  return {                                                                                                             // 77
    setPrompt: setPrompt,                                                                                              // 78
    confirmTransitionTo: confirmTransitionTo,                                                                          // 79
    appendListener: appendListener,                                                                                    // 80
    notifyListeners: notifyListeners                                                                                   // 81
  };                                                                                                                   // 82
};                                                                                                                     // 83
                                                                                                                       // 84
exports.default = createTransitionManager;                                                                             // 85
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"DOMUtils.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/history/DOMUtils.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
                                                                                                                       // 5
var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {                   // 6
  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
};                                                                                                                     // 8
                                                                                                                       // 9
var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {          // 10
  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
};                                                                                                                     // 12
                                                                                                                       // 13
var getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {                          // 14
  return callback(window.confirm(message));                                                                            // 15
}; // eslint-disable-line no-alert                                                                                     // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.                                           // 19
 *                                                                                                                     // 20
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE                                                          // 21
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js                                       // 22
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586             // 23
 */                                                                                                                    // 24
var supportsHistory = exports.supportsHistory = function supportsHistory() {                                           // 25
  var ua = window.navigator.userAgent;                                                                                 // 26
                                                                                                                       // 27
  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
                                                                                                                       // 29
  return window.history && 'pushState' in window.history;                                                              // 30
};                                                                                                                     // 31
                                                                                                                       // 32
/**                                                                                                                    // 33
 * Returns true if browser fires popstate on hash change.                                                              // 34
 * IE10 and IE11 do not.                                                                                               // 35
 */                                                                                                                    // 36
var supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {    // 37
  return window.navigator.userAgent.indexOf('Trident') === -1;                                                         // 38
};                                                                                                                     // 39
                                                                                                                       // 40
/**                                                                                                                    // 41
 * Returns false if using go(n) with hash history causes a full page reload.                                           // 42
 */                                                                                                                    // 43
var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;                                                         // 45
};                                                                                                                     // 46
                                                                                                                       // 47
/**                                                                                                                    // 48
 * Returns true if a given popstate event is an extraneous WebKit event.                                               // 49
 * Accounts for the fact that Chrome on iOS fires real popstate events                                                 // 50
 * containing undefined state when pressing the back button.                                                           // 51
 */                                                                                                                    // 52
var isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {        // 53
  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;                                     // 54
};                                                                                                                     // 55
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createHashHistory.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/history/createHashHistory.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 6
var _warning = require('warning');                                                                                     // 7
                                                                                                                       // 8
var _warning2 = _interopRequireDefault(_warning);                                                                      // 9
                                                                                                                       // 10
var _invariant = require('invariant');                                                                                 // 11
                                                                                                                       // 12
var _invariant2 = _interopRequireDefault(_invariant);                                                                  // 13
                                                                                                                       // 14
var _LocationUtils = require('./LocationUtils');                                                                       // 15
                                                                                                                       // 16
var _PathUtils = require('./PathUtils');                                                                               // 17
                                                                                                                       // 18
var _createTransitionManager = require('./createTransitionManager');                                                   // 19
                                                                                                                       // 20
var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);                                      // 21
                                                                                                                       // 22
var _DOMUtils = require('./DOMUtils');                                                                                 // 23
                                                                                                                       // 24
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 25
                                                                                                                       // 26
var HashChangeEvent = 'hashchange';                                                                                    // 27
                                                                                                                       // 28
var HashPathCoders = {                                                                                                 // 29
  hashbang: {                                                                                                          // 30
    encodePath: function encodePath(path) {                                                                            // 31
      return path.charAt(0) === '!' ? path : '!/' + (0, _PathUtils.stripLeadingSlash)(path);                           // 32
    },                                                                                                                 // 33
    decodePath: function decodePath(path) {                                                                            // 34
      return path.charAt(0) === '!' ? path.substr(1) : path;                                                           // 35
    }                                                                                                                  // 36
  },                                                                                                                   // 37
  noslash: {                                                                                                           // 38
    encodePath: _PathUtils.stripLeadingSlash,                                                                          // 39
    decodePath: _PathUtils.addLeadingSlash                                                                             // 40
  },                                                                                                                   // 41
  slash: {                                                                                                             // 42
    encodePath: _PathUtils.addLeadingSlash,                                                                            // 43
    decodePath: _PathUtils.addLeadingSlash                                                                             // 44
  }                                                                                                                    // 45
};                                                                                                                     // 46
                                                                                                                       // 47
var getHashPath = function getHashPath() {                                                                             // 48
  // We can't use window.location.hash here because it's not                                                           // 49
  // consistent across browsers - Firefox will pre-decode it!                                                          // 50
  var href = window.location.href;                                                                                     // 51
  var hashIndex = href.indexOf('#');                                                                                   // 52
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);                                                        // 53
};                                                                                                                     // 54
                                                                                                                       // 55
var pushHashPath = function pushHashPath(path) {                                                                       // 56
  return window.location.hash = path;                                                                                  // 57
};                                                                                                                     // 58
                                                                                                                       // 59
var replaceHashPath = function replaceHashPath(path) {                                                                 // 60
  var hashIndex = window.location.href.indexOf('#');                                                                   // 61
                                                                                                                       // 62
  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);                 // 63
};                                                                                                                     // 64
                                                                                                                       // 65
var createHashHistory = function createHashHistory() {                                                                 // 66
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                                  // 67
                                                                                                                       // 68
  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Hash history needs a DOM');                                           // 69
                                                                                                                       // 70
  var globalHistory = window.history;                                                                                  // 71
  var canGoWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();                                          // 72
                                                                                                                       // 73
  var _props$getUserConfirm = props.getUserConfirmation,                                                               // 74
      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,   // 75
      _props$hashType = props.hashType,                                                                                // 76
      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;                                            // 77
                                                                                                                       // 78
  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';
                                                                                                                       // 80
  var _HashPathCoders$hashT = HashPathCoders[hashType],                                                                // 81
      encodePath = _HashPathCoders$hashT.encodePath,                                                                   // 82
      decodePath = _HashPathCoders$hashT.decodePath;                                                                   // 83
                                                                                                                       // 84
                                                                                                                       // 85
  var getDOMLocation = function getDOMLocation() {                                                                     // 86
    var path = decodePath(getHashPath());                                                                              // 87
                                                                                                                       // 88
    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
                                                                                                                       // 90
    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);                                                // 91
                                                                                                                       // 92
    return (0, _LocationUtils.createLocation)(path);                                                                   // 93
  };                                                                                                                   // 94
                                                                                                                       // 95
  var transitionManager = (0, _createTransitionManager2.default)();                                                    // 96
                                                                                                                       // 97
  var setState = function setState(nextState) {                                                                        // 98
    _extends(history, nextState);                                                                                      // 99
                                                                                                                       // 100
    history.length = globalHistory.length;                                                                             // 101
                                                                                                                       // 102
    transitionManager.notifyListeners(history.location, history.action);                                               // 103
  };                                                                                                                   // 104
                                                                                                                       // 105
  var forceNextPop = false;                                                                                            // 106
  var ignorePath = null;                                                                                               // 107
                                                                                                                       // 108
  var handleHashChange = function handleHashChange() {                                                                 // 109
    var path = getHashPath();                                                                                          // 110
    var encodedPath = encodePath(path);                                                                                // 111
                                                                                                                       // 112
    if (path !== encodedPath) {                                                                                        // 113
      // Ensure we always have a properly-encoded hash.                                                                // 114
      replaceHashPath(encodedPath);                                                                                    // 115
    } else {                                                                                                           // 116
      var location = getDOMLocation();                                                                                 // 117
      var prevLocation = history.location;                                                                             // 118
                                                                                                                       // 119
      if (!forceNextPop && (0, _LocationUtils.locationsAreEqual)(prevLocation, location)) return; // A hashchange doesn't always == location change.
                                                                                                                       // 121
      if (ignorePath === (0, _PathUtils.createPath)(location)) return; // Ignore this change; we already setState in push/replace.
                                                                                                                       // 123
      ignorePath = null;                                                                                               // 124
                                                                                                                       // 125
      handlePop(location);                                                                                             // 126
    }                                                                                                                  // 127
  };                                                                                                                   // 128
                                                                                                                       // 129
  var handlePop = function handlePop(location) {                                                                       // 130
    if (forceNextPop) {                                                                                                // 131
      forceNextPop = false;                                                                                            // 132
      setState();                                                                                                      // 133
    } else {                                                                                                           // 134
      var action = 'POP';                                                                                              // 135
                                                                                                                       // 136
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {                     // 137
        if (ok) {                                                                                                      // 138
          setState({ action: action, location: location });                                                            // 139
        } else {                                                                                                       // 140
          revertPop(location);                                                                                         // 141
        }                                                                                                              // 142
      });                                                                                                              // 143
    }                                                                                                                  // 144
  };                                                                                                                   // 145
                                                                                                                       // 146
  var revertPop = function revertPop(fromLocation) {                                                                   // 147
    var toLocation = history.location;                                                                                 // 148
                                                                                                                       // 149
    // TODO: We could probably make this more reliable by                                                              // 150
    // keeping a list of paths we've seen in sessionStorage.                                                           // 151
    // Instead, we just default to 0 for paths we don't know.                                                          // 152
                                                                                                                       // 153
    var toIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(toLocation));                                        // 154
                                                                                                                       // 155
    if (toIndex === -1) toIndex = 0;                                                                                   // 156
                                                                                                                       // 157
    var fromIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(fromLocation));                                    // 158
                                                                                                                       // 159
    if (fromIndex === -1) fromIndex = 0;                                                                               // 160
                                                                                                                       // 161
    var delta = toIndex - fromIndex;                                                                                   // 162
                                                                                                                       // 163
    if (delta) {                                                                                                       // 164
      forceNextPop = true;                                                                                             // 165
      go(delta);                                                                                                       // 166
    }                                                                                                                  // 167
  };                                                                                                                   // 168
                                                                                                                       // 169
  // Ensure the hash is encoded properly before doing anything else.                                                   // 170
  var path = getHashPath();                                                                                            // 171
  var encodedPath = encodePath(path);                                                                                  // 172
                                                                                                                       // 173
  if (path !== encodedPath) replaceHashPath(encodedPath);                                                              // 174
                                                                                                                       // 175
  var initialLocation = getDOMLocation();                                                                              // 176
  var allPaths = [(0, _PathUtils.createPath)(initialLocation)];                                                        // 177
                                                                                                                       // 178
  // Public interface                                                                                                  // 179
                                                                                                                       // 180
  var createHref = function createHref(location) {                                                                     // 181
    return '#' + encodePath(basename + (0, _PathUtils.createPath)(location));                                          // 182
  };                                                                                                                   // 183
                                                                                                                       // 184
  var push = function push(path, state) {                                                                              // 185
    (0, _warning2.default)(state === undefined, 'Hash history cannot push state; it is ignored');                      // 186
                                                                                                                       // 187
    var action = 'PUSH';                                                                                               // 188
    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);                   // 189
                                                                                                                       // 190
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {                       // 191
      if (!ok) return;                                                                                                 // 192
                                                                                                                       // 193
      var path = (0, _PathUtils.createPath)(location);                                                                 // 194
      var encodedPath = encodePath(basename + path);                                                                   // 195
      var hashChanged = getHashPath() !== encodedPath;                                                                 // 196
                                                                                                                       // 197
      if (hashChanged) {                                                                                               // 198
        // We cannot tell if a hashchange was caused by a PUSH, so we'd                                                // 199
        // rather setState here and ignore the hashchange. The caveat here                                             // 200
        // is that other hash histories in the page will consider it a POP.                                            // 201
        ignorePath = path;                                                                                             // 202
        pushHashPath(encodedPath);                                                                                     // 203
                                                                                                                       // 204
        var prevIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(history.location));                            // 205
        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);                                       // 206
                                                                                                                       // 207
        nextPaths.push(path);                                                                                          // 208
        allPaths = nextPaths;                                                                                          // 209
                                                                                                                       // 210
        setState({ action: action, location: location });                                                              // 211
      } else {                                                                                                         // 212
        (0, _warning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');
                                                                                                                       // 214
        setState();                                                                                                    // 215
      }                                                                                                                // 216
    });                                                                                                                // 217
  };                                                                                                                   // 218
                                                                                                                       // 219
  var replace = function replace(path, state) {                                                                        // 220
    (0, _warning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored');                   // 221
                                                                                                                       // 222
    var action = 'REPLACE';                                                                                            // 223
    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);                   // 224
                                                                                                                       // 225
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {                       // 226
      if (!ok) return;                                                                                                 // 227
                                                                                                                       // 228
      var path = (0, _PathUtils.createPath)(location);                                                                 // 229
      var encodedPath = encodePath(basename + path);                                                                   // 230
      var hashChanged = getHashPath() !== encodedPath;                                                                 // 231
                                                                                                                       // 232
      if (hashChanged) {                                                                                               // 233
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd                                             // 234
        // rather setState here and ignore the hashchange. The caveat here                                             // 235
        // is that other hash histories in the page will consider it a POP.                                            // 236
        ignorePath = path;                                                                                             // 237
        replaceHashPath(encodedPath);                                                                                  // 238
      }                                                                                                                // 239
                                                                                                                       // 240
      var prevIndex = allPaths.indexOf((0, _PathUtils.createPath)(history.location));                                  // 241
                                                                                                                       // 242
      if (prevIndex !== -1) allPaths[prevIndex] = path;                                                                // 243
                                                                                                                       // 244
      setState({ action: action, location: location });                                                                // 245
    });                                                                                                                // 246
  };                                                                                                                   // 247
                                                                                                                       // 248
  var go = function go(n) {                                                                                            // 249
    (0, _warning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');        // 250
                                                                                                                       // 251
    globalHistory.go(n);                                                                                               // 252
  };                                                                                                                   // 253
                                                                                                                       // 254
  var goBack = function goBack() {                                                                                     // 255
    return go(-1);                                                                                                     // 256
  };                                                                                                                   // 257
                                                                                                                       // 258
  var goForward = function goForward() {                                                                               // 259
    return go(1);                                                                                                      // 260
  };                                                                                                                   // 261
                                                                                                                       // 262
  var listenerCount = 0;                                                                                               // 263
                                                                                                                       // 264
  var checkDOMListeners = function checkDOMListeners(delta) {                                                          // 265
    listenerCount += delta;                                                                                            // 266
                                                                                                                       // 267
    if (listenerCount === 1) {                                                                                         // 268
      (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);                                      // 269
    } else if (listenerCount === 0) {                                                                                  // 270
      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);                                   // 271
    }                                                                                                                  // 272
  };                                                                                                                   // 273
                                                                                                                       // 274
  var isBlocked = false;                                                                                               // 275
                                                                                                                       // 276
  var block = function block() {                                                                                       // 277
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;                            // 278
                                                                                                                       // 279
    var unblock = transitionManager.setPrompt(prompt);                                                                 // 280
                                                                                                                       // 281
    if (!isBlocked) {                                                                                                  // 282
      checkDOMListeners(1);                                                                                            // 283
      isBlocked = true;                                                                                                // 284
    }                                                                                                                  // 285
                                                                                                                       // 286
    return function () {                                                                                               // 287
      if (isBlocked) {                                                                                                 // 288
        isBlocked = false;                                                                                             // 289
        checkDOMListeners(-1);                                                                                         // 290
      }                                                                                                                // 291
                                                                                                                       // 292
      return unblock();                                                                                                // 293
    };                                                                                                                 // 294
  };                                                                                                                   // 295
                                                                                                                       // 296
  var listen = function listen(listener) {                                                                             // 297
    var unlisten = transitionManager.appendListener(listener);                                                         // 298
    checkDOMListeners(1);                                                                                              // 299
                                                                                                                       // 300
    return function () {                                                                                               // 301
      checkDOMListeners(-1);                                                                                           // 302
      unlisten();                                                                                                      // 303
    };                                                                                                                 // 304
  };                                                                                                                   // 305
                                                                                                                       // 306
  var history = {                                                                                                      // 307
    length: globalHistory.length,                                                                                      // 308
    action: 'POP',                                                                                                     // 309
    location: initialLocation,                                                                                         // 310
    createHref: createHref,                                                                                            // 311
    push: push,                                                                                                        // 312
    replace: replace,                                                                                                  // 313
    go: go,                                                                                                            // 314
    goBack: goBack,                                                                                                    // 315
    goForward: goForward,                                                                                              // 316
    block: block,                                                                                                      // 317
    listen: listen                                                                                                     // 318
  };                                                                                                                   // 319
                                                                                                                       // 320
  return history;                                                                                                      // 321
};                                                                                                                     // 322
                                                                                                                       // 323
exports.default = createHashHistory;                                                                                   // 324
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createMemoryHistory.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/history/createMemoryHistory.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
                                                                                                                       // 6
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 8
var _warning = require('warning');                                                                                     // 9
                                                                                                                       // 10
var _warning2 = _interopRequireDefault(_warning);                                                                      // 11
                                                                                                                       // 12
var _PathUtils = require('./PathUtils');                                                                               // 13
                                                                                                                       // 14
var _LocationUtils = require('./LocationUtils');                                                                       // 15
                                                                                                                       // 16
var _createTransitionManager = require('./createTransitionManager');                                                   // 17
                                                                                                                       // 18
var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);                                      // 19
                                                                                                                       // 20
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 21
                                                                                                                       // 22
var clamp = function clamp(n, lowerBound, upperBound) {                                                                // 23
  return Math.min(Math.max(n, lowerBound), upperBound);                                                                // 24
};                                                                                                                     // 25
                                                                                                                       // 26
/**                                                                                                                    // 27
 * Creates a history object that stores locations in memory.                                                           // 28
 */                                                                                                                    // 29
var createMemoryHistory = function createMemoryHistory() {                                                             // 30
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                                  // 31
  var getUserConfirmation = props.getUserConfirmation,                                                                 // 32
      _props$initialEntries = props.initialEntries,                                                                    // 33
      initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries,                            // 34
      _props$initialIndex = props.initialIndex,                                                                        // 35
      initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex,                                      // 36
      _props$keyLength = props.keyLength,                                                                              // 37
      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;                                               // 38
                                                                                                                       // 39
                                                                                                                       // 40
  var transitionManager = (0, _createTransitionManager2.default)();                                                    // 41
                                                                                                                       // 42
  var setState = function setState(nextState) {                                                                        // 43
    _extends(history, nextState);                                                                                      // 44
                                                                                                                       // 45
    history.length = history.entries.length;                                                                           // 46
                                                                                                                       // 47
    transitionManager.notifyListeners(history.location, history.action);                                               // 48
  };                                                                                                                   // 49
                                                                                                                       // 50
  var createKey = function createKey() {                                                                               // 51
    return Math.random().toString(36).substr(2, keyLength);                                                            // 52
  };                                                                                                                   // 53
                                                                                                                       // 54
  var index = clamp(initialIndex, 0, initialEntries.length - 1);                                                       // 55
  var entries = initialEntries.map(function (entry) {                                                                  // 56
    return typeof entry === 'string' ? (0, _LocationUtils.createLocation)(entry, undefined, createKey()) : (0, _LocationUtils.createLocation)(entry, undefined, entry.key || createKey());
  });                                                                                                                  // 58
                                                                                                                       // 59
  // Public interface                                                                                                  // 60
                                                                                                                       // 61
  var createHref = _PathUtils.createPath;                                                                              // 62
                                                                                                                       // 63
  var push = function push(path, state) {                                                                              // 64
    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
                                                                                                                       // 66
    var action = 'PUSH';                                                                                               // 67
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);                     // 68
                                                                                                                       // 69
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {                       // 70
      if (!ok) return;                                                                                                 // 71
                                                                                                                       // 72
      var prevIndex = history.index;                                                                                   // 73
      var nextIndex = prevIndex + 1;                                                                                   // 74
                                                                                                                       // 75
      var nextEntries = history.entries.slice(0);                                                                      // 76
      if (nextEntries.length > nextIndex) {                                                                            // 77
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);                                       // 78
      } else {                                                                                                         // 79
        nextEntries.push(location);                                                                                    // 80
      }                                                                                                                // 81
                                                                                                                       // 82
      setState({                                                                                                       // 83
        action: action,                                                                                                // 84
        location: location,                                                                                            // 85
        index: nextIndex,                                                                                              // 86
        entries: nextEntries                                                                                           // 87
      });                                                                                                              // 88
    });                                                                                                                // 89
  };                                                                                                                   // 90
                                                                                                                       // 91
  var replace = function replace(path, state) {                                                                        // 92
    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
                                                                                                                       // 94
    var action = 'REPLACE';                                                                                            // 95
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);                     // 96
                                                                                                                       // 97
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {                       // 98
      if (!ok) return;                                                                                                 // 99
                                                                                                                       // 100
      history.entries[history.index] = location;                                                                       // 101
                                                                                                                       // 102
      setState({ action: action, location: location });                                                                // 103
    });                                                                                                                // 104
  };                                                                                                                   // 105
                                                                                                                       // 106
  var go = function go(n) {                                                                                            // 107
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);                                           // 108
                                                                                                                       // 109
    var action = 'POP';                                                                                                // 110
    var location = history.entries[nextIndex];                                                                         // 111
                                                                                                                       // 112
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {                       // 113
      if (ok) {                                                                                                        // 114
        setState({                                                                                                     // 115
          action: action,                                                                                              // 116
          location: location,                                                                                          // 117
          index: nextIndex                                                                                             // 118
        });                                                                                                            // 119
      } else {                                                                                                         // 120
        // Mimic the behavior of DOM histories by                                                                      // 121
        // causing a render after a cancelled POP.                                                                     // 122
        setState();                                                                                                    // 123
      }                                                                                                                // 124
    });                                                                                                                // 125
  };                                                                                                                   // 126
                                                                                                                       // 127
  var goBack = function goBack() {                                                                                     // 128
    return go(-1);                                                                                                     // 129
  };                                                                                                                   // 130
                                                                                                                       // 131
  var goForward = function goForward() {                                                                               // 132
    return go(1);                                                                                                      // 133
  };                                                                                                                   // 134
                                                                                                                       // 135
  var canGo = function canGo(n) {                                                                                      // 136
    var nextIndex = history.index + n;                                                                                 // 137
    return nextIndex >= 0 && nextIndex < history.entries.length;                                                       // 138
  };                                                                                                                   // 139
                                                                                                                       // 140
  var block = function block() {                                                                                       // 141
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;                            // 142
    return transitionManager.setPrompt(prompt);                                                                        // 143
  };                                                                                                                   // 144
                                                                                                                       // 145
  var listen = function listen(listener) {                                                                             // 146
    return transitionManager.appendListener(listener);                                                                 // 147
  };                                                                                                                   // 148
                                                                                                                       // 149
  var history = {                                                                                                      // 150
    length: entries.length,                                                                                            // 151
    action: 'POP',                                                                                                     // 152
    location: entries[index],                                                                                          // 153
    index: index,                                                                                                      // 154
    entries: entries,                                                                                                  // 155
    createHref: createHref,                                                                                            // 156
    push: push,                                                                                                        // 157
    replace: replace,                                                                                                  // 158
    go: go,                                                                                                            // 159
    goBack: goBack,                                                                                                    // 160
    goForward: goForward,                                                                                              // 161
    canGo: canGo,                                                                                                      // 162
    block: block,                                                                                                      // 163
    listen: listen                                                                                                     // 164
  };                                                                                                                   // 165
                                                                                                                       // 166
  return history;                                                                                                      // 167
};                                                                                                                     // 168
                                                                                                                       // 169
exports.default = createMemoryHistory;                                                                                 // 170
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/history/package.json                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "history";                                                                                              // 1
exports.version = "4.7.2";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/history/index.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.createPath = exports.parsePath = exports.locationsAreEqual = exports.createLocation = exports.createMemoryHistory = exports.createHashHistory = exports.createBrowserHistory = undefined;
                                                                                                                       // 5
var _LocationUtils = require('./LocationUtils');                                                                       // 6
                                                                                                                       // 7
Object.defineProperty(exports, 'createLocation', {                                                                     // 8
  enumerable: true,                                                                                                    // 9
  get: function get() {                                                                                                // 10
    return _LocationUtils.createLocation;                                                                              // 11
  }                                                                                                                    // 12
});                                                                                                                    // 13
Object.defineProperty(exports, 'locationsAreEqual', {                                                                  // 14
  enumerable: true,                                                                                                    // 15
  get: function get() {                                                                                                // 16
    return _LocationUtils.locationsAreEqual;                                                                           // 17
  }                                                                                                                    // 18
});                                                                                                                    // 19
                                                                                                                       // 20
var _PathUtils = require('./PathUtils');                                                                               // 21
                                                                                                                       // 22
Object.defineProperty(exports, 'parsePath', {                                                                          // 23
  enumerable: true,                                                                                                    // 24
  get: function get() {                                                                                                // 25
    return _PathUtils.parsePath;                                                                                       // 26
  }                                                                                                                    // 27
});                                                                                                                    // 28
Object.defineProperty(exports, 'createPath', {                                                                         // 29
  enumerable: true,                                                                                                    // 30
  get: function get() {                                                                                                // 31
    return _PathUtils.createPath;                                                                                      // 32
  }                                                                                                                    // 33
});                                                                                                                    // 34
                                                                                                                       // 35
var _createBrowserHistory2 = require('./createBrowserHistory');                                                        // 36
                                                                                                                       // 37
var _createBrowserHistory3 = _interopRequireDefault(_createBrowserHistory2);                                           // 38
                                                                                                                       // 39
var _createHashHistory2 = require('./createHashHistory');                                                              // 40
                                                                                                                       // 41
var _createHashHistory3 = _interopRequireDefault(_createHashHistory2);                                                 // 42
                                                                                                                       // 43
var _createMemoryHistory2 = require('./createMemoryHistory');                                                          // 44
                                                                                                                       // 45
var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);                                             // 46
                                                                                                                       // 47
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 48
                                                                                                                       // 49
exports.createBrowserHistory = _createBrowserHistory3.default;                                                         // 50
exports.createHashHistory = _createHashHistory3.default;                                                               // 51
exports.createMemoryHistory = _createMemoryHistory3.default;                                                           // 52
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"invariant":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/invariant/package.json                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "invariant";                                                                                            // 1
exports.version = "2.2.2";                                                                                             // 2
exports.browser = "browser.js";                                                                                        // 3
exports.main = "invariant.js";                                                                                         // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"browser.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/invariant/browser.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2013-2015, Facebook, Inc.                                                                                 // 2
 * All rights reserved.                                                                                                // 3
 *                                                                                                                     // 4
 * This source code is licensed under the BSD-style license found in the                                               // 5
 * LICENSE file in the root directory of this source tree. An additional grant                                         // 6
 * of patent rights can be found in the PATENTS file in the same directory.                                            // 7
 */                                                                                                                    // 8
                                                                                                                       // 9
'use strict';                                                                                                          // 10
                                                                                                                       // 11
/**                                                                                                                    // 12
 * Use invariant() to assert state which your program assumes to be true.                                              // 13
 *                                                                                                                     // 14
 * Provide sprintf-style format (only %s is supported) and arguments                                                   // 15
 * to provide information about what broke and what you were                                                           // 16
 * expecting.                                                                                                          // 17
 *                                                                                                                     // 18
 * The invariant message will be stripped in production, but the invariant                                             // 19
 * will remain to ensure logic does not differ in production.                                                          // 20
 */                                                                                                                    // 21
                                                                                                                       // 22
var invariant = function(condition, format, a, b, c, d, e, f) {                                                        // 23
  if (process.env.NODE_ENV !== 'production') {                                                                         // 24
    if (format === undefined) {                                                                                        // 25
      throw new Error('invariant requires an error message argument');                                                 // 26
    }                                                                                                                  // 27
  }                                                                                                                    // 28
                                                                                                                       // 29
  if (!condition) {                                                                                                    // 30
    var error;                                                                                                         // 31
    if (format === undefined) {                                                                                        // 32
      error = new Error(                                                                                               // 33
        'Minified exception occurred; use the non-minified dev environment ' +                                         // 34
        'for the full error message and additional helpful warnings.'                                                  // 35
      );                                                                                                               // 36
    } else {                                                                                                           // 37
      var args = [a, b, c, d, e, f];                                                                                   // 38
      var argIndex = 0;                                                                                                // 39
      error = new Error(                                                                                               // 40
        format.replace(/%s/g, function() { return args[argIndex++]; })                                                 // 41
      );                                                                                                               // 42
      error.name = 'Invariant Violation';                                                                              // 43
    }                                                                                                                  // 44
                                                                                                                       // 45
    error.framesToPop = 1; // we don't care about invariant's own frame                                                // 46
    throw error;                                                                                                       // 47
  }                                                                                                                    // 48
};                                                                                                                     // 49
                                                                                                                       // 50
module.exports = invariant;                                                                                            // 51
                                                                                                                       // 52
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"resolve-pathname":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/resolve-pathname/package.json                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "resolve-pathname";                                                                                     // 1
exports.version = "2.2.0";                                                                                             // 2
exports.main = "cjs/index.js";                                                                                         // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cjs":{"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/resolve-pathname/cjs/index.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
function isAbsolute(pathname) {                                                                                        // 4
  return pathname.charAt(0) === '/';                                                                                   // 5
}                                                                                                                      // 6
                                                                                                                       // 7
// About 1.5x faster than the two-arg version of Array#splice()                                                        // 8
function spliceOne(list, index) {                                                                                      // 9
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {                                             // 10
    list[i] = list[k];                                                                                                 // 11
  }                                                                                                                    // 12
                                                                                                                       // 13
  list.pop();                                                                                                          // 14
}                                                                                                                      // 15
                                                                                                                       // 16
// This implementation is based heavily on node's url.parse                                                            // 17
function resolvePathname(to) {                                                                                         // 18
  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';                                   // 19
                                                                                                                       // 20
  var toParts = to && to.split('/') || [];                                                                             // 21
  var fromParts = from && from.split('/') || [];                                                                       // 22
                                                                                                                       // 23
  var isToAbs = to && isAbsolute(to);                                                                                  // 24
  var isFromAbs = from && isAbsolute(from);                                                                            // 25
  var mustEndAbs = isToAbs || isFromAbs;                                                                               // 26
                                                                                                                       // 27
  if (to && isAbsolute(to)) {                                                                                          // 28
    // to is absolute                                                                                                  // 29
    fromParts = toParts;                                                                                               // 30
  } else if (toParts.length) {                                                                                         // 31
    // to is relative, drop the filename                                                                               // 32
    fromParts.pop();                                                                                                   // 33
    fromParts = fromParts.concat(toParts);                                                                             // 34
  }                                                                                                                    // 35
                                                                                                                       // 36
  if (!fromParts.length) return '/';                                                                                   // 37
                                                                                                                       // 38
  var hasTrailingSlash = void 0;                                                                                       // 39
  if (fromParts.length) {                                                                                              // 40
    var last = fromParts[fromParts.length - 1];                                                                        // 41
    hasTrailingSlash = last === '.' || last === '..' || last === '';                                                   // 42
  } else {                                                                                                             // 43
    hasTrailingSlash = false;                                                                                          // 44
  }                                                                                                                    // 45
                                                                                                                       // 46
  var up = 0;                                                                                                          // 47
  for (var i = fromParts.length; i >= 0; i--) {                                                                        // 48
    var part = fromParts[i];                                                                                           // 49
                                                                                                                       // 50
    if (part === '.') {                                                                                                // 51
      spliceOne(fromParts, i);                                                                                         // 52
    } else if (part === '..') {                                                                                        // 53
      spliceOne(fromParts, i);                                                                                         // 54
      up++;                                                                                                            // 55
    } else if (up) {                                                                                                   // 56
      spliceOne(fromParts, i);                                                                                         // 57
      up--;                                                                                                            // 58
    }                                                                                                                  // 59
  }                                                                                                                    // 60
                                                                                                                       // 61
  if (!mustEndAbs) for (; up--; up) {                                                                                  // 62
    fromParts.unshift('..');                                                                                           // 63
  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');       // 64
                                                                                                                       // 65
  var result = fromParts.join('/');                                                                                    // 66
                                                                                                                       // 67
  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';                                                    // 68
                                                                                                                       // 69
  return result;                                                                                                       // 70
}                                                                                                                      // 71
                                                                                                                       // 72
exports.default = resolvePathname;                                                                                     // 73
module.exports = exports['default'];                                                                                   // 74
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"value-equal":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/value-equal/package.json                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "value-equal";                                                                                          // 1
exports.version = "0.4.0";                                                                                             // 2
exports.main = "cjs/index.js";                                                                                         // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cjs":{"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/value-equal/cjs/index.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
                                                                                                                       // 6
function valueEqual(a, b) {                                                                                            // 7
  if (a === b) return true;                                                                                            // 8
                                                                                                                       // 9
  if (a == null || b == null) return false;                                                                            // 10
                                                                                                                       // 11
  if (Array.isArray(a)) {                                                                                              // 12
    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {                               // 13
      return valueEqual(item, b[index]);                                                                               // 14
    });                                                                                                                // 15
  }                                                                                                                    // 16
                                                                                                                       // 17
  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);                                                     // 18
  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);                                                     // 19
                                                                                                                       // 20
  if (aType !== bType) return false;                                                                                   // 21
                                                                                                                       // 22
  if (aType === 'object') {                                                                                            // 23
    var aValue = a.valueOf();                                                                                          // 24
    var bValue = b.valueOf();                                                                                          // 25
                                                                                                                       // 26
    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);                                               // 27
                                                                                                                       // 28
    var aKeys = Object.keys(a);                                                                                        // 29
    var bKeys = Object.keys(b);                                                                                        // 30
                                                                                                                       // 31
    if (aKeys.length !== bKeys.length) return false;                                                                   // 32
                                                                                                                       // 33
    return aKeys.every(function (key) {                                                                                // 34
      return valueEqual(a[key], b[key]);                                                                               // 35
    });                                                                                                                // 36
  }                                                                                                                    // 37
                                                                                                                       // 38
  return false;                                                                                                        // 39
}                                                                                                                      // 40
                                                                                                                       // 41
exports.default = valueEqual;                                                                                          // 42
module.exports = exports['default'];                                                                                   // 43
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"react-router":{"Router.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router/Router.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 6
var _warning = require('warning');                                                                                     // 7
                                                                                                                       // 8
var _warning2 = _interopRequireDefault(_warning);                                                                      // 9
                                                                                                                       // 10
var _invariant = require('invariant');                                                                                 // 11
                                                                                                                       // 12
var _invariant2 = _interopRequireDefault(_invariant);                                                                  // 13
                                                                                                                       // 14
var _react = require('react');                                                                                         // 15
                                                                                                                       // 16
var _react2 = _interopRequireDefault(_react);                                                                          // 17
                                                                                                                       // 18
var _propTypes = require('prop-types');                                                                                // 19
                                                                                                                       // 20
var _propTypes2 = _interopRequireDefault(_propTypes);                                                                  // 21
                                                                                                                       // 22
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 23
                                                                                                                       // 24
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 26
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
                                                                                                                       // 28
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
                                                                                                                       // 30
/**                                                                                                                    // 31
 * The public API for putting history on context.                                                                      // 32
 */                                                                                                                    // 33
var Router = function (_React$Component) {                                                                             // 34
  _inherits(Router, _React$Component);                                                                                 // 35
                                                                                                                       // 36
  function Router() {                                                                                                  // 37
    var _temp, _this, _ret;                                                                                            // 38
                                                                                                                       // 39
    _classCallCheck(this, Router);                                                                                     // 40
                                                                                                                       // 41
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             // 42
      args[_key] = arguments[_key];                                                                                    // 43
    }                                                                                                                  // 44
                                                                                                                       // 45
    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      match: _this.computeMatch(_this.props.history.location.pathname)                                                 // 47
    }, _temp), _possibleConstructorReturn(_this, _ret);                                                                // 48
  }                                                                                                                    // 49
                                                                                                                       // 50
  Router.prototype.getChildContext = function getChildContext() {                                                      // 51
    return {                                                                                                           // 52
      router: _extends({}, this.context.router, {                                                                      // 53
        history: this.props.history,                                                                                   // 54
        route: {                                                                                                       // 55
          location: this.props.history.location,                                                                       // 56
          match: this.state.match                                                                                      // 57
        }                                                                                                              // 58
      })                                                                                                               // 59
    };                                                                                                                 // 60
  };                                                                                                                   // 61
                                                                                                                       // 62
  Router.prototype.computeMatch = function computeMatch(pathname) {                                                    // 63
    return {                                                                                                           // 64
      path: '/',                                                                                                       // 65
      url: '/',                                                                                                        // 66
      params: {},                                                                                                      // 67
      isExact: pathname === '/'                                                                                        // 68
    };                                                                                                                 // 69
  };                                                                                                                   // 70
                                                                                                                       // 71
  Router.prototype.componentWillMount = function componentWillMount() {                                                // 72
    var _this2 = this;                                                                                                 // 73
                                                                                                                       // 74
    var _props = this.props,                                                                                           // 75
        children = _props.children,                                                                                    // 76
        history = _props.history;                                                                                      // 77
                                                                                                                       // 78
                                                                                                                       // 79
    (0, _invariant2.default)(children == null || _react2.default.Children.count(children) === 1, 'A <Router> may have only one child element');
                                                                                                                       // 81
    // Do this here so we can setState when a <Redirect> changes the                                                   // 82
    // location in componentWillMount. This happens e.g. when doing                                                    // 83
    // server rendering using a <StaticRouter>.                                                                        // 84
    this.unlisten = history.listen(function () {                                                                       // 85
      _this2.setState({                                                                                                // 86
        match: _this2.computeMatch(history.location.pathname)                                                          // 87
      });                                                                                                              // 88
    });                                                                                                                // 89
  };                                                                                                                   // 90
                                                                                                                       // 91
  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {                         // 92
    (0, _warning2.default)(this.props.history === nextProps.history, 'You cannot change <Router history>');            // 93
  };                                                                                                                   // 94
                                                                                                                       // 95
  Router.prototype.componentWillUnmount = function componentWillUnmount() {                                            // 96
    this.unlisten();                                                                                                   // 97
  };                                                                                                                   // 98
                                                                                                                       // 99
  Router.prototype.render = function render() {                                                                        // 100
    var children = this.props.children;                                                                                // 101
                                                                                                                       // 102
    return children ? _react2.default.Children.only(children) : null;                                                  // 103
  };                                                                                                                   // 104
                                                                                                                       // 105
  return Router;                                                                                                       // 106
}(_react2.default.Component);                                                                                          // 107
                                                                                                                       // 108
Router.propTypes = {                                                                                                   // 109
  history: _propTypes2.default.object.isRequired,                                                                      // 110
  children: _propTypes2.default.node                                                                                   // 111
};                                                                                                                     // 112
Router.contextTypes = {                                                                                                // 113
  router: _propTypes2.default.object                                                                                   // 114
};                                                                                                                     // 115
Router.childContextTypes = {                                                                                           // 116
  router: _propTypes2.default.object.isRequired                                                                        // 117
};                                                                                                                     // 118
exports.default = Router;                                                                                              // 119
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"MemoryRouter.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router/MemoryRouter.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _warning = require('warning');                                                                                     // 5
                                                                                                                       // 6
var _warning2 = _interopRequireDefault(_warning);                                                                      // 7
                                                                                                                       // 8
var _react = require('react');                                                                                         // 9
                                                                                                                       // 10
var _react2 = _interopRequireDefault(_react);                                                                          // 11
                                                                                                                       // 12
var _propTypes = require('prop-types');                                                                                // 13
                                                                                                                       // 14
var _propTypes2 = _interopRequireDefault(_propTypes);                                                                  // 15
                                                                                                                       // 16
var _createMemoryHistory = require('history/createMemoryHistory');                                                     // 17
                                                                                                                       // 18
var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);                                              // 19
                                                                                                                       // 20
var _Router = require('./Router');                                                                                     // 21
                                                                                                                       // 22
var _Router2 = _interopRequireDefault(_Router);                                                                        // 23
                                                                                                                       // 24
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 25
                                                                                                                       // 26
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 28
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
                                                                                                                       // 30
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
                                                                                                                       // 32
/**                                                                                                                    // 33
 * The public API for a <Router> that stores location in memory.                                                       // 34
 */                                                                                                                    // 35
var MemoryRouter = function (_React$Component) {                                                                       // 36
  _inherits(MemoryRouter, _React$Component);                                                                           // 37
                                                                                                                       // 38
  function MemoryRouter() {                                                                                            // 39
    var _temp, _this, _ret;                                                                                            // 40
                                                                                                                       // 41
    _classCallCheck(this, MemoryRouter);                                                                               // 42
                                                                                                                       // 43
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             // 44
      args[_key] = arguments[_key];                                                                                    // 45
    }                                                                                                                  // 46
                                                                                                                       // 47
    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _createMemoryHistory2.default)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }                                                                                                                    // 49
                                                                                                                       // 50
  MemoryRouter.prototype.componentWillMount = function componentWillMount() {                                          // 51
    (0, _warning2.default)(!this.props.history, '<MemoryRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { MemoryRouter as Router }`.');
  };                                                                                                                   // 53
                                                                                                                       // 54
  MemoryRouter.prototype.render = function render() {                                                                  // 55
    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });  // 56
  };                                                                                                                   // 57
                                                                                                                       // 58
  return MemoryRouter;                                                                                                 // 59
}(_react2.default.Component);                                                                                          // 60
                                                                                                                       // 61
MemoryRouter.propTypes = {                                                                                             // 62
  initialEntries: _propTypes2.default.array,                                                                           // 63
  initialIndex: _propTypes2.default.number,                                                                            // 64
  getUserConfirmation: _propTypes2.default.func,                                                                       // 65
  keyLength: _propTypes2.default.number,                                                                               // 66
  children: _propTypes2.default.node                                                                                   // 67
};                                                                                                                     // 68
exports.default = MemoryRouter;                                                                                        // 69
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Route.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router/Route.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 6
var _warning = require('warning');                                                                                     // 7
                                                                                                                       // 8
var _warning2 = _interopRequireDefault(_warning);                                                                      // 9
                                                                                                                       // 10
var _invariant = require('invariant');                                                                                 // 11
                                                                                                                       // 12
var _invariant2 = _interopRequireDefault(_invariant);                                                                  // 13
                                                                                                                       // 14
var _react = require('react');                                                                                         // 15
                                                                                                                       // 16
var _react2 = _interopRequireDefault(_react);                                                                          // 17
                                                                                                                       // 18
var _propTypes = require('prop-types');                                                                                // 19
                                                                                                                       // 20
var _propTypes2 = _interopRequireDefault(_propTypes);                                                                  // 21
                                                                                                                       // 22
var _matchPath = require('./matchPath');                                                                               // 23
                                                                                                                       // 24
var _matchPath2 = _interopRequireDefault(_matchPath);                                                                  // 25
                                                                                                                       // 26
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 27
                                                                                                                       // 28
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 30
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
                                                                                                                       // 32
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
                                                                                                                       // 34
var isEmptyChildren = function isEmptyChildren(children) {                                                             // 35
  return _react2.default.Children.count(children) === 0;                                                               // 36
};                                                                                                                     // 37
                                                                                                                       // 38
/**                                                                                                                    // 39
 * The public API for matching a single path and rendering.                                                            // 40
 */                                                                                                                    // 41
                                                                                                                       // 42
var Route = function (_React$Component) {                                                                              // 43
  _inherits(Route, _React$Component);                                                                                  // 44
                                                                                                                       // 45
  function Route() {                                                                                                   // 46
    var _temp, _this, _ret;                                                                                            // 47
                                                                                                                       // 48
    _classCallCheck(this, Route);                                                                                      // 49
                                                                                                                       // 50
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             // 51
      args[_key] = arguments[_key];                                                                                    // 52
    }                                                                                                                  // 53
                                                                                                                       // 54
    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      match: _this.computeMatch(_this.props, _this.context.router)                                                     // 56
    }, _temp), _possibleConstructorReturn(_this, _ret);                                                                // 57
  }                                                                                                                    // 58
                                                                                                                       // 59
  Route.prototype.getChildContext = function getChildContext() {                                                       // 60
    return {                                                                                                           // 61
      router: _extends({}, this.context.router, {                                                                      // 62
        route: {                                                                                                       // 63
          location: this.props.location || this.context.router.route.location,                                         // 64
          match: this.state.match                                                                                      // 65
        }                                                                                                              // 66
      })                                                                                                               // 67
    };                                                                                                                 // 68
  };                                                                                                                   // 69
                                                                                                                       // 70
  Route.prototype.computeMatch = function computeMatch(_ref, router) {                                                 // 71
    var computedMatch = _ref.computedMatch,                                                                            // 72
        location = _ref.location,                                                                                      // 73
        path = _ref.path,                                                                                              // 74
        strict = _ref.strict,                                                                                          // 75
        exact = _ref.exact,                                                                                            // 76
        sensitive = _ref.sensitive;                                                                                    // 77
                                                                                                                       // 78
    if (computedMatch) return computedMatch; // <Switch> already computed the match for us                             // 79
                                                                                                                       // 80
    (0, _invariant2.default)(router, 'You should not use <Route> or withRouter() outside a <Router>');                 // 81
                                                                                                                       // 82
    var route = router.route;                                                                                          // 83
                                                                                                                       // 84
    var pathname = (location || route.location).pathname;                                                              // 85
                                                                                                                       // 86
    return path ? (0, _matchPath2.default)(pathname, { path: path, strict: strict, exact: exact, sensitive: sensitive }) : route.match;
  };                                                                                                                   // 88
                                                                                                                       // 89
  Route.prototype.componentWillMount = function componentWillMount() {                                                 // 90
    (0, _warning2.default)(!(this.props.component && this.props.render), 'You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored');
                                                                                                                       // 92
    (0, _warning2.default)(!(this.props.component && this.props.children && !isEmptyChildren(this.props.children)), 'You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored');
                                                                                                                       // 94
    (0, _warning2.default)(!(this.props.render && this.props.children && !isEmptyChildren(this.props.children)), 'You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored');
  };                                                                                                                   // 96
                                                                                                                       // 97
  Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {             // 98
    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
                                                                                                                       // 100
    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
                                                                                                                       // 102
    this.setState({                                                                                                    // 103
      match: this.computeMatch(nextProps, nextContext.router)                                                          // 104
    });                                                                                                                // 105
  };                                                                                                                   // 106
                                                                                                                       // 107
  Route.prototype.render = function render() {                                                                         // 108
    var match = this.state.match;                                                                                      // 109
    var _props = this.props,                                                                                           // 110
        children = _props.children,                                                                                    // 111
        component = _props.component,                                                                                  // 112
        render = _props.render;                                                                                        // 113
    var _context$router = this.context.router,                                                                         // 114
        history = _context$router.history,                                                                             // 115
        route = _context$router.route,                                                                                 // 116
        staticContext = _context$router.staticContext;                                                                 // 117
                                                                                                                       // 118
    var location = this.props.location || route.location;                                                              // 119
    var props = { match: match, location: location, history: history, staticContext: staticContext };                  // 120
                                                                                                                       // 121
    return component ? // component prop gets first priority, only called if there's a match                           // 122
    match ? _react2.default.createElement(component, props) : null : render ? // render prop is next, only called if there's a match
    match ? render(props) : null : children ? // children come last, always called                                     // 124
    typeof children === 'function' ? children(props) : !isEmptyChildren(children) ? _react2.default.Children.only(children) : null : null;
  };                                                                                                                   // 126
                                                                                                                       // 127
  return Route;                                                                                                        // 128
}(_react2.default.Component);                                                                                          // 129
                                                                                                                       // 130
Route.propTypes = {                                                                                                    // 131
  computedMatch: _propTypes2.default.object, // private, from <Switch>                                                 // 132
  path: _propTypes2.default.string,                                                                                    // 133
  exact: _propTypes2.default.bool,                                                                                     // 134
  strict: _propTypes2.default.bool,                                                                                    // 135
  sensitive: _propTypes2.default.bool,                                                                                 // 136
  component: _propTypes2.default.func,                                                                                 // 137
  render: _propTypes2.default.func,                                                                                    // 138
  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),                       // 139
  location: _propTypes2.default.object                                                                                 // 140
};                                                                                                                     // 141
Route.contextTypes = {                                                                                                 // 142
  router: _propTypes2.default.shape({                                                                                  // 143
    history: _propTypes2.default.object.isRequired,                                                                    // 144
    route: _propTypes2.default.object.isRequired,                                                                      // 145
    staticContext: _propTypes2.default.object                                                                          // 146
  })                                                                                                                   // 147
};                                                                                                                     // 148
Route.childContextTypes = {                                                                                            // 149
  router: _propTypes2.default.object.isRequired                                                                        // 150
};                                                                                                                     // 151
exports.default = Route;                                                                                               // 152
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"matchPath.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router/matchPath.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _pathToRegexp = require('path-to-regexp');                                                                         // 5
                                                                                                                       // 6
var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);                                                            // 7
                                                                                                                       // 8
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 9
                                                                                                                       // 10
var patternCache = {};                                                                                                 // 11
var cacheLimit = 10000;                                                                                                // 12
var cacheCount = 0;                                                                                                    // 13
                                                                                                                       // 14
var compilePath = function compilePath(pattern, options) {                                                             // 15
  var cacheKey = '' + options.end + options.strict + options.sensitive;                                                // 16
  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});                                                 // 17
                                                                                                                       // 18
  if (cache[pattern]) return cache[pattern];                                                                           // 19
                                                                                                                       // 20
  var keys = [];                                                                                                       // 21
  var re = (0, _pathToRegexp2.default)(pattern, keys, options);                                                        // 22
  var compiledPattern = { re: re, keys: keys };                                                                        // 23
                                                                                                                       // 24
  if (cacheCount < cacheLimit) {                                                                                       // 25
    cache[pattern] = compiledPattern;                                                                                  // 26
    cacheCount++;                                                                                                      // 27
  }                                                                                                                    // 28
                                                                                                                       // 29
  return compiledPattern;                                                                                              // 30
};                                                                                                                     // 31
                                                                                                                       // 32
/**                                                                                                                    // 33
 * Public API for matching a URL pathname to a path pattern.                                                           // 34
 */                                                                                                                    // 35
var matchPath = function matchPath(pathname) {                                                                         // 36
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                                // 37
                                                                                                                       // 38
  if (typeof options === 'string') options = { path: options };                                                        // 39
                                                                                                                       // 40
  var _options = options,                                                                                              // 41
      _options$path = _options.path,                                                                                   // 42
      path = _options$path === undefined ? '/' : _options$path,                                                        // 43
      _options$exact = _options.exact,                                                                                 // 44
      exact = _options$exact === undefined ? false : _options$exact,                                                   // 45
      _options$strict = _options.strict,                                                                               // 46
      strict = _options$strict === undefined ? false : _options$strict,                                                // 47
      _options$sensitive = _options.sensitive,                                                                         // 48
      sensitive = _options$sensitive === undefined ? false : _options$sensitive;                                       // 49
                                                                                                                       // 50
  var _compilePath = compilePath(path, { end: exact, strict: strict, sensitive: sensitive }),                          // 51
      re = _compilePath.re,                                                                                            // 52
      keys = _compilePath.keys;                                                                                        // 53
                                                                                                                       // 54
  var match = re.exec(pathname);                                                                                       // 55
                                                                                                                       // 56
  if (!match) return null;                                                                                             // 57
                                                                                                                       // 58
  var url = match[0],                                                                                                  // 59
      values = match.slice(1);                                                                                         // 60
                                                                                                                       // 61
  var isExact = pathname === url;                                                                                      // 62
                                                                                                                       // 63
  if (exact && !isExact) return null;                                                                                  // 64
                                                                                                                       // 65
  return {                                                                                                             // 66
    path: path, // the path pattern used to match                                                                      // 67
    url: path === '/' && url === '' ? '/' : url, // the matched portion of the URL                                     // 68
    isExact: isExact, // whether or not we matched exactly                                                             // 69
    params: keys.reduce(function (memo, key, index) {                                                                  // 70
      memo[key.name] = values[index];                                                                                  // 71
      return memo;                                                                                                     // 72
    }, {})                                                                                                             // 73
  };                                                                                                                   // 74
};                                                                                                                     // 75
                                                                                                                       // 76
exports.default = matchPath;                                                                                           // 77
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Prompt.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router/Prompt.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _react = require('react');                                                                                         // 5
                                                                                                                       // 6
var _react2 = _interopRequireDefault(_react);                                                                          // 7
                                                                                                                       // 8
var _propTypes = require('prop-types');                                                                                // 9
                                                                                                                       // 10
var _propTypes2 = _interopRequireDefault(_propTypes);                                                                  // 11
                                                                                                                       // 12
var _invariant = require('invariant');                                                                                 // 13
                                                                                                                       // 14
var _invariant2 = _interopRequireDefault(_invariant);                                                                  // 15
                                                                                                                       // 16
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 17
                                                                                                                       // 18
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 20
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
                                                                                                                       // 22
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
                                                                                                                       // 24
/**                                                                                                                    // 25
 * The public API for prompting the user before navigating away                                                        // 26
 * from a screen with a component.                                                                                     // 27
 */                                                                                                                    // 28
var Prompt = function (_React$Component) {                                                                             // 29
  _inherits(Prompt, _React$Component);                                                                                 // 30
                                                                                                                       // 31
  function Prompt() {                                                                                                  // 32
    _classCallCheck(this, Prompt);                                                                                     // 33
                                                                                                                       // 34
    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));                                  // 35
  }                                                                                                                    // 36
                                                                                                                       // 37
  Prompt.prototype.enable = function enable(message) {                                                                 // 38
    if (this.unblock) this.unblock();                                                                                  // 39
                                                                                                                       // 40
    this.unblock = this.context.router.history.block(message);                                                         // 41
  };                                                                                                                   // 42
                                                                                                                       // 43
  Prompt.prototype.disable = function disable() {                                                                      // 44
    if (this.unblock) {                                                                                                // 45
      this.unblock();                                                                                                  // 46
      this.unblock = null;                                                                                             // 47
    }                                                                                                                  // 48
  };                                                                                                                   // 49
                                                                                                                       // 50
  Prompt.prototype.componentWillMount = function componentWillMount() {                                                // 51
    (0, _invariant2.default)(this.context.router, 'You should not use <Prompt> outside a <Router>');                   // 52
                                                                                                                       // 53
    if (this.props.when) this.enable(this.props.message);                                                              // 54
  };                                                                                                                   // 55
                                                                                                                       // 56
  Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {                         // 57
    if (nextProps.when) {                                                                                              // 58
      if (!this.props.when || this.props.message !== nextProps.message) this.enable(nextProps.message);                // 59
    } else {                                                                                                           // 60
      this.disable();                                                                                                  // 61
    }                                                                                                                  // 62
  };                                                                                                                   // 63
                                                                                                                       // 64
  Prompt.prototype.componentWillUnmount = function componentWillUnmount() {                                            // 65
    this.disable();                                                                                                    // 66
  };                                                                                                                   // 67
                                                                                                                       // 68
  Prompt.prototype.render = function render() {                                                                        // 69
    return null;                                                                                                       // 70
  };                                                                                                                   // 71
                                                                                                                       // 72
  return Prompt;                                                                                                       // 73
}(_react2.default.Component);                                                                                          // 74
                                                                                                                       // 75
Prompt.propTypes = {                                                                                                   // 76
  when: _propTypes2.default.bool,                                                                                      // 77
  message: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired            // 78
};                                                                                                                     // 79
Prompt.defaultProps = {                                                                                                // 80
  when: true                                                                                                           // 81
};                                                                                                                     // 82
Prompt.contextTypes = {                                                                                                // 83
  router: _propTypes2.default.shape({                                                                                  // 84
    history: _propTypes2.default.shape({                                                                               // 85
      block: _propTypes2.default.func.isRequired                                                                       // 86
    }).isRequired                                                                                                      // 87
  }).isRequired                                                                                                        // 88
};                                                                                                                     // 89
exports.default = Prompt;                                                                                              // 90
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Redirect.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router/Redirect.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _react = require('react');                                                                                         // 5
                                                                                                                       // 6
var _react2 = _interopRequireDefault(_react);                                                                          // 7
                                                                                                                       // 8
var _propTypes = require('prop-types');                                                                                // 9
                                                                                                                       // 10
var _propTypes2 = _interopRequireDefault(_propTypes);                                                                  // 11
                                                                                                                       // 12
var _warning = require('warning');                                                                                     // 13
                                                                                                                       // 14
var _warning2 = _interopRequireDefault(_warning);                                                                      // 15
                                                                                                                       // 16
var _invariant = require('invariant');                                                                                 // 17
                                                                                                                       // 18
var _invariant2 = _interopRequireDefault(_invariant);                                                                  // 19
                                                                                                                       // 20
var _history = require('history');                                                                                     // 21
                                                                                                                       // 22
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 23
                                                                                                                       // 24
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 26
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
                                                                                                                       // 28
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
                                                                                                                       // 30
/**                                                                                                                    // 31
 * The public API for updating the location programmatically                                                           // 32
 * with a component.                                                                                                   // 33
 */                                                                                                                    // 34
var Redirect = function (_React$Component) {                                                                           // 35
  _inherits(Redirect, _React$Component);                                                                               // 36
                                                                                                                       // 37
  function Redirect() {                                                                                                // 38
    _classCallCheck(this, Redirect);                                                                                   // 39
                                                                                                                       // 40
    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));                                  // 41
  }                                                                                                                    // 42
                                                                                                                       // 43
  Redirect.prototype.isStatic = function isStatic() {                                                                  // 44
    return this.context.router && this.context.router.staticContext;                                                   // 45
  };                                                                                                                   // 46
                                                                                                                       // 47
  Redirect.prototype.componentWillMount = function componentWillMount() {                                              // 48
    (0, _invariant2.default)(this.context.router, 'You should not use <Redirect> outside a <Router>');                 // 49
                                                                                                                       // 50
    if (this.isStatic()) this.perform();                                                                               // 51
  };                                                                                                                   // 52
                                                                                                                       // 53
  Redirect.prototype.componentDidMount = function componentDidMount() {                                                // 54
    if (!this.isStatic()) this.perform();                                                                              // 55
  };                                                                                                                   // 56
                                                                                                                       // 57
  Redirect.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {                                     // 58
    var prevTo = (0, _history.createLocation)(prevProps.to);                                                           // 59
    var nextTo = (0, _history.createLocation)(this.props.to);                                                          // 60
                                                                                                                       // 61
    if ((0, _history.locationsAreEqual)(prevTo, nextTo)) {                                                             // 62
      (0, _warning2.default)(false, 'You tried to redirect to the same route you\'re currently on: ' + ('"' + nextTo.pathname + nextTo.search + '"'));
      return;                                                                                                          // 64
    }                                                                                                                  // 65
                                                                                                                       // 66
    this.perform();                                                                                                    // 67
  };                                                                                                                   // 68
                                                                                                                       // 69
  Redirect.prototype.perform = function perform() {                                                                    // 70
    var history = this.context.router.history;                                                                         // 71
    var _props = this.props,                                                                                           // 72
        push = _props.push,                                                                                            // 73
        to = _props.to;                                                                                                // 74
                                                                                                                       // 75
                                                                                                                       // 76
    if (push) {                                                                                                        // 77
      history.push(to);                                                                                                // 78
    } else {                                                                                                           // 79
      history.replace(to);                                                                                             // 80
    }                                                                                                                  // 81
  };                                                                                                                   // 82
                                                                                                                       // 83
  Redirect.prototype.render = function render() {                                                                      // 84
    return null;                                                                                                       // 85
  };                                                                                                                   // 86
                                                                                                                       // 87
  return Redirect;                                                                                                     // 88
}(_react2.default.Component);                                                                                          // 89
                                                                                                                       // 90
Redirect.propTypes = {                                                                                                 // 91
  push: _propTypes2.default.bool,                                                                                      // 92
  from: _propTypes2.default.string,                                                                                    // 93
  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired               // 94
};                                                                                                                     // 95
Redirect.defaultProps = {                                                                                              // 96
  push: false                                                                                                          // 97
};                                                                                                                     // 98
Redirect.contextTypes = {                                                                                              // 99
  router: _propTypes2.default.shape({                                                                                  // 100
    history: _propTypes2.default.shape({                                                                               // 101
      push: _propTypes2.default.func.isRequired,                                                                       // 102
      replace: _propTypes2.default.func.isRequired                                                                     // 103
    }).isRequired,                                                                                                     // 104
    staticContext: _propTypes2.default.object                                                                          // 105
  }).isRequired                                                                                                        // 106
};                                                                                                                     // 107
exports.default = Redirect;                                                                                            // 108
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"StaticRouter.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router/StaticRouter.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 6
var _warning = require('warning');                                                                                     // 7
                                                                                                                       // 8
var _warning2 = _interopRequireDefault(_warning);                                                                      // 9
                                                                                                                       // 10
var _invariant = require('invariant');                                                                                 // 11
                                                                                                                       // 12
var _invariant2 = _interopRequireDefault(_invariant);                                                                  // 13
                                                                                                                       // 14
var _react = require('react');                                                                                         // 15
                                                                                                                       // 16
var _react2 = _interopRequireDefault(_react);                                                                          // 17
                                                                                                                       // 18
var _propTypes = require('prop-types');                                                                                // 19
                                                                                                                       // 20
var _propTypes2 = _interopRequireDefault(_propTypes);                                                                  // 21
                                                                                                                       // 22
var _PathUtils = require('history/PathUtils');                                                                         // 23
                                                                                                                       // 24
var _Router = require('./Router');                                                                                     // 25
                                                                                                                       // 26
var _Router2 = _interopRequireDefault(_Router);                                                                        // 27
                                                                                                                       // 28
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 29
                                                                                                                       // 30
function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
                                                                                                                       // 32
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 34
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
                                                                                                                       // 36
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
                                                                                                                       // 38
var normalizeLocation = function normalizeLocation(object) {                                                           // 39
  var _object$pathname = object.pathname,                                                                              // 40
      pathname = _object$pathname === undefined ? '/' : _object$pathname,                                              // 41
      _object$search = object.search,                                                                                  // 42
      search = _object$search === undefined ? '' : _object$search,                                                     // 43
      _object$hash = object.hash,                                                                                      // 44
      hash = _object$hash === undefined ? '' : _object$hash;                                                           // 45
                                                                                                                       // 46
                                                                                                                       // 47
  return {                                                                                                             // 48
    pathname: pathname,                                                                                                // 49
    search: search === '?' ? '' : search,                                                                              // 50
    hash: hash === '#' ? '' : hash                                                                                     // 51
  };                                                                                                                   // 52
};                                                                                                                     // 53
                                                                                                                       // 54
var addBasename = function addBasename(basename, location) {                                                           // 55
  if (!basename) return location;                                                                                      // 56
                                                                                                                       // 57
  return _extends({}, location, {                                                                                      // 58
    pathname: (0, _PathUtils.addLeadingSlash)(basename) + location.pathname                                            // 59
  });                                                                                                                  // 60
};                                                                                                                     // 61
                                                                                                                       // 62
var stripBasename = function stripBasename(basename, location) {                                                       // 63
  if (!basename) return location;                                                                                      // 64
                                                                                                                       // 65
  var base = (0, _PathUtils.addLeadingSlash)(basename);                                                                // 66
                                                                                                                       // 67
  if (location.pathname.indexOf(base) !== 0) return location;                                                          // 68
                                                                                                                       // 69
  return _extends({}, location, {                                                                                      // 70
    pathname: location.pathname.substr(base.length)                                                                    // 71
  });                                                                                                                  // 72
};                                                                                                                     // 73
                                                                                                                       // 74
var createLocation = function createLocation(location) {                                                               // 75
  return typeof location === 'string' ? (0, _PathUtils.parsePath)(location) : normalizeLocation(location);             // 76
};                                                                                                                     // 77
                                                                                                                       // 78
var createURL = function createURL(location) {                                                                         // 79
  return typeof location === 'string' ? location : (0, _PathUtils.createPath)(location);                               // 80
};                                                                                                                     // 81
                                                                                                                       // 82
var staticHandler = function staticHandler(methodName) {                                                               // 83
  return function () {                                                                                                 // 84
    (0, _invariant2.default)(false, 'You cannot %s with <StaticRouter>', methodName);                                  // 85
  };                                                                                                                   // 86
};                                                                                                                     // 87
                                                                                                                       // 88
var noop = function noop() {};                                                                                         // 89
                                                                                                                       // 90
/**                                                                                                                    // 91
 * The public top-level API for a "static" <Router>, so-called because it                                              // 92
 * can't actually change the current location. Instead, it just records                                                // 93
 * location changes in a context object. Useful mainly in testing and                                                  // 94
 * server-rendering scenarios.                                                                                         // 95
 */                                                                                                                    // 96
                                                                                                                       // 97
var StaticRouter = function (_React$Component) {                                                                       // 98
  _inherits(StaticRouter, _React$Component);                                                                           // 99
                                                                                                                       // 100
  function StaticRouter() {                                                                                            // 101
    var _temp, _this, _ret;                                                                                            // 102
                                                                                                                       // 103
    _classCallCheck(this, StaticRouter);                                                                               // 104
                                                                                                                       // 105
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             // 106
      args[_key] = arguments[_key];                                                                                    // 107
    }                                                                                                                  // 108
                                                                                                                       // 109
    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createHref = function (path) {
      return (0, _PathUtils.addLeadingSlash)(_this.props.basename + createURL(path));                                  // 111
    }, _this.handlePush = function (location) {                                                                        // 112
      var _this$props = _this.props,                                                                                   // 113
          basename = _this$props.basename,                                                                             // 114
          context = _this$props.context;                                                                               // 115
                                                                                                                       // 116
      context.action = 'PUSH';                                                                                         // 117
      context.location = addBasename(basename, createLocation(location));                                              // 118
      context.url = createURL(context.location);                                                                       // 119
    }, _this.handleReplace = function (location) {                                                                     // 120
      var _this$props2 = _this.props,                                                                                  // 121
          basename = _this$props2.basename,                                                                            // 122
          context = _this$props2.context;                                                                              // 123
                                                                                                                       // 124
      context.action = 'REPLACE';                                                                                      // 125
      context.location = addBasename(basename, createLocation(location));                                              // 126
      context.url = createURL(context.location);                                                                       // 127
    }, _this.handleListen = function () {                                                                              // 128
      return noop;                                                                                                     // 129
    }, _this.handleBlock = function () {                                                                               // 130
      return noop;                                                                                                     // 131
    }, _temp), _possibleConstructorReturn(_this, _ret);                                                                // 132
  }                                                                                                                    // 133
                                                                                                                       // 134
  StaticRouter.prototype.getChildContext = function getChildContext() {                                                // 135
    return {                                                                                                           // 136
      router: {                                                                                                        // 137
        staticContext: this.props.context                                                                              // 138
      }                                                                                                                // 139
    };                                                                                                                 // 140
  };                                                                                                                   // 141
                                                                                                                       // 142
  StaticRouter.prototype.componentWillMount = function componentWillMount() {                                          // 143
    (0, _warning2.default)(!this.props.history, '<StaticRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { StaticRouter as Router }`.');
  };                                                                                                                   // 145
                                                                                                                       // 146
  StaticRouter.prototype.render = function render() {                                                                  // 147
    var _props = this.props,                                                                                           // 148
        basename = _props.basename,                                                                                    // 149
        context = _props.context,                                                                                      // 150
        location = _props.location,                                                                                    // 151
        props = _objectWithoutProperties(_props, ['basename', 'context', 'location']);                                 // 152
                                                                                                                       // 153
    var history = {                                                                                                    // 154
      createHref: this.createHref,                                                                                     // 155
      action: 'POP',                                                                                                   // 156
      location: stripBasename(basename, createLocation(location)),                                                     // 157
      push: this.handlePush,                                                                                           // 158
      replace: this.handleReplace,                                                                                     // 159
      go: staticHandler('go'),                                                                                         // 160
      goBack: staticHandler('goBack'),                                                                                 // 161
      goForward: staticHandler('goForward'),                                                                           // 162
      listen: this.handleListen,                                                                                       // 163
      block: this.handleBlock                                                                                          // 164
    };                                                                                                                 // 165
                                                                                                                       // 166
    return _react2.default.createElement(_Router2.default, _extends({}, props, { history: history }));                 // 167
  };                                                                                                                   // 168
                                                                                                                       // 169
  return StaticRouter;                                                                                                 // 170
}(_react2.default.Component);                                                                                          // 171
                                                                                                                       // 172
StaticRouter.propTypes = {                                                                                             // 173
  basename: _propTypes2.default.string,                                                                                // 174
  context: _propTypes2.default.object.isRequired,                                                                      // 175
  location: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])                    // 176
};                                                                                                                     // 177
StaticRouter.defaultProps = {                                                                                          // 178
  basename: '',                                                                                                        // 179
  location: '/'                                                                                                        // 180
};                                                                                                                     // 181
StaticRouter.childContextTypes = {                                                                                     // 182
  router: _propTypes2.default.object.isRequired                                                                        // 183
};                                                                                                                     // 184
exports.default = StaticRouter;                                                                                        // 185
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Switch.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router/Switch.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _react = require('react');                                                                                         // 5
                                                                                                                       // 6
var _react2 = _interopRequireDefault(_react);                                                                          // 7
                                                                                                                       // 8
var _propTypes = require('prop-types');                                                                                // 9
                                                                                                                       // 10
var _propTypes2 = _interopRequireDefault(_propTypes);                                                                  // 11
                                                                                                                       // 12
var _warning = require('warning');                                                                                     // 13
                                                                                                                       // 14
var _warning2 = _interopRequireDefault(_warning);                                                                      // 15
                                                                                                                       // 16
var _invariant = require('invariant');                                                                                 // 17
                                                                                                                       // 18
var _invariant2 = _interopRequireDefault(_invariant);                                                                  // 19
                                                                                                                       // 20
var _matchPath = require('./matchPath');                                                                               // 21
                                                                                                                       // 22
var _matchPath2 = _interopRequireDefault(_matchPath);                                                                  // 23
                                                                                                                       // 24
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 25
                                                                                                                       // 26
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 28
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
                                                                                                                       // 30
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
                                                                                                                       // 32
/**                                                                                                                    // 33
 * The public API for rendering the first <Route> that matches.                                                        // 34
 */                                                                                                                    // 35
var Switch = function (_React$Component) {                                                                             // 36
  _inherits(Switch, _React$Component);                                                                                 // 37
                                                                                                                       // 38
  function Switch() {                                                                                                  // 39
    _classCallCheck(this, Switch);                                                                                     // 40
                                                                                                                       // 41
    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));                                  // 42
  }                                                                                                                    // 43
                                                                                                                       // 44
  Switch.prototype.componentWillMount = function componentWillMount() {                                                // 45
    (0, _invariant2.default)(this.context.router, 'You should not use <Switch> outside a <Router>');                   // 46
  };                                                                                                                   // 47
                                                                                                                       // 48
  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {                         // 49
    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
                                                                                                                       // 51
    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
  };                                                                                                                   // 53
                                                                                                                       // 54
  Switch.prototype.render = function render() {                                                                        // 55
    var route = this.context.router.route;                                                                             // 56
    var children = this.props.children;                                                                                // 57
                                                                                                                       // 58
    var location = this.props.location || route.location;                                                              // 59
                                                                                                                       // 60
    var match = void 0,                                                                                                // 61
        child = void 0;                                                                                                // 62
    _react2.default.Children.forEach(children, function (element) {                                                    // 63
      if (!_react2.default.isValidElement(element)) return;                                                            // 64
                                                                                                                       // 65
      var _element$props = element.props,                                                                              // 66
          pathProp = _element$props.path,                                                                              // 67
          exact = _element$props.exact,                                                                                // 68
          strict = _element$props.strict,                                                                              // 69
          sensitive = _element$props.sensitive,                                                                        // 70
          from = _element$props.from;                                                                                  // 71
                                                                                                                       // 72
      var path = pathProp || from;                                                                                     // 73
                                                                                                                       // 74
      if (match == null) {                                                                                             // 75
        child = element;                                                                                               // 76
        match = path ? (0, _matchPath2.default)(location.pathname, { path: path, exact: exact, strict: strict, sensitive: sensitive }) : route.match;
      }                                                                                                                // 78
    });                                                                                                                // 79
                                                                                                                       // 80
    return match ? _react2.default.cloneElement(child, { location: location, computedMatch: match }) : null;           // 81
  };                                                                                                                   // 82
                                                                                                                       // 83
  return Switch;                                                                                                       // 84
}(_react2.default.Component);                                                                                          // 85
                                                                                                                       // 86
Switch.contextTypes = {                                                                                                // 87
  router: _propTypes2.default.shape({                                                                                  // 88
    route: _propTypes2.default.object.isRequired                                                                       // 89
  }).isRequired                                                                                                        // 90
};                                                                                                                     // 91
Switch.propTypes = {                                                                                                   // 92
  children: _propTypes2.default.node,                                                                                  // 93
  location: _propTypes2.default.object                                                                                 // 94
};                                                                                                                     // 95
exports.default = Switch;                                                                                              // 96
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"withRouter.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-router/withRouter.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 6
var _react = require('react');                                                                                         // 7
                                                                                                                       // 8
var _react2 = _interopRequireDefault(_react);                                                                          // 9
                                                                                                                       // 10
var _propTypes = require('prop-types');                                                                                // 11
                                                                                                                       // 12
var _propTypes2 = _interopRequireDefault(_propTypes);                                                                  // 13
                                                                                                                       // 14
var _hoistNonReactStatics = require('hoist-non-react-statics');                                                        // 15
                                                                                                                       // 16
var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);                                            // 17
                                                                                                                       // 18
var _Route = require('./Route');                                                                                       // 19
                                                                                                                       // 20
var _Route2 = _interopRequireDefault(_Route);                                                                          // 21
                                                                                                                       // 22
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 23
                                                                                                                       // 24
function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
                                                                                                                       // 26
/**                                                                                                                    // 27
 * A public higher-order component to access the imperative API                                                        // 28
 */                                                                                                                    // 29
var withRouter = function withRouter(Component) {                                                                      // 30
  var C = function C(props) {                                                                                          // 31
    var wrappedComponentRef = props.wrappedComponentRef,                                                               // 32
        remainingProps = _objectWithoutProperties(props, ['wrappedComponentRef']);                                     // 33
                                                                                                                       // 34
    return _react2.default.createElement(_Route2.default, { render: function render(routeComponentProps) {             // 35
        return _react2.default.createElement(Component, _extends({}, remainingProps, routeComponentProps, { ref: wrappedComponentRef }));
      } });                                                                                                            // 37
  };                                                                                                                   // 38
                                                                                                                       // 39
  C.displayName = 'withRouter(' + (Component.displayName || Component.name) + ')';                                     // 40
  C.WrappedComponent = Component;                                                                                      // 41
  C.propTypes = {                                                                                                      // 42
    wrappedComponentRef: _propTypes2.default.func                                                                      // 43
  };                                                                                                                   // 44
                                                                                                                       // 45
  return (0, _hoistNonReactStatics2.default)(C, Component);                                                            // 46
};                                                                                                                     // 47
                                                                                                                       // 48
exports.default = withRouter;                                                                                          // 49
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"path-to-regexp":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/path-to-regexp/package.json                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "path-to-regexp";                                                                                       // 1
exports.version = "1.7.0";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/path-to-regexp/index.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isarray = require('isarray')                                                                                       // 1
                                                                                                                       // 2
/**                                                                                                                    // 3
 * Expose `pathToRegexp`.                                                                                              // 4
 */                                                                                                                    // 5
module.exports = pathToRegexp                                                                                          // 6
module.exports.parse = parse                                                                                           // 7
module.exports.compile = compile                                                                                       // 8
module.exports.tokensToFunction = tokensToFunction                                                                     // 9
module.exports.tokensToRegExp = tokensToRegExp                                                                         // 10
                                                                                                                       // 11
/**                                                                                                                    // 12
 * The main path matching regexp utility.                                                                              // 13
 *                                                                                                                     // 14
 * @type {RegExp}                                                                                                      // 15
 */                                                                                                                    // 16
var PATH_REGEXP = new RegExp([                                                                                         // 17
  // Match escaped characters that would otherwise appear in future matches.                                           // 18
  // This allows the user to escape special characters that won't transform.                                           // 19
  '(\\\\.)',                                                                                                           // 20
  // Match Express-style parameters and un-named parameters with a prefix                                              // 21
  // and optional suffixes. Matches appear as:                                                                         // 22
  //                                                                                                                   // 23
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]                                                // 24
  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]                                 // 25
  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]                                         // 26
  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'             // 27
].join('|'), 'g')                                                                                                      // 28
                                                                                                                       // 29
/**                                                                                                                    // 30
 * Parse a string for the raw tokens.                                                                                  // 31
 *                                                                                                                     // 32
 * @param  {string}  str                                                                                               // 33
 * @param  {Object=} options                                                                                           // 34
 * @return {!Array}                                                                                                    // 35
 */                                                                                                                    // 36
function parse (str, options) {                                                                                        // 37
  var tokens = []                                                                                                      // 38
  var key = 0                                                                                                          // 39
  var index = 0                                                                                                        // 40
  var path = ''                                                                                                        // 41
  var defaultDelimiter = options && options.delimiter || '/'                                                           // 42
  var res                                                                                                              // 43
                                                                                                                       // 44
  while ((res = PATH_REGEXP.exec(str)) != null) {                                                                      // 45
    var m = res[0]                                                                                                     // 46
    var escaped = res[1]                                                                                               // 47
    var offset = res.index                                                                                             // 48
    path += str.slice(index, offset)                                                                                   // 49
    index = offset + m.length                                                                                          // 50
                                                                                                                       // 51
    // Ignore already escaped sequences.                                                                               // 52
    if (escaped) {                                                                                                     // 53
      path += escaped[1]                                                                                               // 54
      continue                                                                                                         // 55
    }                                                                                                                  // 56
                                                                                                                       // 57
    var next = str[index]                                                                                              // 58
    var prefix = res[2]                                                                                                // 59
    var name = res[3]                                                                                                  // 60
    var capture = res[4]                                                                                               // 61
    var group = res[5]                                                                                                 // 62
    var modifier = res[6]                                                                                              // 63
    var asterisk = res[7]                                                                                              // 64
                                                                                                                       // 65
    // Push the current path onto the tokens.                                                                          // 66
    if (path) {                                                                                                        // 67
      tokens.push(path)                                                                                                // 68
      path = ''                                                                                                        // 69
    }                                                                                                                  // 70
                                                                                                                       // 71
    var partial = prefix != null && next != null && next !== prefix                                                    // 72
    var repeat = modifier === '+' || modifier === '*'                                                                  // 73
    var optional = modifier === '?' || modifier === '*'                                                                // 74
    var delimiter = res[2] || defaultDelimiter                                                                         // 75
    var pattern = capture || group                                                                                     // 76
                                                                                                                       // 77
    tokens.push({                                                                                                      // 78
      name: name || key++,                                                                                             // 79
      prefix: prefix || '',                                                                                            // 80
      delimiter: delimiter,                                                                                            // 81
      optional: optional,                                                                                              // 82
      repeat: repeat,                                                                                                  // 83
      partial: partial,                                                                                                // 84
      asterisk: !!asterisk,                                                                                            // 85
      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')             // 86
    })                                                                                                                 // 87
  }                                                                                                                    // 88
                                                                                                                       // 89
  // Match any characters still remaining.                                                                             // 90
  if (index < str.length) {                                                                                            // 91
    path += str.substr(index)                                                                                          // 92
  }                                                                                                                    // 93
                                                                                                                       // 94
  // If the path exists, push it onto the end.                                                                         // 95
  if (path) {                                                                                                          // 96
    tokens.push(path)                                                                                                  // 97
  }                                                                                                                    // 98
                                                                                                                       // 99
  return tokens                                                                                                        // 100
}                                                                                                                      // 101
                                                                                                                       // 102
/**                                                                                                                    // 103
 * Compile a string to a template function for the path.                                                               // 104
 *                                                                                                                     // 105
 * @param  {string}             str                                                                                    // 106
 * @param  {Object=}            options                                                                                // 107
 * @return {!function(Object=, Object=)}                                                                               // 108
 */                                                                                                                    // 109
function compile (str, options) {                                                                                      // 110
  return tokensToFunction(parse(str, options))                                                                         // 111
}                                                                                                                      // 112
                                                                                                                       // 113
/**                                                                                                                    // 114
 * Prettier encoding of URI path segments.                                                                             // 115
 *                                                                                                                     // 116
 * @param  {string}                                                                                                    // 117
 * @return {string}                                                                                                    // 118
 */                                                                                                                    // 119
function encodeURIComponentPretty (str) {                                                                              // 120
  return encodeURI(str).replace(/[\/?#]/g, function (c) {                                                              // 121
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()                                                            // 122
  })                                                                                                                   // 123
}                                                                                                                      // 124
                                                                                                                       // 125
/**                                                                                                                    // 126
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.                                             // 127
 *                                                                                                                     // 128
 * @param  {string}                                                                                                    // 129
 * @return {string}                                                                                                    // 130
 */                                                                                                                    // 131
function encodeAsterisk (str) {                                                                                        // 132
  return encodeURI(str).replace(/[?#]/g, function (c) {                                                                // 133
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()                                                            // 134
  })                                                                                                                   // 135
}                                                                                                                      // 136
                                                                                                                       // 137
/**                                                                                                                    // 138
 * Expose a method for transforming tokens into the path function.                                                     // 139
 */                                                                                                                    // 140
function tokensToFunction (tokens) {                                                                                   // 141
  // Compile all the tokens into regexps.                                                                              // 142
  var matches = new Array(tokens.length)                                                                               // 143
                                                                                                                       // 144
  // Compile all the patterns before compilation.                                                                      // 145
  for (var i = 0; i < tokens.length; i++) {                                                                            // 146
    if (typeof tokens[i] === 'object') {                                                                               // 147
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')                                                       // 148
    }                                                                                                                  // 149
  }                                                                                                                    // 150
                                                                                                                       // 151
  return function (obj, opts) {                                                                                        // 152
    var path = ''                                                                                                      // 153
    var data = obj || {}                                                                                               // 154
    var options = opts || {}                                                                                           // 155
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent                                        // 156
                                                                                                                       // 157
    for (var i = 0; i < tokens.length; i++) {                                                                          // 158
      var token = tokens[i]                                                                                            // 159
                                                                                                                       // 160
      if (typeof token === 'string') {                                                                                 // 161
        path += token                                                                                                  // 162
                                                                                                                       // 163
        continue                                                                                                       // 164
      }                                                                                                                // 165
                                                                                                                       // 166
      var value = data[token.name]                                                                                     // 167
      var segment                                                                                                      // 168
                                                                                                                       // 169
      if (value == null) {                                                                                             // 170
        if (token.optional) {                                                                                          // 171
          // Prepend partial segment prefixes.                                                                         // 172
          if (token.partial) {                                                                                         // 173
            path += token.prefix                                                                                       // 174
          }                                                                                                            // 175
                                                                                                                       // 176
          continue                                                                                                     // 177
        } else {                                                                                                       // 178
          throw new TypeError('Expected "' + token.name + '" to be defined')                                           // 179
        }                                                                                                              // 180
      }                                                                                                                // 181
                                                                                                                       // 182
      if (isarray(value)) {                                                                                            // 183
        if (!token.repeat) {                                                                                           // 184
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
        }                                                                                                              // 186
                                                                                                                       // 187
        if (value.length === 0) {                                                                                      // 188
          if (token.optional) {                                                                                        // 189
            continue                                                                                                   // 190
          } else {                                                                                                     // 191
            throw new TypeError('Expected "' + token.name + '" to not be empty')                                       // 192
          }                                                                                                            // 193
        }                                                                                                              // 194
                                                                                                                       // 195
        for (var j = 0; j < value.length; j++) {                                                                       // 196
          segment = encode(value[j])                                                                                   // 197
                                                                                                                       // 198
          if (!matches[i].test(segment)) {                                                                             // 199
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
          }                                                                                                            // 201
                                                                                                                       // 202
          path += (j === 0 ? token.prefix : token.delimiter) + segment                                                 // 203
        }                                                                                                              // 204
                                                                                                                       // 205
        continue                                                                                                       // 206
      }                                                                                                                // 207
                                                                                                                       // 208
      segment = token.asterisk ? encodeAsterisk(value) : encode(value)                                                 // 209
                                                                                                                       // 210
      if (!matches[i].test(segment)) {                                                                                 // 211
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
      }                                                                                                                // 213
                                                                                                                       // 214
      path += token.prefix + segment                                                                                   // 215
    }                                                                                                                  // 216
                                                                                                                       // 217
    return path                                                                                                        // 218
  }                                                                                                                    // 219
}                                                                                                                      // 220
                                                                                                                       // 221
/**                                                                                                                    // 222
 * Escape a regular expression string.                                                                                 // 223
 *                                                                                                                     // 224
 * @param  {string} str                                                                                                // 225
 * @return {string}                                                                                                    // 226
 */                                                                                                                    // 227
function escapeString (str) {                                                                                          // 228
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')                                                             // 229
}                                                                                                                      // 230
                                                                                                                       // 231
/**                                                                                                                    // 232
 * Escape the capturing group by escaping special characters and meaning.                                              // 233
 *                                                                                                                     // 234
 * @param  {string} group                                                                                              // 235
 * @return {string}                                                                                                    // 236
 */                                                                                                                    // 237
function escapeGroup (group) {                                                                                         // 238
  return group.replace(/([=!:$\/()])/g, '\\$1')                                                                        // 239
}                                                                                                                      // 240
                                                                                                                       // 241
/**                                                                                                                    // 242
 * Attach the keys as a property of the regexp.                                                                        // 243
 *                                                                                                                     // 244
 * @param  {!RegExp} re                                                                                                // 245
 * @param  {Array}   keys                                                                                              // 246
 * @return {!RegExp}                                                                                                   // 247
 */                                                                                                                    // 248
function attachKeys (re, keys) {                                                                                       // 249
  re.keys = keys                                                                                                       // 250
  return re                                                                                                            // 251
}                                                                                                                      // 252
                                                                                                                       // 253
/**                                                                                                                    // 254
 * Get the flags for a regexp from the options.                                                                        // 255
 *                                                                                                                     // 256
 * @param  {Object} options                                                                                            // 257
 * @return {string}                                                                                                    // 258
 */                                                                                                                    // 259
function flags (options) {                                                                                             // 260
  return options.sensitive ? '' : 'i'                                                                                  // 261
}                                                                                                                      // 262
                                                                                                                       // 263
/**                                                                                                                    // 264
 * Pull out keys from a regexp.                                                                                        // 265
 *                                                                                                                     // 266
 * @param  {!RegExp} path                                                                                              // 267
 * @param  {!Array}  keys                                                                                              // 268
 * @return {!RegExp}                                                                                                   // 269
 */                                                                                                                    // 270
function regexpToRegexp (path, keys) {                                                                                 // 271
  // Use a negative lookahead to match only capturing groups.                                                          // 272
  var groups = path.source.match(/\((?!\?)/g)                                                                          // 273
                                                                                                                       // 274
  if (groups) {                                                                                                        // 275
    for (var i = 0; i < groups.length; i++) {                                                                          // 276
      keys.push({                                                                                                      // 277
        name: i,                                                                                                       // 278
        prefix: null,                                                                                                  // 279
        delimiter: null,                                                                                               // 280
        optional: false,                                                                                               // 281
        repeat: false,                                                                                                 // 282
        partial: false,                                                                                                // 283
        asterisk: false,                                                                                               // 284
        pattern: null                                                                                                  // 285
      })                                                                                                               // 286
    }                                                                                                                  // 287
  }                                                                                                                    // 288
                                                                                                                       // 289
  return attachKeys(path, keys)                                                                                        // 290
}                                                                                                                      // 291
                                                                                                                       // 292
/**                                                                                                                    // 293
 * Transform an array into a regexp.                                                                                   // 294
 *                                                                                                                     // 295
 * @param  {!Array}  path                                                                                              // 296
 * @param  {Array}   keys                                                                                              // 297
 * @param  {!Object} options                                                                                           // 298
 * @return {!RegExp}                                                                                                   // 299
 */                                                                                                                    // 300
function arrayToRegexp (path, keys, options) {                                                                         // 301
  var parts = []                                                                                                       // 302
                                                                                                                       // 303
  for (var i = 0; i < path.length; i++) {                                                                              // 304
    parts.push(pathToRegexp(path[i], keys, options).source)                                                            // 305
  }                                                                                                                    // 306
                                                                                                                       // 307
  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))                                               // 308
                                                                                                                       // 309
  return attachKeys(regexp, keys)                                                                                      // 310
}                                                                                                                      // 311
                                                                                                                       // 312
/**                                                                                                                    // 313
 * Create a path regexp from string input.                                                                             // 314
 *                                                                                                                     // 315
 * @param  {string}  path                                                                                              // 316
 * @param  {!Array}  keys                                                                                              // 317
 * @param  {!Object} options                                                                                           // 318
 * @return {!RegExp}                                                                                                   // 319
 */                                                                                                                    // 320
function stringToRegexp (path, keys, options) {                                                                        // 321
  return tokensToRegExp(parse(path, options), keys, options)                                                           // 322
}                                                                                                                      // 323
                                                                                                                       // 324
/**                                                                                                                    // 325
 * Expose a function for taking tokens and returning a RegExp.                                                         // 326
 *                                                                                                                     // 327
 * @param  {!Array}          tokens                                                                                    // 328
 * @param  {(Array|Object)=} keys                                                                                      // 329
 * @param  {Object=}         options                                                                                   // 330
 * @return {!RegExp}                                                                                                   // 331
 */                                                                                                                    // 332
function tokensToRegExp (tokens, keys, options) {                                                                      // 333
  if (!isarray(keys)) {                                                                                                // 334
    options = /** @type {!Object} */ (keys || options)                                                                 // 335
    keys = []                                                                                                          // 336
  }                                                                                                                    // 337
                                                                                                                       // 338
  options = options || {}                                                                                              // 339
                                                                                                                       // 340
  var strict = options.strict                                                                                          // 341
  var end = options.end !== false                                                                                      // 342
  var route = ''                                                                                                       // 343
                                                                                                                       // 344
  // Iterate over the tokens and create our regexp string.                                                             // 345
  for (var i = 0; i < tokens.length; i++) {                                                                            // 346
    var token = tokens[i]                                                                                              // 347
                                                                                                                       // 348
    if (typeof token === 'string') {                                                                                   // 349
      route += escapeString(token)                                                                                     // 350
    } else {                                                                                                           // 351
      var prefix = escapeString(token.prefix)                                                                          // 352
      var capture = '(?:' + token.pattern + ')'                                                                        // 353
                                                                                                                       // 354
      keys.push(token)                                                                                                 // 355
                                                                                                                       // 356
      if (token.repeat) {                                                                                              // 357
        capture += '(?:' + prefix + capture + ')*'                                                                     // 358
      }                                                                                                                // 359
                                                                                                                       // 360
      if (token.optional) {                                                                                            // 361
        if (!token.partial) {                                                                                          // 362
          capture = '(?:' + prefix + '(' + capture + '))?'                                                             // 363
        } else {                                                                                                       // 364
          capture = prefix + '(' + capture + ')?'                                                                      // 365
        }                                                                                                              // 366
      } else {                                                                                                         // 367
        capture = prefix + '(' + capture + ')'                                                                         // 368
      }                                                                                                                // 369
                                                                                                                       // 370
      route += capture                                                                                                 // 371
    }                                                                                                                  // 372
  }                                                                                                                    // 373
                                                                                                                       // 374
  var delimiter = escapeString(options.delimiter || '/')                                                               // 375
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter                                                 // 376
                                                                                                                       // 377
  // In non-strict mode we allow a slash at the end of match. If the path to                                           // 378
  // match already ends with a slash, we remove it for consistency. The slash                                          // 379
  // is valid at the end of a path match, not in the middle. This is important                                         // 380
  // in non-ending mode, where "/test/" shouldn't match "/test//route".                                                // 381
  if (!strict) {                                                                                                       // 382
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'            // 383
  }                                                                                                                    // 384
                                                                                                                       // 385
  if (end) {                                                                                                           // 386
    route += '$'                                                                                                       // 387
  } else {                                                                                                             // 388
    // In non-ending mode, we need the capturing groups to match as much as                                            // 389
    // possible by using a positive lookahead to the end or next path segment.                                         // 390
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'                                              // 391
  }                                                                                                                    // 392
                                                                                                                       // 393
  return attachKeys(new RegExp('^' + route, flags(options)), keys)                                                     // 394
}                                                                                                                      // 395
                                                                                                                       // 396
/**                                                                                                                    // 397
 * Normalize the given path string, returning a regular expression.                                                    // 398
 *                                                                                                                     // 399
 * An empty array can be passed in for the keys, which will hold the                                                   // 400
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will                                           // 401
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.                                         // 402
 *                                                                                                                     // 403
 * @param  {(string|RegExp|Array)} path                                                                                // 404
 * @param  {(Array|Object)=}       keys                                                                                // 405
 * @param  {Object=}               options                                                                             // 406
 * @return {!RegExp}                                                                                                   // 407
 */                                                                                                                    // 408
function pathToRegexp (path, keys, options) {                                                                          // 409
  if (!isarray(keys)) {                                                                                                // 410
    options = /** @type {!Object} */ (keys || options)                                                                 // 411
    keys = []                                                                                                          // 412
  }                                                                                                                    // 413
                                                                                                                       // 414
  options = options || {}                                                                                              // 415
                                                                                                                       // 416
  if (path instanceof RegExp) {                                                                                        // 417
    return regexpToRegexp(path, /** @type {!Array} */ (keys))                                                          // 418
  }                                                                                                                    // 419
                                                                                                                       // 420
  if (isarray(path)) {                                                                                                 // 421
    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)                          // 422
  }                                                                                                                    // 423
                                                                                                                       // 424
  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)                           // 425
}                                                                                                                      // 426
                                                                                                                       // 427
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"isarray":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/isarray/package.json                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "isarray";                                                                                              // 1
exports.version = "0.0.1";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/isarray/index.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = Array.isArray || function (arr) {                                                                     // 1
  return Object.prototype.toString.call(arr) == '[object Array]';                                                      // 2
};                                                                                                                     // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"hoist-non-react-statics":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/hoist-non-react-statics/package.json                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "hoist-non-react-statics";                                                                              // 1
exports.version = "2.3.1";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/hoist-non-react-statics/index.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright 2015, Yahoo! Inc.                                                                                         // 2
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.                         // 3
 */                                                                                                                    // 4
'use strict';                                                                                                          // 5
                                                                                                                       // 6
var REACT_STATICS = {                                                                                                  // 7
    childContextTypes: true,                                                                                           // 8
    contextTypes: true,                                                                                                // 9
    defaultProps: true,                                                                                                // 10
    displayName: true,                                                                                                 // 11
    getDefaultProps: true,                                                                                             // 12
    mixins: true,                                                                                                      // 13
    propTypes: true,                                                                                                   // 14
    type: true                                                                                                         // 15
};                                                                                                                     // 16
                                                                                                                       // 17
var KNOWN_STATICS = {                                                                                                  // 18
  name: true,                                                                                                          // 19
  length: true,                                                                                                        // 20
  prototype: true,                                                                                                     // 21
  caller: true,                                                                                                        // 22
  callee: true,                                                                                                        // 23
  arguments: true,                                                                                                     // 24
  arity: true                                                                                                          // 25
};                                                                                                                     // 26
                                                                                                                       // 27
var defineProperty = Object.defineProperty;                                                                            // 28
var getOwnPropertyNames = Object.getOwnPropertyNames;                                                                  // 29
var getOwnPropertySymbols = Object.getOwnPropertySymbols;                                                              // 30
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;                                                        // 31
var getPrototypeOf = Object.getPrototypeOf;                                                                            // 32
var objectPrototype = getPrototypeOf && getPrototypeOf(Object);                                                        // 33
                                                                                                                       // 34
module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {                          // 35
    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components                            // 36
                                                                                                                       // 37
        if (objectPrototype) {                                                                                         // 38
            var inheritedComponent = getPrototypeOf(sourceComponent);                                                  // 39
            if (inheritedComponent && inheritedComponent !== objectPrototype) {                                        // 40
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);                                  // 41
            }                                                                                                          // 42
        }                                                                                                              // 43
                                                                                                                       // 44
        var keys = getOwnPropertyNames(sourceComponent);                                                               // 45
                                                                                                                       // 46
        if (getOwnPropertySymbols) {                                                                                   // 47
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));                                                // 48
        }                                                                                                              // 49
                                                                                                                       // 50
        for (var i = 0; i < keys.length; ++i) {                                                                        // 51
            var key = keys[i];                                                                                         // 52
            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {                       // 53
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);                                       // 54
                try { // Avoid failures from read-only properties                                                      // 55
                    defineProperty(targetComponent, key, descriptor);                                                  // 56
                } catch (e) {}                                                                                         // 57
            }                                                                                                          // 58
        }                                                                                                              // 59
                                                                                                                       // 60
        return targetComponent;                                                                                        // 61
    }                                                                                                                  // 62
                                                                                                                       // 63
    return targetComponent;                                                                                            // 64
};                                                                                                                     // 65
                                                                                                                       // 66
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"react-redux":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/package.json                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "react-redux";                                                                                          // 1
exports.version = "5.0.6";                                                                                             // 2
exports.main = "./lib/index.js";                                                                                       // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"index.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/lib/index.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.connect = exports.connectAdvanced = exports.createProvider = exports.Provider = undefined;                     // 4
                                                                                                                       // 5
var _Provider = require('./components/Provider');                                                                      // 6
                                                                                                                       // 7
var _Provider2 = _interopRequireDefault(_Provider);                                                                    // 8
                                                                                                                       // 9
var _connectAdvanced = require('./components/connectAdvanced');                                                        // 10
                                                                                                                       // 11
var _connectAdvanced2 = _interopRequireDefault(_connectAdvanced);                                                      // 12
                                                                                                                       // 13
var _connect = require('./connect/connect');                                                                           // 14
                                                                                                                       // 15
var _connect2 = _interopRequireDefault(_connect);                                                                      // 16
                                                                                                                       // 17
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 18
                                                                                                                       // 19
exports.Provider = _Provider2.default;                                                                                 // 20
exports.createProvider = _Provider.createProvider;                                                                     // 21
exports.connectAdvanced = _connectAdvanced2.default;                                                                   // 22
exports.connect = _connect2.default;                                                                                   // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"components":{"Provider.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/lib/components/Provider.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.createProvider = createProvider;                                                                               // 4
                                                                                                                       // 5
var _react = require('react');                                                                                         // 6
                                                                                                                       // 7
var _propTypes = require('prop-types');                                                                                // 8
                                                                                                                       // 9
var _propTypes2 = _interopRequireDefault(_propTypes);                                                                  // 10
                                                                                                                       // 11
var _PropTypes = require('../utils/PropTypes');                                                                        // 12
                                                                                                                       // 13
var _warning = require('../utils/warning');                                                                            // 14
                                                                                                                       // 15
var _warning2 = _interopRequireDefault(_warning);                                                                      // 16
                                                                                                                       // 17
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 18
                                                                                                                       // 19
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 21
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
                                                                                                                       // 23
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
                                                                                                                       // 25
var didWarnAboutReceivingStore = false;                                                                                // 26
function warnAboutReceivingStore() {                                                                                   // 27
  if (didWarnAboutReceivingStore) {                                                                                    // 28
    return;                                                                                                            // 29
  }                                                                                                                    // 30
  didWarnAboutReceivingStore = true;                                                                                   // 31
                                                                                                                       // 32
  (0, _warning2.default)('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
}                                                                                                                      // 34
                                                                                                                       // 35
function createProvider() {                                                                                            // 36
  var _Provider$childContex;                                                                                           // 37
                                                                                                                       // 38
  var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';                          // 39
  var subKey = arguments[1];                                                                                           // 40
                                                                                                                       // 41
  var subscriptionKey = subKey || storeKey + 'Subscription';                                                           // 42
                                                                                                                       // 43
  var Provider = function (_Component) {                                                                               // 44
    _inherits(Provider, _Component);                                                                                   // 45
                                                                                                                       // 46
    Provider.prototype.getChildContext = function getChildContext() {                                                  // 47
      var _ref;                                                                                                        // 48
                                                                                                                       // 49
      return _ref = {}, _ref[storeKey] = this[storeKey], _ref[subscriptionKey] = null, _ref;                           // 50
    };                                                                                                                 // 51
                                                                                                                       // 52
    function Provider(props, context) {                                                                                // 53
      _classCallCheck(this, Provider);                                                                                 // 54
                                                                                                                       // 55
      var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));                             // 56
                                                                                                                       // 57
      _this[storeKey] = props.store;                                                                                   // 58
      return _this;                                                                                                    // 59
    }                                                                                                                  // 60
                                                                                                                       // 61
    Provider.prototype.render = function render() {                                                                    // 62
      return _react.Children.only(this.props.children);                                                                // 63
    };                                                                                                                 // 64
                                                                                                                       // 65
    return Provider;                                                                                                   // 66
  }(_react.Component);                                                                                                 // 67
                                                                                                                       // 68
  if (process.env.NODE_ENV !== 'production') {                                                                         // 69
    Provider.prototype.componentWillReceiveProps = function (nextProps) {                                              // 70
      if (this[storeKey] !== nextProps.store) {                                                                        // 71
        warnAboutReceivingStore();                                                                                     // 72
      }                                                                                                                // 73
    };                                                                                                                 // 74
  }                                                                                                                    // 75
                                                                                                                       // 76
  Provider.propTypes = {                                                                                               // 77
    store: _PropTypes.storeShape.isRequired,                                                                           // 78
    children: _propTypes2.default.element.isRequired                                                                   // 79
  };                                                                                                                   // 80
  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[storeKey] = _PropTypes.storeShape.isRequired, _Provider$childContex[subscriptionKey] = _PropTypes.subscriptionShape, _Provider$childContex);
                                                                                                                       // 82
  return Provider;                                                                                                     // 83
}                                                                                                                      // 84
                                                                                                                       // 85
exports.default = createProvider();                                                                                    // 86
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"connectAdvanced.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/lib/components/connectAdvanced.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 6
exports.default = connectAdvanced;                                                                                     // 7
                                                                                                                       // 8
var _hoistNonReactStatics = require('hoist-non-react-statics');                                                        // 9
                                                                                                                       // 10
var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);                                            // 11
                                                                                                                       // 12
var _invariant = require('invariant');                                                                                 // 13
                                                                                                                       // 14
var _invariant2 = _interopRequireDefault(_invariant);                                                                  // 15
                                                                                                                       // 16
var _react = require('react');                                                                                         // 17
                                                                                                                       // 18
var _Subscription = require('../utils/Subscription');                                                                  // 19
                                                                                                                       // 20
var _Subscription2 = _interopRequireDefault(_Subscription);                                                            // 21
                                                                                                                       // 22
var _PropTypes = require('../utils/PropTypes');                                                                        // 23
                                                                                                                       // 24
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 25
                                                                                                                       // 26
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 28
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
                                                                                                                       // 30
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
                                                                                                                       // 32
function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
                                                                                                                       // 34
var hotReloadingVersion = 0;                                                                                           // 35
var dummyState = {};                                                                                                   // 36
function noop() {}                                                                                                     // 37
function makeSelectorStateful(sourceSelector, store) {                                                                 // 38
  // wrap the selector in an object that tracks its results between runs.                                              // 39
  var selector = {                                                                                                     // 40
    run: function runComponentSelector(props) {                                                                        // 41
      try {                                                                                                            // 42
        var nextProps = sourceSelector(store.getState(), props);                                                       // 43
        if (nextProps !== selector.props || selector.error) {                                                          // 44
          selector.shouldComponentUpdate = true;                                                                       // 45
          selector.props = nextProps;                                                                                  // 46
          selector.error = null;                                                                                       // 47
        }                                                                                                              // 48
      } catch (error) {                                                                                                // 49
        selector.shouldComponentUpdate = true;                                                                         // 50
        selector.error = error;                                                                                        // 51
      }                                                                                                                // 52
    }                                                                                                                  // 53
  };                                                                                                                   // 54
                                                                                                                       // 55
  return selector;                                                                                                     // 56
}                                                                                                                      // 57
                                                                                                                       // 58
function connectAdvanced(                                                                                              // 59
/*                                                                                                                     // 60
  selectorFactory is a func that is responsible for returning the selector function used to                            // 61
  compute new props from state, props, and dispatch. For example:                                                      // 62
     export default connectAdvanced((dispatch, options) => (state, props) => ({                                        // 63
      thing: state.things[props.thingId],                                                                              // 64
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),                                  // 65
    }))(YourComponent)                                                                                                 // 66
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators                          // 67
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to                        // 68
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.                            // 69
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound                        // 70
  props. Do not use connectAdvanced directly without memoizing results between calls to your                           // 71
  selector, otherwise the Connect component will re-render on every state or props change.                             // 72
*/                                                                                                                     // 73
selectorFactory) {                                                                                                     // 74
  var _contextTypes, _childContextTypes;                                                                               // 75
                                                                                                                       // 76
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},                                   // 77
      _ref$getDisplayName = _ref.getDisplayName,                                                                       // 78
      getDisplayName = _ref$getDisplayName === undefined ? function (name) {                                           // 79
    return 'ConnectAdvanced(' + name + ')';                                                                            // 80
  } : _ref$getDisplayName,                                                                                             // 81
      _ref$methodName = _ref.methodName,                                                                               // 82
      methodName = _ref$methodName === undefined ? 'connectAdvanced' : _ref$methodName,                                // 83
      _ref$renderCountProp = _ref.renderCountProp,                                                                     // 84
      renderCountProp = _ref$renderCountProp === undefined ? undefined : _ref$renderCountProp,                         // 85
      _ref$shouldHandleStat = _ref.shouldHandleStateChanges,                                                           // 86
      shouldHandleStateChanges = _ref$shouldHandleStat === undefined ? true : _ref$shouldHandleStat,                   // 87
      _ref$storeKey = _ref.storeKey,                                                                                   // 88
      storeKey = _ref$storeKey === undefined ? 'store' : _ref$storeKey,                                                // 89
      _ref$withRef = _ref.withRef,                                                                                     // 90
      withRef = _ref$withRef === undefined ? false : _ref$withRef,                                                     // 91
      connectOptions = _objectWithoutProperties(_ref, ['getDisplayName', 'methodName', 'renderCountProp', 'shouldHandleStateChanges', 'storeKey', 'withRef']);
                                                                                                                       // 93
  var subscriptionKey = storeKey + 'Subscription';                                                                     // 94
  var version = hotReloadingVersion++;                                                                                 // 95
                                                                                                                       // 96
  var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = _PropTypes.storeShape, _contextTypes[subscriptionKey] = _PropTypes.subscriptionShape, _contextTypes);
  var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = _PropTypes.subscriptionShape, _childContextTypes);
                                                                                                                       // 99
  return function wrapWithConnect(WrappedComponent) {                                                                  // 100
    (0, _invariant2.default)(typeof WrappedComponent == 'function', 'You must pass a component to the function returned by ' + ('connect. Instead received ' + JSON.stringify(WrappedComponent)));
                                                                                                                       // 102
    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';                   // 103
                                                                                                                       // 104
    var displayName = getDisplayName(wrappedComponentName);                                                            // 105
                                                                                                                       // 106
    var selectorFactoryOptions = _extends({}, connectOptions, {                                                        // 107
      getDisplayName: getDisplayName,                                                                                  // 108
      methodName: methodName,                                                                                          // 109
      renderCountProp: renderCountProp,                                                                                // 110
      shouldHandleStateChanges: shouldHandleStateChanges,                                                              // 111
      storeKey: storeKey,                                                                                              // 112
      withRef: withRef,                                                                                                // 113
      displayName: displayName,                                                                                        // 114
      wrappedComponentName: wrappedComponentName,                                                                      // 115
      WrappedComponent: WrappedComponent                                                                               // 116
    });                                                                                                                // 117
                                                                                                                       // 118
    var Connect = function (_Component) {                                                                              // 119
      _inherits(Connect, _Component);                                                                                  // 120
                                                                                                                       // 121
      function Connect(props, context) {                                                                               // 122
        _classCallCheck(this, Connect);                                                                                // 123
                                                                                                                       // 124
        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));                           // 125
                                                                                                                       // 126
        _this.version = version;                                                                                       // 127
        _this.state = {};                                                                                              // 128
        _this.renderCount = 0;                                                                                         // 129
        _this.store = props[storeKey] || context[storeKey];                                                            // 130
        _this.propsMode = Boolean(props[storeKey]);                                                                    // 131
        _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);                                               // 132
                                                                                                                       // 133
        (0, _invariant2.default)(_this.store, 'Could not find "' + storeKey + '" in either the context or props of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + ('or explicitly pass "' + storeKey + '" as a prop to "' + displayName + '".'));
                                                                                                                       // 135
        _this.initSelector();                                                                                          // 136
        _this.initSubscription();                                                                                      // 137
        return _this;                                                                                                  // 138
      }                                                                                                                // 139
                                                                                                                       // 140
      Connect.prototype.getChildContext = function getChildContext() {                                                 // 141
        var _ref2;                                                                                                     // 142
                                                                                                                       // 143
        // If this component received store from props, its subscription should be transparent                         // 144
        // to any descendants receiving store+subscription from context; it passes along                               // 145
        // subscription passed to it. Otherwise, it shadows the parent subscription, which allows                      // 146
        // Connect to control ordering of notifications to flow top-down.                                              // 147
        var subscription = this.propsMode ? null : this.subscription;                                                  // 148
        return _ref2 = {}, _ref2[subscriptionKey] = subscription || this.context[subscriptionKey], _ref2;              // 149
      };                                                                                                               // 150
                                                                                                                       // 151
      Connect.prototype.componentDidMount = function componentDidMount() {                                             // 152
        if (!shouldHandleStateChanges) return;                                                                         // 153
                                                                                                                       // 154
        // componentWillMount fires during server side rendering, but componentDidMount and                            // 155
        // componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.                      // 156
        // Otherwise, unsubscription would never take place during SSR, causing a memory leak.                         // 157
        // To handle the case where a child component may have triggered a state change by                             // 158
        // dispatching an action in its componentWillMount, we have to re-run the select and maybe                     // 159
        // re-render.                                                                                                  // 160
        this.subscription.trySubscribe();                                                                              // 161
        this.selector.run(this.props);                                                                                 // 162
        if (this.selector.shouldComponentUpdate) this.forceUpdate();                                                   // 163
      };                                                                                                               // 164
                                                                                                                       // 165
      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {                    // 166
        this.selector.run(nextProps);                                                                                  // 167
      };                                                                                                               // 168
                                                                                                                       // 169
      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {                                     // 170
        return this.selector.shouldComponentUpdate;                                                                    // 171
      };                                                                                                               // 172
                                                                                                                       // 173
      Connect.prototype.componentWillUnmount = function componentWillUnmount() {                                       // 174
        if (this.subscription) this.subscription.tryUnsubscribe();                                                     // 175
        this.subscription = null;                                                                                      // 176
        this.notifyNestedSubs = noop;                                                                                  // 177
        this.store = null;                                                                                             // 178
        this.selector.run = noop;                                                                                      // 179
        this.selector.shouldComponentUpdate = false;                                                                   // 180
      };                                                                                                               // 181
                                                                                                                       // 182
      Connect.prototype.getWrappedInstance = function getWrappedInstance() {                                           // 183
        (0, _invariant2.default)(withRef, 'To access the wrapped instance, you need to specify ' + ('{ withRef: true } in the options argument of the ' + methodName + '() call.'));
        return this.wrappedInstance;                                                                                   // 185
      };                                                                                                               // 186
                                                                                                                       // 187
      Connect.prototype.setWrappedInstance = function setWrappedInstance(ref) {                                        // 188
        this.wrappedInstance = ref;                                                                                    // 189
      };                                                                                                               // 190
                                                                                                                       // 191
      Connect.prototype.initSelector = function initSelector() {                                                       // 192
        var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);                             // 193
        this.selector = makeSelectorStateful(sourceSelector, this.store);                                              // 194
        this.selector.run(this.props);                                                                                 // 195
      };                                                                                                               // 196
                                                                                                                       // 197
      Connect.prototype.initSubscription = function initSubscription() {                                               // 198
        if (!shouldHandleStateChanges) return;                                                                         // 199
                                                                                                                       // 200
        // parentSub's source should match where store came from: props vs. context. A component                       // 201
        // connected to the store via props shouldn't use subscription from context, or vice versa.                    // 202
        var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];                                 // 203
        this.subscription = new _Subscription2.default(this.store, parentSub, this.onStateChange.bind(this));          // 204
                                                                                                                       // 205
        // `notifyNestedSubs` is duplicated to handle the case where the component is  unmounted in                    // 206
        // the middle of the notification loop, where `this.subscription` will then be null. An                        // 207
        // extra null check every change can be avoided by copying the method onto `this` and then                     // 208
        // replacing it with a no-op on unmount. This can probably be avoided if Subscription's                        // 209
        // listeners logic is changed to not call listeners that have been unsubscribed in the                         // 210
        // middle of the notification loop.                                                                            // 211
        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);                            // 212
      };                                                                                                               // 213
                                                                                                                       // 214
      Connect.prototype.onStateChange = function onStateChange() {                                                     // 215
        this.selector.run(this.props);                                                                                 // 216
                                                                                                                       // 217
        if (!this.selector.shouldComponentUpdate) {                                                                    // 218
          this.notifyNestedSubs();                                                                                     // 219
        } else {                                                                                                       // 220
          this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;                                         // 221
          this.setState(dummyState);                                                                                   // 222
        }                                                                                                              // 223
      };                                                                                                               // 224
                                                                                                                       // 225
      Connect.prototype.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {       // 226
        // `componentDidUpdate` is conditionally implemented when `onStateChange` determines it                        // 227
        // needs to notify nested subs. Once called, it unimplements itself until further state                        // 228
        // changes occur. Doing it this way vs having a permanent `componentDidUpdate` that does                       // 229
        // a boolean check every time avoids an extra method call most of the time, resulting                          // 230
        // in some perf boost.                                                                                         // 231
        this.componentDidUpdate = undefined;                                                                           // 232
        this.notifyNestedSubs();                                                                                       // 233
      };                                                                                                               // 234
                                                                                                                       // 235
      Connect.prototype.isSubscribed = function isSubscribed() {                                                       // 236
        return Boolean(this.subscription) && this.subscription.isSubscribed();                                         // 237
      };                                                                                                               // 238
                                                                                                                       // 239
      Connect.prototype.addExtraProps = function addExtraProps(props) {                                                // 240
        if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props;                      // 241
        // make a shallow copy so that fields added don't leak to the original selector.                               // 242
        // this is especially important for 'ref' since that's a reference back to the component                       // 243
        // instance. a singleton memoized selector would then be holding a reference to the                            // 244
        // instance, preventing the instance from being garbage collected, and that would be bad                       // 245
        var withExtras = _extends({}, props);                                                                          // 246
        if (withRef) withExtras.ref = this.setWrappedInstance;                                                         // 247
        if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;                                         // 248
        if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;                      // 249
        return withExtras;                                                                                             // 250
      };                                                                                                               // 251
                                                                                                                       // 252
      Connect.prototype.render = function render() {                                                                   // 253
        var selector = this.selector;                                                                                  // 254
        selector.shouldComponentUpdate = false;                                                                        // 255
                                                                                                                       // 256
        if (selector.error) {                                                                                          // 257
          throw selector.error;                                                                                        // 258
        } else {                                                                                                       // 259
          return (0, _react.createElement)(WrappedComponent, this.addExtraProps(selector.props));                      // 260
        }                                                                                                              // 261
      };                                                                                                               // 262
                                                                                                                       // 263
      return Connect;                                                                                                  // 264
    }(_react.Component);                                                                                               // 265
                                                                                                                       // 266
    Connect.WrappedComponent = WrappedComponent;                                                                       // 267
    Connect.displayName = displayName;                                                                                 // 268
    Connect.childContextTypes = childContextTypes;                                                                     // 269
    Connect.contextTypes = contextTypes;                                                                               // 270
    Connect.propTypes = contextTypes;                                                                                  // 271
                                                                                                                       // 272
    if (process.env.NODE_ENV !== 'production') {                                                                       // 273
      Connect.prototype.componentWillUpdate = function componentWillUpdate() {                                         // 274
        var _this2 = this;                                                                                             // 275
                                                                                                                       // 276
        // We are hot reloading!                                                                                       // 277
        if (this.version !== version) {                                                                                // 278
          this.version = version;                                                                                      // 279
          this.initSelector();                                                                                         // 280
                                                                                                                       // 281
          // If any connected descendants don't hot reload (and resubscribe in the process), their                     // 282
          // listeners will be lost when we unsubscribe. Unfortunately, by copying over all                            // 283
          // listeners, this does mean that the old versions of connected descendants will still be                    // 284
          // notified of state changes; however, their onStateChange function is a no-op so this                       // 285
          // isn't a huge deal.                                                                                        // 286
          var oldListeners = [];                                                                                       // 287
                                                                                                                       // 288
          if (this.subscription) {                                                                                     // 289
            oldListeners = this.subscription.listeners.get();                                                          // 290
            this.subscription.tryUnsubscribe();                                                                        // 291
          }                                                                                                            // 292
          this.initSubscription();                                                                                     // 293
          if (shouldHandleStateChanges) {                                                                              // 294
            this.subscription.trySubscribe();                                                                          // 295
            oldListeners.forEach(function (listener) {                                                                 // 296
              return _this2.subscription.listeners.subscribe(listener);                                                // 297
            });                                                                                                        // 298
          }                                                                                                            // 299
        }                                                                                                              // 300
      };                                                                                                               // 301
    }                                                                                                                  // 302
                                                                                                                       // 303
    return (0, _hoistNonReactStatics2.default)(Connect, WrappedComponent);                                             // 304
  };                                                                                                                   // 305
}                                                                                                                      // 306
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"utils":{"PropTypes.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/lib/utils/PropTypes.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.storeShape = exports.subscriptionShape = undefined;                                                            // 4
                                                                                                                       // 5
var _propTypes = require('prop-types');                                                                                // 6
                                                                                                                       // 7
var _propTypes2 = _interopRequireDefault(_propTypes);                                                                  // 8
                                                                                                                       // 9
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 10
                                                                                                                       // 11
var subscriptionShape = exports.subscriptionShape = _propTypes2.default.shape({                                        // 12
  trySubscribe: _propTypes2.default.func.isRequired,                                                                   // 13
  tryUnsubscribe: _propTypes2.default.func.isRequired,                                                                 // 14
  notifyNestedSubs: _propTypes2.default.func.isRequired,                                                               // 15
  isSubscribed: _propTypes2.default.func.isRequired                                                                    // 16
});                                                                                                                    // 17
                                                                                                                       // 18
var storeShape = exports.storeShape = _propTypes2.default.shape({                                                      // 19
  subscribe: _propTypes2.default.func.isRequired,                                                                      // 20
  dispatch: _propTypes2.default.func.isRequired,                                                                       // 21
  getState: _propTypes2.default.func.isRequired                                                                        // 22
});                                                                                                                    // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"warning.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/lib/utils/warning.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.default = warning;                                                                                             // 4
/**                                                                                                                    // 5
 * Prints a warning in the console if it exists.                                                                       // 6
 *                                                                                                                     // 7
 * @param {String} message The warning message.                                                                        // 8
 * @returns {void}                                                                                                     // 9
 */                                                                                                                    // 10
function warning(message) {                                                                                            // 11
  /* eslint-disable no-console */                                                                                      // 12
  if (typeof console !== 'undefined' && typeof console.error === 'function') {                                         // 13
    console.error(message);                                                                                            // 14
  }                                                                                                                    // 15
  /* eslint-enable no-console */                                                                                       // 16
  try {                                                                                                                // 17
    // This error was thrown as a convenience so that if you enable                                                    // 18
    // "break on all exceptions" in your console,                                                                      // 19
    // it would pause the execution at this line.                                                                      // 20
    throw new Error(message);                                                                                          // 21
    /* eslint-disable no-empty */                                                                                      // 22
  } catch (e) {}                                                                                                       // 23
  /* eslint-enable no-empty */                                                                                         // 24
}                                                                                                                      // 25
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Subscription.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/lib/utils/Subscription.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
                                                                                                                       // 6
// encapsulates the subscription logic for connecting a component to the redux store, as                               // 7
// well as nesting subscriptions of descendant components, so that we can ensure the                                   // 8
// ancestor components re-render before descendants                                                                    // 9
                                                                                                                       // 10
var CLEARED = null;                                                                                                    // 11
var nullListeners = {                                                                                                  // 12
  notify: function notify() {}                                                                                         // 13
};                                                                                                                     // 14
                                                                                                                       // 15
function createListenerCollection() {                                                                                  // 16
  // the current/next pattern is copied from redux's createStore code.                                                 // 17
  // TODO: refactor+expose that code to be reusable here?                                                              // 18
  var current = [];                                                                                                    // 19
  var next = [];                                                                                                       // 20
                                                                                                                       // 21
  return {                                                                                                             // 22
    clear: function clear() {                                                                                          // 23
      next = CLEARED;                                                                                                  // 24
      current = CLEARED;                                                                                               // 25
    },                                                                                                                 // 26
    notify: function notify() {                                                                                        // 27
      var listeners = current = next;                                                                                  // 28
      for (var i = 0; i < listeners.length; i++) {                                                                     // 29
        listeners[i]();                                                                                                // 30
      }                                                                                                                // 31
    },                                                                                                                 // 32
    get: function get() {                                                                                              // 33
      return next;                                                                                                     // 34
    },                                                                                                                 // 35
    subscribe: function subscribe(listener) {                                                                          // 36
      var isSubscribed = true;                                                                                         // 37
      if (next === current) next = current.slice();                                                                    // 38
      next.push(listener);                                                                                             // 39
                                                                                                                       // 40
      return function unsubscribe() {                                                                                  // 41
        if (!isSubscribed || current === CLEARED) return;                                                              // 42
        isSubscribed = false;                                                                                          // 43
                                                                                                                       // 44
        if (next === current) next = current.slice();                                                                  // 45
        next.splice(next.indexOf(listener), 1);                                                                        // 46
      };                                                                                                               // 47
    }                                                                                                                  // 48
  };                                                                                                                   // 49
}                                                                                                                      // 50
                                                                                                                       // 51
var Subscription = function () {                                                                                       // 52
  function Subscription(store, parentSub, onStateChange) {                                                             // 53
    _classCallCheck(this, Subscription);                                                                               // 54
                                                                                                                       // 55
    this.store = store;                                                                                                // 56
    this.parentSub = parentSub;                                                                                        // 57
    this.onStateChange = onStateChange;                                                                                // 58
    this.unsubscribe = null;                                                                                           // 59
    this.listeners = nullListeners;                                                                                    // 60
  }                                                                                                                    // 61
                                                                                                                       // 62
  Subscription.prototype.addNestedSub = function addNestedSub(listener) {                                              // 63
    this.trySubscribe();                                                                                               // 64
    return this.listeners.subscribe(listener);                                                                         // 65
  };                                                                                                                   // 66
                                                                                                                       // 67
  Subscription.prototype.notifyNestedSubs = function notifyNestedSubs() {                                              // 68
    this.listeners.notify();                                                                                           // 69
  };                                                                                                                   // 70
                                                                                                                       // 71
  Subscription.prototype.isSubscribed = function isSubscribed() {                                                      // 72
    return Boolean(this.unsubscribe);                                                                                  // 73
  };                                                                                                                   // 74
                                                                                                                       // 75
  Subscription.prototype.trySubscribe = function trySubscribe() {                                                      // 76
    if (!this.unsubscribe) {                                                                                           // 77
      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);
                                                                                                                       // 79
      this.listeners = createListenerCollection();                                                                     // 80
    }                                                                                                                  // 81
  };                                                                                                                   // 82
                                                                                                                       // 83
  Subscription.prototype.tryUnsubscribe = function tryUnsubscribe() {                                                  // 84
    if (this.unsubscribe) {                                                                                            // 85
      this.unsubscribe();                                                                                              // 86
      this.unsubscribe = null;                                                                                         // 87
      this.listeners.clear();                                                                                          // 88
      this.listeners = nullListeners;                                                                                  // 89
    }                                                                                                                  // 90
  };                                                                                                                   // 91
                                                                                                                       // 92
  return Subscription;                                                                                                 // 93
}();                                                                                                                   // 94
                                                                                                                       // 95
exports.default = Subscription;                                                                                        // 96
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"shallowEqual.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/lib/utils/shallowEqual.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.default = shallowEqual;                                                                                        // 4
var hasOwn = Object.prototype.hasOwnProperty;                                                                          // 5
                                                                                                                       // 6
function is(x, y) {                                                                                                    // 7
  if (x === y) {                                                                                                       // 8
    return x !== 0 || y !== 0 || 1 / x === 1 / y;                                                                      // 9
  } else {                                                                                                             // 10
    return x !== x && y !== y;                                                                                         // 11
  }                                                                                                                    // 12
}                                                                                                                      // 13
                                                                                                                       // 14
function shallowEqual(objA, objB) {                                                                                    // 15
  if (is(objA, objB)) return true;                                                                                     // 16
                                                                                                                       // 17
  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {                        // 18
    return false;                                                                                                      // 19
  }                                                                                                                    // 20
                                                                                                                       // 21
  var keysA = Object.keys(objA);                                                                                       // 22
  var keysB = Object.keys(objB);                                                                                       // 23
                                                                                                                       // 24
  if (keysA.length !== keysB.length) return false;                                                                     // 25
                                                                                                                       // 26
  for (var i = 0; i < keysA.length; i++) {                                                                             // 27
    if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {                                         // 28
      return false;                                                                                                    // 29
    }                                                                                                                  // 30
  }                                                                                                                    // 31
                                                                                                                       // 32
  return true;                                                                                                         // 33
}                                                                                                                      // 34
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"verifyPlainObject.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/lib/utils/verifyPlainObject.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.default = verifyPlainObject;                                                                                   // 4
                                                                                                                       // 5
var _isPlainObject = require('lodash/isPlainObject');                                                                  // 6
                                                                                                                       // 7
var _isPlainObject2 = _interopRequireDefault(_isPlainObject);                                                          // 8
                                                                                                                       // 9
var _warning = require('./warning');                                                                                   // 10
                                                                                                                       // 11
var _warning2 = _interopRequireDefault(_warning);                                                                      // 12
                                                                                                                       // 13
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 14
                                                                                                                       // 15
function verifyPlainObject(value, displayName, methodName) {                                                           // 16
  if (!(0, _isPlainObject2.default)(value)) {                                                                          // 17
    (0, _warning2.default)(methodName + '() in ' + displayName + ' must return a plain object. Instead received ' + value + '.');
  }                                                                                                                    // 19
}                                                                                                                      // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"connect":{"connect.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/lib/connect/connect.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 6
exports.createConnect = createConnect;                                                                                 // 7
                                                                                                                       // 8
var _connectAdvanced = require('../components/connectAdvanced');                                                       // 9
                                                                                                                       // 10
var _connectAdvanced2 = _interopRequireDefault(_connectAdvanced);                                                      // 11
                                                                                                                       // 12
var _shallowEqual = require('../utils/shallowEqual');                                                                  // 13
                                                                                                                       // 14
var _shallowEqual2 = _interopRequireDefault(_shallowEqual);                                                            // 15
                                                                                                                       // 16
var _mapDispatchToProps = require('./mapDispatchToProps');                                                             // 17
                                                                                                                       // 18
var _mapDispatchToProps2 = _interopRequireDefault(_mapDispatchToProps);                                                // 19
                                                                                                                       // 20
var _mapStateToProps = require('./mapStateToProps');                                                                   // 21
                                                                                                                       // 22
var _mapStateToProps2 = _interopRequireDefault(_mapStateToProps);                                                      // 23
                                                                                                                       // 24
var _mergeProps = require('./mergeProps');                                                                             // 25
                                                                                                                       // 26
var _mergeProps2 = _interopRequireDefault(_mergeProps);                                                                // 27
                                                                                                                       // 28
var _selectorFactory = require('./selectorFactory');                                                                   // 29
                                                                                                                       // 30
var _selectorFactory2 = _interopRequireDefault(_selectorFactory);                                                      // 31
                                                                                                                       // 32
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 33
                                                                                                                       // 34
function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
                                                                                                                       // 36
/*                                                                                                                     // 37
  connect is a facade over connectAdvanced. It turns its args into a compatible                                        // 38
  selectorFactory, which has the signature:                                                                            // 39
                                                                                                                       // 40
    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps                                                 // 41
                                                                                                                       // 42
  connect passes its args to connectAdvanced as options, which will in turn pass them to                               // 43
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.                              // 44
                                                                                                                       // 45
  selectorFactory returns a final props selector from its mapStateToProps,                                             // 46
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,                               // 47
  mergePropsFactories, and pure args.                                                                                  // 48
                                                                                                                       // 49
  The resulting final props selector is called by the Connect component instance whenever                              // 50
  it receives new props or store state.                                                                                // 51
 */                                                                                                                    // 52
                                                                                                                       // 53
function match(arg, factories, name) {                                                                                 // 54
  for (var i = factories.length - 1; i >= 0; i--) {                                                                    // 55
    var result = factories[i](arg);                                                                                    // 56
    if (result) return result;                                                                                         // 57
  }                                                                                                                    // 58
                                                                                                                       // 59
  return function (dispatch, options) {                                                                                // 60
    throw new Error('Invalid value of type ' + typeof arg + ' for ' + name + ' argument when connecting component ' + options.wrappedComponentName + '.');
  };                                                                                                                   // 62
}                                                                                                                      // 63
                                                                                                                       // 64
function strictEqual(a, b) {                                                                                           // 65
  return a === b;                                                                                                      // 66
}                                                                                                                      // 67
                                                                                                                       // 68
// createConnect with default args builds the 'official' connect behavior. Calling it with                             // 69
// different options opens up some testing and extensibility scenarios                                                 // 70
function createConnect() {                                                                                             // 71
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},                                   // 72
      _ref$connectHOC = _ref.connectHOC,                                                                               // 73
      connectHOC = _ref$connectHOC === undefined ? _connectAdvanced2.default : _ref$connectHOC,                        // 74
      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,                                                           // 75
      mapStateToPropsFactories = _ref$mapStateToPropsF === undefined ? _mapStateToProps2.default : _ref$mapStateToPropsF,
      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,                                                        // 77
      mapDispatchToPropsFactories = _ref$mapDispatchToPro === undefined ? _mapDispatchToProps2.default : _ref$mapDispatchToPro,
      _ref$mergePropsFactor = _ref.mergePropsFactories,                                                                // 79
      mergePropsFactories = _ref$mergePropsFactor === undefined ? _mergeProps2.default : _ref$mergePropsFactor,        // 80
      _ref$selectorFactory = _ref.selectorFactory,                                                                     // 81
      selectorFactory = _ref$selectorFactory === undefined ? _selectorFactory2.default : _ref$selectorFactory;         // 82
                                                                                                                       // 83
  return function connect(mapStateToProps, mapDispatchToProps, mergeProps) {                                           // 84
    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},                                // 85
        _ref2$pure = _ref2.pure,                                                                                       // 86
        pure = _ref2$pure === undefined ? true : _ref2$pure,                                                           // 87
        _ref2$areStatesEqual = _ref2.areStatesEqual,                                                                   // 88
        areStatesEqual = _ref2$areStatesEqual === undefined ? strictEqual : _ref2$areStatesEqual,                      // 89
        _ref2$areOwnPropsEqua = _ref2.areOwnPropsEqual,                                                                // 90
        areOwnPropsEqual = _ref2$areOwnPropsEqua === undefined ? _shallowEqual2.default : _ref2$areOwnPropsEqua,       // 91
        _ref2$areStatePropsEq = _ref2.areStatePropsEqual,                                                              // 92
        areStatePropsEqual = _ref2$areStatePropsEq === undefined ? _shallowEqual2.default : _ref2$areStatePropsEq,     // 93
        _ref2$areMergedPropsE = _ref2.areMergedPropsEqual,                                                             // 94
        areMergedPropsEqual = _ref2$areMergedPropsE === undefined ? _shallowEqual2.default : _ref2$areMergedPropsE,    // 95
        extraOptions = _objectWithoutProperties(_ref2, ['pure', 'areStatesEqual', 'areOwnPropsEqual', 'areStatePropsEqual', 'areMergedPropsEqual']);
                                                                                                                       // 97
    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');                     // 98
    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');         // 99
    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');                                         // 100
                                                                                                                       // 101
    return connectHOC(selectorFactory, _extends({                                                                      // 102
      // used in error messages                                                                                        // 103
      methodName: 'connect',                                                                                           // 104
                                                                                                                       // 105
      // used to compute Connect's displayName from the wrapped component's displayName.                               // 106
      getDisplayName: function getDisplayName(name) {                                                                  // 107
        return 'Connect(' + name + ')';                                                                                // 108
      },                                                                                                               // 109
                                                                                                                       // 110
      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes                   // 111
      shouldHandleStateChanges: Boolean(mapStateToProps),                                                              // 112
                                                                                                                       // 113
      // passed through to selectorFactory                                                                             // 114
      initMapStateToProps: initMapStateToProps,                                                                        // 115
      initMapDispatchToProps: initMapDispatchToProps,                                                                  // 116
      initMergeProps: initMergeProps,                                                                                  // 117
      pure: pure,                                                                                                      // 118
      areStatesEqual: areStatesEqual,                                                                                  // 119
      areOwnPropsEqual: areOwnPropsEqual,                                                                              // 120
      areStatePropsEqual: areStatePropsEqual,                                                                          // 121
      areMergedPropsEqual: areMergedPropsEqual                                                                         // 122
                                                                                                                       // 123
    }, extraOptions));                                                                                                 // 124
  };                                                                                                                   // 125
}                                                                                                                      // 126
                                                                                                                       // 127
exports.default = createConnect();                                                                                     // 128
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mapDispatchToProps.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/lib/connect/mapDispatchToProps.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.whenMapDispatchToPropsIsFunction = whenMapDispatchToPropsIsFunction;                                           // 4
exports.whenMapDispatchToPropsIsMissing = whenMapDispatchToPropsIsMissing;                                             // 5
exports.whenMapDispatchToPropsIsObject = whenMapDispatchToPropsIsObject;                                               // 6
                                                                                                                       // 7
var _redux = require('redux');                                                                                         // 8
                                                                                                                       // 9
var _wrapMapToProps = require('./wrapMapToProps');                                                                     // 10
                                                                                                                       // 11
function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {                                                        // 12
  return typeof mapDispatchToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapDispatchToProps, 'mapDispatchToProps') : undefined;
}                                                                                                                      // 14
                                                                                                                       // 15
function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {                                                         // 16
  return !mapDispatchToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {                       // 17
    return { dispatch: dispatch };                                                                                     // 18
  }) : undefined;                                                                                                      // 19
}                                                                                                                      // 20
                                                                                                                       // 21
function whenMapDispatchToPropsIsObject(mapDispatchToProps) {                                                          // 22
  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
    return (0, _redux.bindActionCreators)(mapDispatchToProps, dispatch);                                               // 24
  }) : undefined;                                                                                                      // 25
}                                                                                                                      // 26
                                                                                                                       // 27
exports.default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"wrapMapToProps.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/lib/connect/wrapMapToProps.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.wrapMapToPropsConstant = wrapMapToPropsConstant;                                                               // 4
exports.getDependsOnOwnProps = getDependsOnOwnProps;                                                                   // 5
exports.wrapMapToPropsFunc = wrapMapToPropsFunc;                                                                       // 6
                                                                                                                       // 7
var _verifyPlainObject = require('../utils/verifyPlainObject');                                                        // 8
                                                                                                                       // 9
var _verifyPlainObject2 = _interopRequireDefault(_verifyPlainObject);                                                  // 10
                                                                                                                       // 11
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 12
                                                                                                                       // 13
function wrapMapToPropsConstant(getConstant) {                                                                         // 14
  return function initConstantSelector(dispatch, options) {                                                            // 15
    var constant = getConstant(dispatch, options);                                                                     // 16
                                                                                                                       // 17
    function constantSelector() {                                                                                      // 18
      return constant;                                                                                                 // 19
    }                                                                                                                  // 20
    constantSelector.dependsOnOwnProps = false;                                                                        // 21
    return constantSelector;                                                                                           // 22
  };                                                                                                                   // 23
}                                                                                                                      // 24
                                                                                                                       // 25
// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args                       // 26
// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine                     // 27
// whether mapToProps needs to be invoked when props have changed.                                                     // 28
//                                                                                                                     // 29
// A length of one signals that mapToProps does not depend on props from the parent component.                         // 30
// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and                         // 31
// therefore not reporting its length accurately..                                                                     // 32
function getDependsOnOwnProps(mapToProps) {                                                                            // 33
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
}                                                                                                                      // 35
                                                                                                                       // 36
// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,                                         // 37
// this function wraps mapToProps in a proxy function which does several things:                                       // 38
//                                                                                                                     // 39
//  * Detects whether the mapToProps function being called depends on props, which                                     // 40
//    is used by selectorFactory to decide if it should reinvoke on props changes.                                     // 41
//                                                                                                                     // 42
//  * On first call, handles mapToProps if returns another function, and treats that                                   // 43
//    new function as the true mapToProps for subsequent calls.                                                        // 44
//                                                                                                                     // 45
//  * On first call, verifies the first result is a plain object, in order to warn                                     // 46
//    the developer that their mapToProps function is not returning a valid result.                                    // 47
//                                                                                                                     // 48
function wrapMapToPropsFunc(mapToProps, methodName) {                                                                  // 49
  return function initProxySelector(dispatch, _ref) {                                                                  // 50
    var displayName = _ref.displayName;                                                                                // 51
                                                                                                                       // 52
    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {                                                  // 53
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    };                                                                                                                 // 55
                                                                                                                       // 56
    // allow detectFactoryAndVerify to get ownProps                                                                    // 57
    proxy.dependsOnOwnProps = true;                                                                                    // 58
                                                                                                                       // 59
    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {                                    // 60
      proxy.mapToProps = mapToProps;                                                                                   // 61
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);                                                      // 62
      var props = proxy(stateOrDispatch, ownProps);                                                                    // 63
                                                                                                                       // 64
      if (typeof props === 'function') {                                                                               // 65
        proxy.mapToProps = props;                                                                                      // 66
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);                                                         // 67
        props = proxy(stateOrDispatch, ownProps);                                                                      // 68
      }                                                                                                                // 69
                                                                                                                       // 70
      if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject2.default)(props, displayName, methodName);     // 71
                                                                                                                       // 72
      return props;                                                                                                    // 73
    };                                                                                                                 // 74
                                                                                                                       // 75
    return proxy;                                                                                                      // 76
  };                                                                                                                   // 77
}                                                                                                                      // 78
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mapStateToProps.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/lib/connect/mapStateToProps.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.whenMapStateToPropsIsFunction = whenMapStateToPropsIsFunction;                                                 // 4
exports.whenMapStateToPropsIsMissing = whenMapStateToPropsIsMissing;                                                   // 5
                                                                                                                       // 6
var _wrapMapToProps = require('./wrapMapToProps');                                                                     // 7
                                                                                                                       // 8
function whenMapStateToPropsIsFunction(mapStateToProps) {                                                              // 9
  return typeof mapStateToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapStateToProps, 'mapStateToProps') : undefined;
}                                                                                                                      // 11
                                                                                                                       // 12
function whenMapStateToPropsIsMissing(mapStateToProps) {                                                               // 13
  return !mapStateToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function () {                                  // 14
    return {};                                                                                                         // 15
  }) : undefined;                                                                                                      // 16
}                                                                                                                      // 17
                                                                                                                       // 18
exports.default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mergeProps.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/lib/connect/mergeProps.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 6
exports.defaultMergeProps = defaultMergeProps;                                                                         // 7
exports.wrapMergePropsFunc = wrapMergePropsFunc;                                                                       // 8
exports.whenMergePropsIsFunction = whenMergePropsIsFunction;                                                           // 9
exports.whenMergePropsIsOmitted = whenMergePropsIsOmitted;                                                             // 10
                                                                                                                       // 11
var _verifyPlainObject = require('../utils/verifyPlainObject');                                                        // 12
                                                                                                                       // 13
var _verifyPlainObject2 = _interopRequireDefault(_verifyPlainObject);                                                  // 14
                                                                                                                       // 15
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 16
                                                                                                                       // 17
function defaultMergeProps(stateProps, dispatchProps, ownProps) {                                                      // 18
  return _extends({}, ownProps, stateProps, dispatchProps);                                                            // 19
}                                                                                                                      // 20
                                                                                                                       // 21
function wrapMergePropsFunc(mergeProps) {                                                                              // 22
  return function initMergePropsProxy(dispatch, _ref) {                                                                // 23
    var displayName = _ref.displayName,                                                                                // 24
        pure = _ref.pure,                                                                                              // 25
        areMergedPropsEqual = _ref.areMergedPropsEqual;                                                                // 26
                                                                                                                       // 27
    var hasRunOnce = false;                                                                                            // 28
    var mergedProps = void 0;                                                                                          // 29
                                                                                                                       // 30
    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {                                             // 31
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);                                           // 32
                                                                                                                       // 33
      if (hasRunOnce) {                                                                                                // 34
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;                // 35
      } else {                                                                                                         // 36
        hasRunOnce = true;                                                                                             // 37
        mergedProps = nextMergedProps;                                                                                 // 38
                                                                                                                       // 39
        if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject2.default)(mergedProps, displayName, 'mergeProps');
      }                                                                                                                // 41
                                                                                                                       // 42
      return mergedProps;                                                                                              // 43
    };                                                                                                                 // 44
  };                                                                                                                   // 45
}                                                                                                                      // 46
                                                                                                                       // 47
function whenMergePropsIsFunction(mergeProps) {                                                                        // 48
  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;                                // 49
}                                                                                                                      // 50
                                                                                                                       // 51
function whenMergePropsIsOmitted(mergeProps) {                                                                         // 52
  return !mergeProps ? function () {                                                                                   // 53
    return defaultMergeProps;                                                                                          // 54
  } : undefined;                                                                                                       // 55
}                                                                                                                      // 56
                                                                                                                       // 57
exports.default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];                                                 // 58
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"selectorFactory.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/lib/connect/selectorFactory.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.impureFinalPropsSelectorFactory = impureFinalPropsSelectorFactory;                                             // 4
exports.pureFinalPropsSelectorFactory = pureFinalPropsSelectorFactory;                                                 // 5
exports.default = finalPropsSelectorFactory;                                                                           // 6
                                                                                                                       // 7
var _verifySubselectors = require('./verifySubselectors');                                                             // 8
                                                                                                                       // 9
var _verifySubselectors2 = _interopRequireDefault(_verifySubselectors);                                                // 10
                                                                                                                       // 11
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 12
                                                                                                                       // 13
function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
                                                                                                                       // 15
function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {                  // 16
  return function impureFinalPropsSelector(state, ownProps) {                                                          // 17
    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);             // 18
  };                                                                                                                   // 19
}                                                                                                                      // 20
                                                                                                                       // 21
function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {              // 22
  var areStatesEqual = _ref.areStatesEqual,                                                                            // 23
      areOwnPropsEqual = _ref.areOwnPropsEqual,                                                                        // 24
      areStatePropsEqual = _ref.areStatePropsEqual;                                                                    // 25
                                                                                                                       // 26
  var hasRunAtLeastOnce = false;                                                                                       // 27
  var state = void 0;                                                                                                  // 28
  var ownProps = void 0;                                                                                               // 29
  var stateProps = void 0;                                                                                             // 30
  var dispatchProps = void 0;                                                                                          // 31
  var mergedProps = void 0;                                                                                            // 32
                                                                                                                       // 33
  function handleFirstCall(firstState, firstOwnProps) {                                                                // 34
    state = firstState;                                                                                                // 35
    ownProps = firstOwnProps;                                                                                          // 36
    stateProps = mapStateToProps(state, ownProps);                                                                     // 37
    dispatchProps = mapDispatchToProps(dispatch, ownProps);                                                            // 38
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);                                                     // 39
    hasRunAtLeastOnce = true;                                                                                          // 40
    return mergedProps;                                                                                                // 41
  }                                                                                                                    // 42
                                                                                                                       // 43
  function handleNewPropsAndNewState() {                                                                               // 44
    stateProps = mapStateToProps(state, ownProps);                                                                     // 45
                                                                                                                       // 46
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);                  // 47
                                                                                                                       // 48
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);                                                     // 49
    return mergedProps;                                                                                                // 50
  }                                                                                                                    // 51
                                                                                                                       // 52
  function handleNewProps() {                                                                                          // 53
    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);                              // 54
                                                                                                                       // 55
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);                  // 56
                                                                                                                       // 57
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);                                                     // 58
    return mergedProps;                                                                                                // 59
  }                                                                                                                    // 60
                                                                                                                       // 61
  function handleNewState() {                                                                                          // 62
    var nextStateProps = mapStateToProps(state, ownProps);                                                             // 63
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);                                           // 64
    stateProps = nextStateProps;                                                                                       // 65
                                                                                                                       // 66
    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);                              // 67
                                                                                                                       // 68
    return mergedProps;                                                                                                // 69
  }                                                                                                                    // 70
                                                                                                                       // 71
  function handleSubsequentCalls(nextState, nextOwnProps) {                                                            // 72
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);                                                      // 73
    var stateChanged = !areStatesEqual(nextState, state);                                                              // 74
    state = nextState;                                                                                                 // 75
    ownProps = nextOwnProps;                                                                                           // 76
                                                                                                                       // 77
    if (propsChanged && stateChanged) return handleNewPropsAndNewState();                                              // 78
    if (propsChanged) return handleNewProps();                                                                         // 79
    if (stateChanged) return handleNewState();                                                                         // 80
    return mergedProps;                                                                                                // 81
  }                                                                                                                    // 82
                                                                                                                       // 83
  return function pureFinalPropsSelector(nextState, nextOwnProps) {                                                    // 84
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };                                                                                                                   // 86
}                                                                                                                      // 87
                                                                                                                       // 88
// TODO: Add more comments                                                                                             // 89
                                                                                                                       // 90
// If pure is true, the selector returned by selectorFactory will memoize its results,                                 // 91
// allowing connectAdvanced's shouldComponentUpdate to return false if final                                           // 92
// props have not changed. If false, the selector will always return a new                                             // 93
// object and shouldComponentUpdate will always return true.                                                           // 94
                                                                                                                       // 95
function finalPropsSelectorFactory(dispatch, _ref2) {                                                                  // 96
  var initMapStateToProps = _ref2.initMapStateToProps,                                                                 // 97
      initMapDispatchToProps = _ref2.initMapDispatchToProps,                                                           // 98
      initMergeProps = _ref2.initMergeProps,                                                                           // 99
      options = _objectWithoutProperties(_ref2, ['initMapStateToProps', 'initMapDispatchToProps', 'initMergeProps']);  // 100
                                                                                                                       // 101
  var mapStateToProps = initMapStateToProps(dispatch, options);                                                        // 102
  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);                                                  // 103
  var mergeProps = initMergeProps(dispatch, options);                                                                  // 104
                                                                                                                       // 105
  if (process.env.NODE_ENV !== 'production') {                                                                         // 106
    (0, _verifySubselectors2.default)(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);           // 107
  }                                                                                                                    // 108
                                                                                                                       // 109
  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;                // 110
                                                                                                                       // 111
  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);                          // 112
}                                                                                                                      // 113
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"verifySubselectors.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/react-redux/lib/connect/verifySubselectors.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.default = verifySubselectors;                                                                                  // 4
                                                                                                                       // 5
var _warning = require('../utils/warning');                                                                            // 6
                                                                                                                       // 7
var _warning2 = _interopRequireDefault(_warning);                                                                      // 8
                                                                                                                       // 9
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 10
                                                                                                                       // 11
function verify(selector, methodName, displayName) {                                                                   // 12
  if (!selector) {                                                                                                     // 13
    throw new Error('Unexpected value for ' + methodName + ' in ' + displayName + '.');                                // 14
  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {                                // 15
    if (!selector.hasOwnProperty('dependsOnOwnProps')) {                                                               // 16
      (0, _warning2.default)('The selector for ' + methodName + ' of ' + displayName + ' did not specify a value for dependsOnOwnProps.');
    }                                                                                                                  // 18
  }                                                                                                                    // 19
}                                                                                                                      // 20
                                                                                                                       // 21
function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {                            // 22
  verify(mapStateToProps, 'mapStateToProps', displayName);                                                             // 23
  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);                                                       // 24
  verify(mergeProps, 'mergeProps', displayName);                                                                       // 25
}                                                                                                                      // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"redux":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/redux/package.json                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "redux";                                                                                                // 1
exports.version = "3.7.2";                                                                                             // 2
exports.main = "lib/index.js";                                                                                         // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"index.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/redux/lib/index.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;
                                                                                                                       // 5
var _createStore = require('./createStore');                                                                           // 6
                                                                                                                       // 7
var _createStore2 = _interopRequireDefault(_createStore);                                                              // 8
                                                                                                                       // 9
var _combineReducers = require('./combineReducers');                                                                   // 10
                                                                                                                       // 11
var _combineReducers2 = _interopRequireDefault(_combineReducers);                                                      // 12
                                                                                                                       // 13
var _bindActionCreators = require('./bindActionCreators');                                                             // 14
                                                                                                                       // 15
var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);                                                // 16
                                                                                                                       // 17
var _applyMiddleware = require('./applyMiddleware');                                                                   // 18
                                                                                                                       // 19
var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);                                                      // 20
                                                                                                                       // 21
var _compose = require('./compose');                                                                                   // 22
                                                                                                                       // 23
var _compose2 = _interopRequireDefault(_compose);                                                                      // 24
                                                                                                                       // 25
var _warning = require('./utils/warning');                                                                             // 26
                                                                                                                       // 27
var _warning2 = _interopRequireDefault(_warning);                                                                      // 28
                                                                                                                       // 29
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      // 30
                                                                                                                       // 31
/*                                                                                                                     // 32
* This is a dummy function to check if the function name has been altered by minification.                             // 33
* If the function has been minified and NODE_ENV !== 'production', warn the user.                                      // 34
*/                                                                                                                     // 35
function isCrushed() {}                                                                                                // 36
                                                                                                                       // 37
if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {   // 38
  (0, _warning2['default'])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
}                                                                                                                      // 40
                                                                                                                       // 41
exports.createStore = _createStore2['default'];                                                                        // 42
exports.combineReducers = _combineReducers2['default'];                                                                // 43
exports.bindActionCreators = _bindActionCreators2['default'];                                                          // 44
exports.applyMiddleware = _applyMiddleware2['default'];                                                                // 45
exports.compose = _compose2['default'];                                                                                // 46
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createStore.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/redux/lib/createStore.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports.ActionTypes = undefined;                                                                                       // 4
exports['default'] = createStore;                                                                                      // 5
                                                                                                                       // 6
var _isPlainObject = require('lodash/isPlainObject');                                                                  // 7
                                                                                                                       // 8
var _isPlainObject2 = _interopRequireDefault(_isPlainObject);                                                          // 9
                                                                                                                       // 10
var _symbolObservable = require('symbol-observable');                                                                  // 11
                                                                                                                       // 12
var _symbolObservable2 = _interopRequireDefault(_symbolObservable);                                                    // 13
                                                                                                                       // 14
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      // 15
                                                                                                                       // 16
/**                                                                                                                    // 17
 * These are private action types reserved by Redux.                                                                   // 18
 * For any unknown actions, you must return the current state.                                                         // 19
 * If the current state is undefined, you must return the initial state.                                               // 20
 * Do not reference these action types directly in your code.                                                          // 21
 */                                                                                                                    // 22
var ActionTypes = exports.ActionTypes = {                                                                              // 23
  INIT: '@@redux/INIT'                                                                                                 // 24
                                                                                                                       // 25
  /**                                                                                                                  // 26
   * Creates a Redux store that holds the state tree.                                                                  // 27
   * The only way to change the data in the store is to call `dispatch()` on it.                                       // 28
   *                                                                                                                   // 29
   * There should only be a single store in your app. To specify how different                                         // 30
   * parts of the state tree respond to actions, you may combine several reducers                                      // 31
   * into a single reducer function by using `combineReducers`.                                                        // 32
   *                                                                                                                   // 33
   * @param {Function} reducer A function that returns the next state tree, given                                      // 34
   * the current state tree and the action to handle.                                                                  // 35
   *                                                                                                                   // 36
   * @param {any} [preloadedState] The initial state. You may optionally specify it                                    // 37
   * to hydrate the state from the server in universal apps, or to restore a                                           // 38
   * previously serialized user session.                                                                               // 39
   * If you use `combineReducers` to produce the root reducer function, this must be                                   // 40
   * an object with the same shape as `combineReducers` keys.                                                          // 41
   *                                                                                                                   // 42
   * @param {Function} [enhancer] The store enhancer. You may optionally specify it                                    // 43
   * to enhance the store with third-party capabilities such as middleware,                                            // 44
   * time travel, persistence, etc. The only store enhancer that ships with Redux                                      // 45
   * is `applyMiddleware()`.                                                                                           // 46
   *                                                                                                                   // 47
   * @returns {Store} A Redux store that lets you read the state, dispatch actions                                     // 48
   * and subscribe to changes.                                                                                         // 49
   */                                                                                                                  // 50
};function createStore(reducer, preloadedState, enhancer) {                                                            // 51
  var _ref2;                                                                                                           // 52
                                                                                                                       // 53
  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {                                       // 54
    enhancer = preloadedState;                                                                                         // 55
    preloadedState = undefined;                                                                                        // 56
  }                                                                                                                    // 57
                                                                                                                       // 58
  if (typeof enhancer !== 'undefined') {                                                                               // 59
    if (typeof enhancer !== 'function') {                                                                              // 60
      throw new Error('Expected the enhancer to be a function.');                                                      // 61
    }                                                                                                                  // 62
                                                                                                                       // 63
    return enhancer(createStore)(reducer, preloadedState);                                                             // 64
  }                                                                                                                    // 65
                                                                                                                       // 66
  if (typeof reducer !== 'function') {                                                                                 // 67
    throw new Error('Expected the reducer to be a function.');                                                         // 68
  }                                                                                                                    // 69
                                                                                                                       // 70
  var currentReducer = reducer;                                                                                        // 71
  var currentState = preloadedState;                                                                                   // 72
  var currentListeners = [];                                                                                           // 73
  var nextListeners = currentListeners;                                                                                // 74
  var isDispatching = false;                                                                                           // 75
                                                                                                                       // 76
  function ensureCanMutateNextListeners() {                                                                            // 77
    if (nextListeners === currentListeners) {                                                                          // 78
      nextListeners = currentListeners.slice();                                                                        // 79
    }                                                                                                                  // 80
  }                                                                                                                    // 81
                                                                                                                       // 82
  /**                                                                                                                  // 83
   * Reads the state tree managed by the store.                                                                        // 84
   *                                                                                                                   // 85
   * @returns {any} The current state tree of your application.                                                        // 86
   */                                                                                                                  // 87
  function getState() {                                                                                                // 88
    return currentState;                                                                                               // 89
  }                                                                                                                    // 90
                                                                                                                       // 91
  /**                                                                                                                  // 92
   * Adds a change listener. It will be called any time an action is dispatched,                                       // 93
   * and some part of the state tree may potentially have changed. You may then                                        // 94
   * call `getState()` to read the current state tree inside the callback.                                             // 95
   *                                                                                                                   // 96
   * You may call `dispatch()` from a change listener, with the following                                              // 97
   * caveats:                                                                                                          // 98
   *                                                                                                                   // 99
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.                                         // 100
   * If you subscribe or unsubscribe while the listeners are being invoked, this                                       // 101
   * will not have any effect on the `dispatch()` that is currently in progress.                                       // 102
   * However, the next `dispatch()` call, whether nested or not, will use a more                                       // 103
   * recent snapshot of the subscription list.                                                                         // 104
   *                                                                                                                   // 105
   * 2. The listener should not expect to see all state changes, as the state                                          // 106
   * might have been updated multiple times during a nested `dispatch()` before                                        // 107
   * the listener is called. It is, however, guaranteed that all subscribers                                           // 108
   * registered before the `dispatch()` started will be called with the latest                                         // 109
   * state by the time it exits.                                                                                       // 110
   *                                                                                                                   // 111
   * @param {Function} listener A callback to be invoked on every dispatch.                                            // 112
   * @returns {Function} A function to remove this change listener.                                                    // 113
   */                                                                                                                  // 114
  function subscribe(listener) {                                                                                       // 115
    if (typeof listener !== 'function') {                                                                              // 116
      throw new Error('Expected listener to be a function.');                                                          // 117
    }                                                                                                                  // 118
                                                                                                                       // 119
    var isSubscribed = true;                                                                                           // 120
                                                                                                                       // 121
    ensureCanMutateNextListeners();                                                                                    // 122
    nextListeners.push(listener);                                                                                      // 123
                                                                                                                       // 124
    return function unsubscribe() {                                                                                    // 125
      if (!isSubscribed) {                                                                                             // 126
        return;                                                                                                        // 127
      }                                                                                                                // 128
                                                                                                                       // 129
      isSubscribed = false;                                                                                            // 130
                                                                                                                       // 131
      ensureCanMutateNextListeners();                                                                                  // 132
      var index = nextListeners.indexOf(listener);                                                                     // 133
      nextListeners.splice(index, 1);                                                                                  // 134
    };                                                                                                                 // 135
  }                                                                                                                    // 136
                                                                                                                       // 137
  /**                                                                                                                  // 138
   * Dispatches an action. It is the only way to trigger a state change.                                               // 139
   *                                                                                                                   // 140
   * The `reducer` function, used to create the store, will be called with the                                         // 141
   * current state tree and the given `action`. Its return value will                                                  // 142
   * be considered the **next** state of the tree, and the change listeners                                            // 143
   * will be notified.                                                                                                 // 144
   *                                                                                                                   // 145
   * The base implementation only supports plain object actions. If you want to                                        // 146
   * dispatch a Promise, an Observable, a thunk, or something else, you need to                                        // 147
   * wrap your store creating function into the corresponding middleware. For                                          // 148
   * example, see the documentation for the `redux-thunk` package. Even the                                            // 149
   * middleware will eventually dispatch plain object actions using this method.                                       // 150
   *                                                                                                                   // 151
   * @param {Object} action A plain object representing “what changed”. It is                                          // 152
   * a good idea to keep actions serializable so you can record and replay user                                        // 153
   * sessions, or use the time travelling `redux-devtools`. An action must have                                        // 154
   * a `type` property which may not be `undefined`. It is a good idea to use                                          // 155
   * string constants for action types.                                                                                // 156
   *                                                                                                                   // 157
   * @returns {Object} For convenience, the same action object you dispatched.                                         // 158
   *                                                                                                                   // 159
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to                                            // 160
   * return something else (for example, a Promise you can await).                                                     // 161
   */                                                                                                                  // 162
  function dispatch(action) {                                                                                          // 163
    if (!(0, _isPlainObject2['default'])(action)) {                                                                    // 164
      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');                 // 165
    }                                                                                                                  // 166
                                                                                                                       // 167
    if (typeof action.type === 'undefined') {                                                                          // 168
      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');      // 169
    }                                                                                                                  // 170
                                                                                                                       // 171
    if (isDispatching) {                                                                                               // 172
      throw new Error('Reducers may not dispatch actions.');                                                           // 173
    }                                                                                                                  // 174
                                                                                                                       // 175
    try {                                                                                                              // 176
      isDispatching = true;                                                                                            // 177
      currentState = currentReducer(currentState, action);                                                             // 178
    } finally {                                                                                                        // 179
      isDispatching = false;                                                                                           // 180
    }                                                                                                                  // 181
                                                                                                                       // 182
    var listeners = currentListeners = nextListeners;                                                                  // 183
    for (var i = 0; i < listeners.length; i++) {                                                                       // 184
      var listener = listeners[i];                                                                                     // 185
      listener();                                                                                                      // 186
    }                                                                                                                  // 187
                                                                                                                       // 188
    return action;                                                                                                     // 189
  }                                                                                                                    // 190
                                                                                                                       // 191
  /**                                                                                                                  // 192
   * Replaces the reducer currently used by the store to calculate the state.                                          // 193
   *                                                                                                                   // 194
   * You might need this if your app implements code splitting and you want to                                         // 195
   * load some of the reducers dynamically. You might also need this if you                                            // 196
   * implement a hot reloading mechanism for Redux.                                                                    // 197
   *                                                                                                                   // 198
   * @param {Function} nextReducer The reducer for the store to use instead.                                           // 199
   * @returns {void}                                                                                                   // 200
   */                                                                                                                  // 201
  function replaceReducer(nextReducer) {                                                                               // 202
    if (typeof nextReducer !== 'function') {                                                                           // 203
      throw new Error('Expected the nextReducer to be a function.');                                                   // 204
    }                                                                                                                  // 205
                                                                                                                       // 206
    currentReducer = nextReducer;                                                                                      // 207
    dispatch({ type: ActionTypes.INIT });                                                                              // 208
  }                                                                                                                    // 209
                                                                                                                       // 210
  /**                                                                                                                  // 211
   * Interoperability point for observable/reactive libraries.                                                         // 212
   * @returns {observable} A minimal observable of state changes.                                                      // 213
   * For more information, see the observable proposal:                                                                // 214
   * https://github.com/tc39/proposal-observable                                                                       // 215
   */                                                                                                                  // 216
  function observable() {                                                                                              // 217
    var _ref;                                                                                                          // 218
                                                                                                                       // 219
    var outerSubscribe = subscribe;                                                                                    // 220
    return _ref = {                                                                                                    // 221
      /**                                                                                                              // 222
       * The minimal observable subscription method.                                                                   // 223
       * @param {Object} observer Any object that can be used as an observer.                                          // 224
       * The observer object should have a `next` method.                                                              // 225
       * @returns {subscription} An object with an `unsubscribe` method that can                                       // 226
       * be used to unsubscribe the observable from the store, and prevent further                                     // 227
       * emission of values from the observable.                                                                       // 228
       */                                                                                                              // 229
      subscribe: function subscribe(observer) {                                                                        // 230
        if (typeof observer !== 'object') {                                                                            // 231
          throw new TypeError('Expected the observer to be an object.');                                               // 232
        }                                                                                                              // 233
                                                                                                                       // 234
        function observeState() {                                                                                      // 235
          if (observer.next) {                                                                                         // 236
            observer.next(getState());                                                                                 // 237
          }                                                                                                            // 238
        }                                                                                                              // 239
                                                                                                                       // 240
        observeState();                                                                                                // 241
        var unsubscribe = outerSubscribe(observeState);                                                                // 242
        return { unsubscribe: unsubscribe };                                                                           // 243
      }                                                                                                                // 244
    }, _ref[_symbolObservable2['default']] = function () {                                                             // 245
      return this;                                                                                                     // 246
    }, _ref;                                                                                                           // 247
  }                                                                                                                    // 248
                                                                                                                       // 249
  // When a store is created, an "INIT" action is dispatched so that every                                             // 250
  // reducer returns their initial state. This effectively populates                                                   // 251
  // the initial state tree.                                                                                           // 252
  dispatch({ type: ActionTypes.INIT });                                                                                // 253
                                                                                                                       // 254
  return _ref2 = {                                                                                                     // 255
    dispatch: dispatch,                                                                                                // 256
    subscribe: subscribe,                                                                                              // 257
    getState: getState,                                                                                                // 258
    replaceReducer: replaceReducer                                                                                     // 259
  }, _ref2[_symbolObservable2['default']] = observable, _ref2;                                                         // 260
}                                                                                                                      // 261
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"combineReducers.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/redux/lib/combineReducers.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports['default'] = combineReducers;                                                                                  // 4
                                                                                                                       // 5
var _createStore = require('./createStore');                                                                           // 6
                                                                                                                       // 7
var _isPlainObject = require('lodash/isPlainObject');                                                                  // 8
                                                                                                                       // 9
var _isPlainObject2 = _interopRequireDefault(_isPlainObject);                                                          // 10
                                                                                                                       // 11
var _warning = require('./utils/warning');                                                                             // 12
                                                                                                                       // 13
var _warning2 = _interopRequireDefault(_warning);                                                                      // 14
                                                                                                                       // 15
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      // 16
                                                                                                                       // 17
function getUndefinedStateErrorMessage(key, action) {                                                                  // 18
  var actionType = action && action.type;                                                                              // 19
  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';                                     // 20
                                                                                                                       // 21
  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';
}                                                                                                                      // 23
                                                                                                                       // 24
function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {                     // 25
  var reducerKeys = Object.keys(reducers);                                                                             // 26
  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';
                                                                                                                       // 28
  if (reducerKeys.length === 0) {                                                                                      // 29
    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
  }                                                                                                                    // 31
                                                                                                                       // 32
  if (!(0, _isPlainObject2['default'])(inputState)) {                                                                  // 33
    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
  }                                                                                                                    // 35
                                                                                                                       // 36
  var unexpectedKeys = Object.keys(inputState).filter(function (key) {                                                 // 37
    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];                                                  // 38
  });                                                                                                                  // 39
                                                                                                                       // 40
  unexpectedKeys.forEach(function (key) {                                                                              // 41
    unexpectedKeyCache[key] = true;                                                                                    // 42
  });                                                                                                                  // 43
                                                                                                                       // 44
  if (unexpectedKeys.length > 0) {                                                                                     // 45
    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
  }                                                                                                                    // 47
}                                                                                                                      // 48
                                                                                                                       // 49
function assertReducerShape(reducers) {                                                                                // 50
  Object.keys(reducers).forEach(function (key) {                                                                       // 51
    var reducer = reducers[key];                                                                                       // 52
    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });                                    // 53
                                                                                                                       // 54
    if (typeof initialState === 'undefined') {                                                                         // 55
      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
    }                                                                                                                  // 57
                                                                                                                       // 58
    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');          // 59
    if (typeof reducer(undefined, { type: type }) === 'undefined') {                                                   // 60
      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
    }                                                                                                                  // 62
  });                                                                                                                  // 63
}                                                                                                                      // 64
                                                                                                                       // 65
/**                                                                                                                    // 66
 * Turns an object whose values are different reducer functions, into a single                                         // 67
 * reducer function. It will call every child reducer, and gather their results                                        // 68
 * into a single state object, whose keys correspond to the keys of the passed                                         // 69
 * reducer functions.                                                                                                  // 70
 *                                                                                                                     // 71
 * @param {Object} reducers An object whose values correspond to different                                             // 72
 * reducer functions that need to be combined into one. One handy way to obtain                                        // 73
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return                                       // 74
 * undefined for any action. Instead, they should return their initial state                                           // 75
 * if the state passed to them was undefined, and the current state for any                                            // 76
 * unrecognized action.                                                                                                // 77
 *                                                                                                                     // 78
 * @returns {Function} A reducer function that invokes every reducer inside the                                        // 79
 * passed object, and builds a state object with the same shape.                                                       // 80
 */                                                                                                                    // 81
function combineReducers(reducers) {                                                                                   // 82
  var reducerKeys = Object.keys(reducers);                                                                             // 83
  var finalReducers = {};                                                                                              // 84
  for (var i = 0; i < reducerKeys.length; i++) {                                                                       // 85
    var key = reducerKeys[i];                                                                                          // 86
                                                                                                                       // 87
    if (process.env.NODE_ENV !== 'production') {                                                                       // 88
      if (typeof reducers[key] === 'undefined') {                                                                      // 89
        (0, _warning2['default'])('No reducer provided for key "' + key + '"');                                        // 90
      }                                                                                                                // 91
    }                                                                                                                  // 92
                                                                                                                       // 93
    if (typeof reducers[key] === 'function') {                                                                         // 94
      finalReducers[key] = reducers[key];                                                                              // 95
    }                                                                                                                  // 96
  }                                                                                                                    // 97
  var finalReducerKeys = Object.keys(finalReducers);                                                                   // 98
                                                                                                                       // 99
  var unexpectedKeyCache = void 0;                                                                                     // 100
  if (process.env.NODE_ENV !== 'production') {                                                                         // 101
    unexpectedKeyCache = {};                                                                                           // 102
  }                                                                                                                    // 103
                                                                                                                       // 104
  var shapeAssertionError = void 0;                                                                                    // 105
  try {                                                                                                                // 106
    assertReducerShape(finalReducers);                                                                                 // 107
  } catch (e) {                                                                                                        // 108
    shapeAssertionError = e;                                                                                           // 109
  }                                                                                                                    // 110
                                                                                                                       // 111
  return function combination() {                                                                                      // 112
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                                // 113
    var action = arguments[1];                                                                                         // 114
                                                                                                                       // 115
    if (shapeAssertionError) {                                                                                         // 116
      throw shapeAssertionError;                                                                                       // 117
    }                                                                                                                  // 118
                                                                                                                       // 119
    if (process.env.NODE_ENV !== 'production') {                                                                       // 120
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);    // 121
      if (warningMessage) {                                                                                            // 122
        (0, _warning2['default'])(warningMessage);                                                                     // 123
      }                                                                                                                // 124
    }                                                                                                                  // 125
                                                                                                                       // 126
    var hasChanged = false;                                                                                            // 127
    var nextState = {};                                                                                                // 128
    for (var _i = 0; _i < finalReducerKeys.length; _i++) {                                                             // 129
      var _key = finalReducerKeys[_i];                                                                                 // 130
      var reducer = finalReducers[_key];                                                                               // 131
      var previousStateForKey = state[_key];                                                                           // 132
      var nextStateForKey = reducer(previousStateForKey, action);                                                      // 133
      if (typeof nextStateForKey === 'undefined') {                                                                    // 134
        var errorMessage = getUndefinedStateErrorMessage(_key, action);                                                // 135
        throw new Error(errorMessage);                                                                                 // 136
      }                                                                                                                // 137
      nextState[_key] = nextStateForKey;                                                                               // 138
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;                                              // 139
    }                                                                                                                  // 140
    return hasChanged ? nextState : state;                                                                             // 141
  };                                                                                                                   // 142
}                                                                                                                      // 143
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"utils":{"warning.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/redux/lib/utils/warning.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports['default'] = warning;                                                                                          // 4
/**                                                                                                                    // 5
 * Prints a warning in the console if it exists.                                                                       // 6
 *                                                                                                                     // 7
 * @param {String} message The warning message.                                                                        // 8
 * @returns {void}                                                                                                     // 9
 */                                                                                                                    // 10
function warning(message) {                                                                                            // 11
  /* eslint-disable no-console */                                                                                      // 12
  if (typeof console !== 'undefined' && typeof console.error === 'function') {                                         // 13
    console.error(message);                                                                                            // 14
  }                                                                                                                    // 15
  /* eslint-enable no-console */                                                                                       // 16
  try {                                                                                                                // 17
    // This error was thrown as a convenience so that if you enable                                                    // 18
    // "break on all exceptions" in your console,                                                                      // 19
    // it would pause the execution at this line.                                                                      // 20
    throw new Error(message);                                                                                          // 21
    /* eslint-disable no-empty */                                                                                      // 22
  } catch (e) {}                                                                                                       // 23
  /* eslint-enable no-empty */                                                                                         // 24
}                                                                                                                      // 25
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"bindActionCreators.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/redux/lib/bindActionCreators.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports['default'] = bindActionCreators;                                                                               // 4
function bindActionCreator(actionCreator, dispatch) {                                                                  // 5
  return function () {                                                                                                 // 6
    return dispatch(actionCreator.apply(undefined, arguments));                                                        // 7
  };                                                                                                                   // 8
}                                                                                                                      // 9
                                                                                                                       // 10
/**                                                                                                                    // 11
 * Turns an object whose values are action creators, into an object with the                                           // 12
 * same keys, but with every function wrapped into a `dispatch` call so they                                           // 13
 * may be invoked directly. This is just a convenience method, as you can call                                         // 14
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.                                                // 15
 *                                                                                                                     // 16
 * For convenience, you can also pass a single function as the first argument,                                         // 17
 * and get a function in return.                                                                                       // 18
 *                                                                                                                     // 19
 * @param {Function|Object} actionCreators An object whose values are action                                           // 20
 * creator functions. One handy way to obtain it is to use ES6 `import * as`                                           // 21
 * syntax. You may also pass a single function.                                                                        // 22
 *                                                                                                                     // 23
 * @param {Function} dispatch The `dispatch` function available on your Redux                                          // 24
 * store.                                                                                                              // 25
 *                                                                                                                     // 26
 * @returns {Function|Object} The object mimicking the original object, but with                                       // 27
 * every action creator wrapped into the `dispatch` call. If you passed a                                              // 28
 * function as `actionCreators`, the return value will also be a single                                                // 29
 * function.                                                                                                           // 30
 */                                                                                                                    // 31
function bindActionCreators(actionCreators, dispatch) {                                                                // 32
  if (typeof actionCreators === 'function') {                                                                          // 33
    return bindActionCreator(actionCreators, dispatch);                                                                // 34
  }                                                                                                                    // 35
                                                                                                                       // 36
  if (typeof actionCreators !== 'object' || actionCreators === null) {                                                 // 37
    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
  }                                                                                                                    // 39
                                                                                                                       // 40
  var keys = Object.keys(actionCreators);                                                                              // 41
  var boundActionCreators = {};                                                                                        // 42
  for (var i = 0; i < keys.length; i++) {                                                                              // 43
    var key = keys[i];                                                                                                 // 44
    var actionCreator = actionCreators[key];                                                                           // 45
    if (typeof actionCreator === 'function') {                                                                         // 46
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);                                           // 47
    }                                                                                                                  // 48
  }                                                                                                                    // 49
  return boundActionCreators;                                                                                          // 50
}                                                                                                                      // 51
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"applyMiddleware.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/redux/lib/applyMiddleware.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
                                                                                                                       // 4
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
                                                                                                                       // 6
exports['default'] = applyMiddleware;                                                                                  // 7
                                                                                                                       // 8
var _compose = require('./compose');                                                                                   // 9
                                                                                                                       // 10
var _compose2 = _interopRequireDefault(_compose);                                                                      // 11
                                                                                                                       // 12
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      // 13
                                                                                                                       // 14
/**                                                                                                                    // 15
 * Creates a store enhancer that applies middleware to the dispatch method                                             // 16
 * of the Redux store. This is handy for a variety of tasks, such as expressing                                        // 17
 * asynchronous actions in a concise manner, or logging every action payload.                                          // 18
 *                                                                                                                     // 19
 * See `redux-thunk` package as an example of the Redux middleware.                                                    // 20
 *                                                                                                                     // 21
 * Because middleware is potentially asynchronous, this should be the first                                            // 22
 * store enhancer in the composition chain.                                                                            // 23
 *                                                                                                                     // 24
 * Note that each middleware will be given the `dispatch` and `getState` functions                                     // 25
 * as named arguments.                                                                                                 // 26
 *                                                                                                                     // 27
 * @param {...Function} middlewares The middleware chain to be applied.                                                // 28
 * @returns {Function} A store enhancer applying the middleware.                                                       // 29
 */                                                                                                                    // 30
function applyMiddleware() {                                                                                           // 31
  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {                        // 32
    middlewares[_key] = arguments[_key];                                                                               // 33
  }                                                                                                                    // 34
                                                                                                                       // 35
  return function (createStore) {                                                                                      // 36
    return function (reducer, preloadedState, enhancer) {                                                              // 37
      var store = createStore(reducer, preloadedState, enhancer);                                                      // 38
      var _dispatch = store.dispatch;                                                                                  // 39
      var chain = [];                                                                                                  // 40
                                                                                                                       // 41
      var middlewareAPI = {                                                                                            // 42
        getState: store.getState,                                                                                      // 43
        dispatch: function dispatch(action) {                                                                          // 44
          return _dispatch(action);                                                                                    // 45
        }                                                                                                              // 46
      };                                                                                                               // 47
      chain = middlewares.map(function (middleware) {                                                                  // 48
        return middleware(middlewareAPI);                                                                              // 49
      });                                                                                                              // 50
      _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);                                        // 51
                                                                                                                       // 52
      return _extends({}, store, {                                                                                     // 53
        dispatch: _dispatch                                                                                            // 54
      });                                                                                                              // 55
    };                                                                                                                 // 56
  };                                                                                                                   // 57
}                                                                                                                      // 58
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"compose.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/redux/lib/compose.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
"use strict";                                                                                                          // 1
                                                                                                                       // 2
exports.__esModule = true;                                                                                             // 3
exports["default"] = compose;                                                                                          // 4
/**                                                                                                                    // 5
 * Composes single-argument functions from right to left. The rightmost                                                // 6
 * function can take multiple arguments as it provides the signature for                                               // 7
 * the resulting composite function.                                                                                   // 8
 *                                                                                                                     // 9
 * @param {...Function} funcs The functions to compose.                                                                // 10
 * @returns {Function} A function obtained by composing the argument functions                                         // 11
 * from right to left. For example, compose(f, g, h) is identical to doing                                             // 12
 * (...args) => f(g(h(...args))).                                                                                      // 13
 */                                                                                                                    // 14
                                                                                                                       // 15
function compose() {                                                                                                   // 16
  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {                              // 17
    funcs[_key] = arguments[_key];                                                                                     // 18
  }                                                                                                                    // 19
                                                                                                                       // 20
  if (funcs.length === 0) {                                                                                            // 21
    return function (arg) {                                                                                            // 22
      return arg;                                                                                                      // 23
    };                                                                                                                 // 24
  }                                                                                                                    // 25
                                                                                                                       // 26
  if (funcs.length === 1) {                                                                                            // 27
    return funcs[0];                                                                                                   // 28
  }                                                                                                                    // 29
                                                                                                                       // 30
  return funcs.reduce(function (a, b) {                                                                                // 31
    return function () {                                                                                               // 32
      return a(b.apply(undefined, arguments));                                                                         // 33
    };                                                                                                                 // 34
  });                                                                                                                  // 35
}                                                                                                                      // 36
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"lodash":{"isPlainObject.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/lodash/isPlainObject.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var baseGetTag = require('./_baseGetTag'),                                                                             // 1
    getPrototype = require('./_getPrototype'),                                                                         // 2
    isObjectLike = require('./isObjectLike');                                                                          // 3
                                                                                                                       // 4
/** `Object#toString` result references. */                                                                            // 5
var objectTag = '[object Object]';                                                                                     // 6
                                                                                                                       // 7
/** Used for built-in method references. */                                                                            // 8
var funcProto = Function.prototype,                                                                                    // 9
    objectProto = Object.prototype;                                                                                    // 10
                                                                                                                       // 11
/** Used to resolve the decompiled source of functions. */                                                             // 12
var funcToString = funcProto.toString;                                                                                 // 13
                                                                                                                       // 14
/** Used to check objects for own properties. */                                                                       // 15
var hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 16
                                                                                                                       // 17
/** Used to infer the `Object` constructor. */                                                                         // 18
var objectCtorString = funcToString.call(Object);                                                                      // 19
                                                                                                                       // 20
/**                                                                                                                    // 21
 * Checks if `value` is a plain object, that is, an object created by the                                              // 22
 * `Object` constructor or one with a `[[Prototype]]` of `null`.                                                       // 23
 *                                                                                                                     // 24
 * @static                                                                                                             // 25
 * @memberOf _                                                                                                         // 26
 * @since 0.8.0                                                                                                        // 27
 * @category Lang                                                                                                      // 28
 * @param {*} value The value to check.                                                                                // 29
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.                                       // 30
 * @example                                                                                                            // 31
 *                                                                                                                     // 32
 * function Foo() {                                                                                                    // 33
 *   this.a = 1;                                                                                                       // 34
 * }                                                                                                                   // 35
 *                                                                                                                     // 36
 * _.isPlainObject(new Foo);                                                                                           // 37
 * // => false                                                                                                         // 38
 *                                                                                                                     // 39
 * _.isPlainObject([1, 2, 3]);                                                                                         // 40
 * // => false                                                                                                         // 41
 *                                                                                                                     // 42
 * _.isPlainObject({ 'x': 0, 'y': 0 });                                                                                // 43
 * // => true                                                                                                          // 44
 *                                                                                                                     // 45
 * _.isPlainObject(Object.create(null));                                                                               // 46
 * // => true                                                                                                          // 47
 */                                                                                                                    // 48
function isPlainObject(value) {                                                                                        // 49
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {                                                        // 50
    return false;                                                                                                      // 51
  }                                                                                                                    // 52
  var proto = getPrototype(value);                                                                                     // 53
  if (proto === null) {                                                                                                // 54
    return true;                                                                                                       // 55
  }                                                                                                                    // 56
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;                                           // 57
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&                                                          // 58
    funcToString.call(Ctor) == objectCtorString;                                                                       // 59
}                                                                                                                      // 60
                                                                                                                       // 61
module.exports = isPlainObject;                                                                                        // 62
                                                                                                                       // 63
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_baseGetTag.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/lodash/_baseGetTag.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Symbol = require('./_Symbol'),                                                                                     // 1
    getRawTag = require('./_getRawTag'),                                                                               // 2
    objectToString = require('./_objectToString');                                                                     // 3
                                                                                                                       // 4
/** `Object#toString` result references. */                                                                            // 5
var nullTag = '[object Null]',                                                                                         // 6
    undefinedTag = '[object Undefined]';                                                                               // 7
                                                                                                                       // 8
/** Built-in value references. */                                                                                      // 9
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;                                                          // 10
                                                                                                                       // 11
/**                                                                                                                    // 12
 * The base implementation of `getTag` without fallbacks for buggy environments.                                       // 13
 *                                                                                                                     // 14
 * @private                                                                                                            // 15
 * @param {*} value The value to query.                                                                                // 16
 * @returns {string} Returns the `toStringTag`.                                                                        // 17
 */                                                                                                                    // 18
function baseGetTag(value) {                                                                                           // 19
  if (value == null) {                                                                                                 // 20
    return value === undefined ? undefinedTag : nullTag;                                                               // 21
  }                                                                                                                    // 22
  return (symToStringTag && symToStringTag in Object(value))                                                           // 23
    ? getRawTag(value)                                                                                                 // 24
    : objectToString(value);                                                                                           // 25
}                                                                                                                      // 26
                                                                                                                       // 27
module.exports = baseGetTag;                                                                                           // 28
                                                                                                                       // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_Symbol.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/lodash/_Symbol.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var root = require('./_root');                                                                                         // 1
                                                                                                                       // 2
/** Built-in value references. */                                                                                      // 3
var Symbol = root.Symbol;                                                                                              // 4
                                                                                                                       // 5
module.exports = Symbol;                                                                                               // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_root.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/lodash/_root.js                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var freeGlobal = require('./_freeGlobal');                                                                             // 1
                                                                                                                       // 2
/** Detect free variable `self`. */                                                                                    // 3
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;                                      // 4
                                                                                                                       // 5
/** Used as a reference to the global object. */                                                                       // 6
var root = freeGlobal || freeSelf || Function('return this')();                                                        // 7
                                                                                                                       // 8
module.exports = root;                                                                                                 // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_freeGlobal.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/lodash/_freeGlobal.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/** Detect free variable `global` from Node.js. */                                                                     // 1
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;                            // 2
                                                                                                                       // 3
module.exports = freeGlobal;                                                                                           // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_getRawTag.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/lodash/_getRawTag.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Symbol = require('./_Symbol');                                                                                     // 1
                                                                                                                       // 2
/** Used for built-in method references. */                                                                            // 3
var objectProto = Object.prototype;                                                                                    // 4
                                                                                                                       // 5
/** Used to check objects for own properties. */                                                                       // 6
var hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 7
                                                                                                                       // 8
/**                                                                                                                    // 9
 * Used to resolve the                                                                                                 // 10
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)                          // 11
 * of values.                                                                                                          // 12
 */                                                                                                                    // 13
var nativeObjectToString = objectProto.toString;                                                                       // 14
                                                                                                                       // 15
/** Built-in value references. */                                                                                      // 16
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;                                                          // 17
                                                                                                                       // 18
/**                                                                                                                    // 19
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.                                    // 20
 *                                                                                                                     // 21
 * @private                                                                                                            // 22
 * @param {*} value The value to query.                                                                                // 23
 * @returns {string} Returns the raw `toStringTag`.                                                                    // 24
 */                                                                                                                    // 25
function getRawTag(value) {                                                                                            // 26
  var isOwn = hasOwnProperty.call(value, symToStringTag),                                                              // 27
      tag = value[symToStringTag];                                                                                     // 28
                                                                                                                       // 29
  try {                                                                                                                // 30
    value[symToStringTag] = undefined;                                                                                 // 31
    var unmasked = true;                                                                                               // 32
  } catch (e) {}                                                                                                       // 33
                                                                                                                       // 34
  var result = nativeObjectToString.call(value);                                                                       // 35
  if (unmasked) {                                                                                                      // 36
    if (isOwn) {                                                                                                       // 37
      value[symToStringTag] = tag;                                                                                     // 38
    } else {                                                                                                           // 39
      delete value[symToStringTag];                                                                                    // 40
    }                                                                                                                  // 41
  }                                                                                                                    // 42
  return result;                                                                                                       // 43
}                                                                                                                      // 44
                                                                                                                       // 45
module.exports = getRawTag;                                                                                            // 46
                                                                                                                       // 47
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_objectToString.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/lodash/_objectToString.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/** Used for built-in method references. */                                                                            // 1
var objectProto = Object.prototype;                                                                                    // 2
                                                                                                                       // 3
/**                                                                                                                    // 4
 * Used to resolve the                                                                                                 // 5
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)                          // 6
 * of values.                                                                                                          // 7
 */                                                                                                                    // 8
var nativeObjectToString = objectProto.toString;                                                                       // 9
                                                                                                                       // 10
/**                                                                                                                    // 11
 * Converts `value` to a string using `Object.prototype.toString`.                                                     // 12
 *                                                                                                                     // 13
 * @private                                                                                                            // 14
 * @param {*} value The value to convert.                                                                              // 15
 * @returns {string} Returns the converted string.                                                                     // 16
 */                                                                                                                    // 17
function objectToString(value) {                                                                                       // 18
  return nativeObjectToString.call(value);                                                                             // 19
}                                                                                                                      // 20
                                                                                                                       // 21
module.exports = objectToString;                                                                                       // 22
                                                                                                                       // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_getPrototype.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/lodash/_getPrototype.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var overArg = require('./_overArg');                                                                                   // 1
                                                                                                                       // 2
/** Built-in value references. */                                                                                      // 3
var getPrototype = overArg(Object.getPrototypeOf, Object);                                                             // 4
                                                                                                                       // 5
module.exports = getPrototype;                                                                                         // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_overArg.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/lodash/_overArg.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Creates a unary function that invokes `func` with its argument transformed.                                         // 2
 *                                                                                                                     // 3
 * @private                                                                                                            // 4
 * @param {Function} func The function to wrap.                                                                        // 5
 * @param {Function} transform The argument transform.                                                                 // 6
 * @returns {Function} Returns the new function.                                                                       // 7
 */                                                                                                                    // 8
function overArg(func, transform) {                                                                                    // 9
  return function(arg) {                                                                                               // 10
    return func(transform(arg));                                                                                       // 11
  };                                                                                                                   // 12
}                                                                                                                      // 13
                                                                                                                       // 14
module.exports = overArg;                                                                                              // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"isObjectLike.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/lodash/isObjectLike.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Checks if `value` is object-like. A value is object-like if it's not `null`                                         // 2
 * and has a `typeof` result of "object".                                                                              // 3
 *                                                                                                                     // 4
 * @static                                                                                                             // 5
 * @memberOf _                                                                                                         // 6
 * @since 4.0.0                                                                                                        // 7
 * @category Lang                                                                                                      // 8
 * @param {*} value The value to check.                                                                                // 9
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 10
 * @example                                                                                                            // 11
 *                                                                                                                     // 12
 * _.isObjectLike({});                                                                                                 // 13
 * // => true                                                                                                          // 14
 *                                                                                                                     // 15
 * _.isObjectLike([1, 2, 3]);                                                                                          // 16
 * // => true                                                                                                          // 17
 *                                                                                                                     // 18
 * _.isObjectLike(_.noop);                                                                                             // 19
 * // => false                                                                                                         // 20
 *                                                                                                                     // 21
 * _.isObjectLike(null);                                                                                               // 22
 * // => false                                                                                                         // 23
 */                                                                                                                    // 24
function isObjectLike(value) {                                                                                         // 25
  return value != null && typeof value == 'object';                                                                    // 26
}                                                                                                                      // 27
                                                                                                                       // 28
module.exports = isObjectLike;                                                                                         // 29
                                                                                                                       // 30
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"symbol-observable":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/symbol-observable/package.json                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "symbol-observable";                                                                                    // 1
exports.version = "1.2.0";                                                                                             // 2
exports.main = "lib/index.js";                                                                                         // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/symbol-observable/lib/index.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
Object.defineProperty(exports, "__esModule", {                                                                         // 3
  value: true                                                                                                          // 4
});                                                                                                                    // 5
                                                                                                                       // 6
var _ponyfill = require('./ponyfill.js');                                                                              // 7
                                                                                                                       // 8
var _ponyfill2 = _interopRequireDefault(_ponyfill);                                                                    // 9
                                                                                                                       // 10
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      // 11
                                                                                                                       // 12
var root; /* global window */                                                                                          // 13
                                                                                                                       // 14
                                                                                                                       // 15
if (typeof self !== 'undefined') {                                                                                     // 16
  root = self;                                                                                                         // 17
} else if (typeof window !== 'undefined') {                                                                            // 18
  root = window;                                                                                                       // 19
} else if (typeof global !== 'undefined') {                                                                            // 20
  root = global;                                                                                                       // 21
} else if (typeof module !== 'undefined') {                                                                            // 22
  root = module;                                                                                                       // 23
} else {                                                                                                               // 24
  root = Function('return this')();                                                                                    // 25
}                                                                                                                      // 26
                                                                                                                       // 27
var result = (0, _ponyfill2['default'])(root);                                                                         // 28
exports['default'] = result;                                                                                           // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ponyfill.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/symbol-observable/lib/ponyfill.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
                                                                                                                       // 2
Object.defineProperty(exports, "__esModule", {                                                                         // 3
	value: true                                                                                                           // 4
});                                                                                                                    // 5
exports['default'] = symbolObservablePonyfill;                                                                         // 6
function symbolObservablePonyfill(root) {                                                                              // 7
	var result;                                                                                                           // 8
	var _Symbol = root.Symbol;                                                                                            // 9
                                                                                                                       // 10
	if (typeof _Symbol === 'function') {                                                                                  // 11
		if (_Symbol.observable) {                                                                                            // 12
			result = _Symbol.observable;                                                                                        // 13
		} else {                                                                                                             // 14
			result = _Symbol('observable');                                                                                     // 15
			_Symbol.observable = result;                                                                                        // 16
		}                                                                                                                    // 17
	} else {                                                                                                              // 18
		result = '@@observable';                                                                                             // 19
	}                                                                                                                     // 20
                                                                                                                       // 21
	return result;                                                                                                        // 22
};                                                                                                                     // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"core-js":{"library":{"fn":{"symbol":{"iterator.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/symbol/iterator.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.string.iterator');                                                                          // 1
require('../../modules/web.dom.iterable');                                                                             // 2
module.exports = require('../../modules/_wks-ext').f('iterator');                                                      // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/symbol/index.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.symbol');                                                                                   // 1
require('../../modules/es6.object.to-string');                                                                         // 2
require('../../modules/es7.symbol.async-iterator');                                                                    // 3
require('../../modules/es7.symbol.observable');                                                                        // 4
module.exports = require('../../modules/_core').Symbol;                                                                // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"object":{"set-prototype-of.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/object/set-prototype-of.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.object.set-prototype-of');                                                                  // 1
module.exports = require('../../modules/_core').Object.setPrototypeOf;                                                 // 2
                                                                                                                       // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"create.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/object/create.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.object.create');                                                                            // 1
var $Object = require('../../modules/_core').Object;                                                                   // 2
module.exports = function create(P, D) {                                                                               // 3
  return $Object.create(P, D);                                                                                         // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"assign.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/object/assign.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.object.assign');                                                                            // 1
module.exports = require('../../modules/_core').Object.assign;                                                         // 2
                                                                                                                       // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"array":{"from.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/fn/array/from.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../../modules/es6.string.iterator');                                                                          // 1
require('../../modules/es6.array.from');                                                                               // 2
module.exports = require('../../modules/_core').Array.from;                                                            // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"modules":{"es6.string.iterator.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.string.iterator.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $at = require('./_string-at')(true);                                                                               // 2
                                                                                                                       // 3
// 21.1.3.27 String.prototype[@@iterator]()                                                                            // 4
require('./_iter-define')(String, 'String', function (iterated) {                                                      // 5
  this._t = String(iterated); // target                                                                                // 6
  this._i = 0;                // next index                                                                            // 7
// 21.1.5.2.1 %StringIteratorPrototype%.next()                                                                         // 8
}, function () {                                                                                                       // 9
  var O = this._t;                                                                                                     // 10
  var index = this._i;                                                                                                 // 11
  var point;                                                                                                           // 12
  if (index >= O.length) return { value: undefined, done: true };                                                      // 13
  point = $at(O, index);                                                                                               // 14
  this._i += point.length;                                                                                             // 15
  return { value: point, done: false };                                                                                // 16
});                                                                                                                    // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_string-at.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_string-at.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toInteger = require('./_to-integer');                                                                              // 1
var defined = require('./_defined');                                                                                   // 2
// true  -> String#at                                                                                                  // 3
// false -> String#codePointAt                                                                                         // 4
module.exports = function (TO_STRING) {                                                                                // 5
  return function (that, pos) {                                                                                        // 6
    var s = String(defined(that));                                                                                     // 7
    var i = toInteger(pos);                                                                                            // 8
    var l = s.length;                                                                                                  // 9
    var a, b;                                                                                                          // 10
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;                                                            // 11
    a = s.charCodeAt(i);                                                                                               // 12
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff                 // 13
      ? TO_STRING ? s.charAt(i) : a                                                                                    // 14
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;                                   // 15
  };                                                                                                                   // 16
};                                                                                                                     // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-integer.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-integer.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.4 ToInteger                                                                                                     // 1
var ceil = Math.ceil;                                                                                                  // 2
var floor = Math.floor;                                                                                                // 3
module.exports = function (it) {                                                                                       // 4
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);                                                            // 5
};                                                                                                                     // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_defined.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_defined.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.1 RequireObjectCoercible(argument)                                                                              // 1
module.exports = function (it) {                                                                                       // 2
  if (it == undefined) throw TypeError("Can't call method on  " + it);                                                 // 3
  return it;                                                                                                           // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-define.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iter-define.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var LIBRARY = require('./_library');                                                                                   // 2
var $export = require('./_export');                                                                                    // 3
var redefine = require('./_redefine');                                                                                 // 4
var hide = require('./_hide');                                                                                         // 5
var has = require('./_has');                                                                                           // 6
var Iterators = require('./_iterators');                                                                               // 7
var $iterCreate = require('./_iter-create');                                                                           // 8
var setToStringTag = require('./_set-to-string-tag');                                                                  // 9
var getPrototypeOf = require('./_object-gpo');                                                                         // 10
var ITERATOR = require('./_wks')('iterator');                                                                          // 11
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`                                // 12
var FF_ITERATOR = '@@iterator';                                                                                        // 13
var KEYS = 'keys';                                                                                                     // 14
var VALUES = 'values';                                                                                                 // 15
                                                                                                                       // 16
var returnThis = function () { return this; };                                                                         // 17
                                                                                                                       // 18
module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {                                   // 19
  $iterCreate(Constructor, NAME, next);                                                                                // 20
  var getMethod = function (kind) {                                                                                    // 21
    if (!BUGGY && kind in proto) return proto[kind];                                                                   // 22
    switch (kind) {                                                                                                    // 23
      case KEYS: return function keys() { return new Constructor(this, kind); };                                       // 24
      case VALUES: return function values() { return new Constructor(this, kind); };                                   // 25
    } return function entries() { return new Constructor(this, kind); };                                               // 26
  };                                                                                                                   // 27
  var TAG = NAME + ' Iterator';                                                                                        // 28
  var DEF_VALUES = DEFAULT == VALUES;                                                                                  // 29
  var VALUES_BUG = false;                                                                                              // 30
  var proto = Base.prototype;                                                                                          // 31
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];                                    // 32
  var $default = (!BUGGY && $native) || getMethod(DEFAULT);                                                            // 33
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;                                  // 34
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;                                               // 35
  var methods, key, IteratorPrototype;                                                                                 // 36
  // Fix native                                                                                                        // 37
  if ($anyNative) {                                                                                                    // 38
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));                                                   // 39
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {                                            // 40
      // Set @@toStringTag to native iterators                                                                         // 41
      setToStringTag(IteratorPrototype, TAG, true);                                                                    // 42
      // fix for some old engines                                                                                      // 43
      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);                // 44
    }                                                                                                                  // 45
  }                                                                                                                    // 46
  // fix Array#{values, @@iterator}.name in V8 / FF                                                                    // 47
  if (DEF_VALUES && $native && $native.name !== VALUES) {                                                              // 48
    VALUES_BUG = true;                                                                                                 // 49
    $default = function values() { return $native.call(this); };                                                       // 50
  }                                                                                                                    // 51
  // Define iterator                                                                                                   // 52
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {                                             // 53
    hide(proto, ITERATOR, $default);                                                                                   // 54
  }                                                                                                                    // 55
  // Plug for library                                                                                                  // 56
  Iterators[NAME] = $default;                                                                                          // 57
  Iterators[TAG] = returnThis;                                                                                         // 58
  if (DEFAULT) {                                                                                                       // 59
    methods = {                                                                                                        // 60
      values: DEF_VALUES ? $default : getMethod(VALUES),                                                               // 61
      keys: IS_SET ? $default : getMethod(KEYS),                                                                       // 62
      entries: $entries                                                                                                // 63
    };                                                                                                                 // 64
    if (FORCED) for (key in methods) {                                                                                 // 65
      if (!(key in proto)) redefine(proto, key, methods[key]);                                                         // 66
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);                                      // 67
  }                                                                                                                    // 68
  return methods;                                                                                                      // 69
};                                                                                                                     // 70
                                                                                                                       // 71
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_library.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_library.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = true;                                                                                                 // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_export.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_export.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global = require('./_global');                                                                                     // 1
var core = require('./_core');                                                                                         // 2
var ctx = require('./_ctx');                                                                                           // 3
var hide = require('./_hide');                                                                                         // 4
var PROTOTYPE = 'prototype';                                                                                           // 5
                                                                                                                       // 6
var $export = function (type, name, source) {                                                                          // 7
  var IS_FORCED = type & $export.F;                                                                                    // 8
  var IS_GLOBAL = type & $export.G;                                                                                    // 9
  var IS_STATIC = type & $export.S;                                                                                    // 10
  var IS_PROTO = type & $export.P;                                                                                     // 11
  var IS_BIND = type & $export.B;                                                                                      // 12
  var IS_WRAP = type & $export.W;                                                                                      // 13
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});                                                    // 14
  var expProto = exports[PROTOTYPE];                                                                                   // 15
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];                        // 16
  var key, own, out;                                                                                                   // 17
  if (IS_GLOBAL) source = name;                                                                                        // 18
  for (key in source) {                                                                                                // 19
    // contains in native                                                                                              // 20
    own = !IS_FORCED && target && target[key] !== undefined;                                                           // 21
    if (own && key in exports) continue;                                                                               // 22
    // export native or passed                                                                                         // 23
    out = own ? target[key] : source[key];                                                                             // 24
    // prevent global pollution for namespaces                                                                         // 25
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]                                         // 26
    // bind timers to global for call from export context                                                              // 27
    : IS_BIND && own ? ctx(out, global)                                                                                // 28
    // wrap global constructors for prevent change them in library                                                     // 29
    : IS_WRAP && target[key] == out ? (function (C) {                                                                  // 30
      var F = function (a, b, c) {                                                                                     // 31
        if (this instanceof C) {                                                                                       // 32
          switch (arguments.length) {                                                                                  // 33
            case 0: return new C();                                                                                    // 34
            case 1: return new C(a);                                                                                   // 35
            case 2: return new C(a, b);                                                                                // 36
          } return new C(a, b, c);                                                                                     // 37
        } return C.apply(this, arguments);                                                                             // 38
      };                                                                                                               // 39
      F[PROTOTYPE] = C[PROTOTYPE];                                                                                     // 40
      return F;                                                                                                        // 41
    // make static versions for prototype methods                                                                      // 42
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;                                    // 43
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%                                                       // 44
    if (IS_PROTO) {                                                                                                    // 45
      (exports.virtual || (exports.virtual = {}))[key] = out;                                                          // 46
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%                                                   // 47
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);                                    // 48
    }                                                                                                                  // 49
  }                                                                                                                    // 50
};                                                                                                                     // 51
// type bitmap                                                                                                         // 52
$export.F = 1;   // forced                                                                                             // 53
$export.G = 2;   // global                                                                                             // 54
$export.S = 4;   // static                                                                                             // 55
$export.P = 8;   // proto                                                                                              // 56
$export.B = 16;  // bind                                                                                               // 57
$export.W = 32;  // wrap                                                                                               // 58
$export.U = 64;  // safe                                                                                               // 59
$export.R = 128; // real proto method for `library`                                                                    // 60
module.exports = $export;                                                                                              // 61
                                                                                                                       // 62
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_global.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_global.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                                                // 1
var global = module.exports = typeof window != 'undefined' && window.Math == Math                                      // 2
  ? window : typeof self != 'undefined' && self.Math == Math ? self                                                    // 3
  // eslint-disable-next-line no-new-func                                                                              // 4
  : Function('return this')();                                                                                         // 5
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef                                              // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_core.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_core.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var core = module.exports = { version: '2.5.3' };                                                                      // 1
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef                                                // 2
                                                                                                                       // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_ctx.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_ctx.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// optional / simple context binding                                                                                   // 1
var aFunction = require('./_a-function');                                                                              // 2
module.exports = function (fn, that, length) {                                                                         // 3
  aFunction(fn);                                                                                                       // 4
  if (that === undefined) return fn;                                                                                   // 5
  switch (length) {                                                                                                    // 6
    case 1: return function (a) {                                                                                      // 7
      return fn.call(that, a);                                                                                         // 8
    };                                                                                                                 // 9
    case 2: return function (a, b) {                                                                                   // 10
      return fn.call(that, a, b);                                                                                      // 11
    };                                                                                                                 // 12
    case 3: return function (a, b, c) {                                                                                // 13
      return fn.call(that, a, b, c);                                                                                   // 14
    };                                                                                                                 // 15
  }                                                                                                                    // 16
  return function (/* ...args */) {                                                                                    // 17
    return fn.apply(that, arguments);                                                                                  // 18
  };                                                                                                                   // 19
};                                                                                                                     // 20
                                                                                                                       // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_a-function.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_a-function.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function (it) {                                                                                       // 1
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');                                            // 2
  return it;                                                                                                           // 3
};                                                                                                                     // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_hide.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_hide.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dP = require('./_object-dp');                                                                                      // 1
var createDesc = require('./_property-desc');                                                                          // 2
module.exports = require('./_descriptors') ? function (object, key, value) {                                           // 3
  return dP.f(object, key, createDesc(1, value));                                                                      // 4
} : function (object, key, value) {                                                                                    // 5
  object[key] = value;                                                                                                 // 6
  return object;                                                                                                       // 7
};                                                                                                                     // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-dp.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-dp.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var anObject = require('./_an-object');                                                                                // 1
var IE8_DOM_DEFINE = require('./_ie8-dom-define');                                                                     // 2
var toPrimitive = require('./_to-primitive');                                                                          // 3
var dP = Object.defineProperty;                                                                                        // 4
                                                                                                                       // 5
exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {            // 6
  anObject(O);                                                                                                         // 7
  P = toPrimitive(P, true);                                                                                            // 8
  anObject(Attributes);                                                                                                // 9
  if (IE8_DOM_DEFINE) try {                                                                                            // 10
    return dP(O, P, Attributes);                                                                                       // 11
  } catch (e) { /* empty */ }                                                                                          // 12
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');                         // 13
  if ('value' in Attributes) O[P] = Attributes.value;                                                                  // 14
  return O;                                                                                                            // 15
};                                                                                                                     // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_an-object.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_an-object.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object');                                                                                // 1
module.exports = function (it) {                                                                                       // 2
  if (!isObject(it)) throw TypeError(it + ' is not an object!');                                                       // 3
  return it;                                                                                                           // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_is-object.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_is-object.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function (it) {                                                                                       // 1
  return typeof it === 'object' ? it !== null : typeof it === 'function';                                              // 2
};                                                                                                                     // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_ie8-dom-define.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_ie8-dom-define.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = !require('./_descriptors') && !require('./_fails')(function () {                                      // 1
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;       // 2
});                                                                                                                    // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_descriptors.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_descriptors.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Thank's IE8 for his funny defineProperty                                                                            // 1
module.exports = !require('./_fails')(function () {                                                                    // 2
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;                                    // 3
});                                                                                                                    // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_fails.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_fails.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function (exec) {                                                                                     // 1
  try {                                                                                                                // 2
    return !!exec();                                                                                                   // 3
  } catch (e) {                                                                                                        // 4
    return true;                                                                                                       // 5
  }                                                                                                                    // 6
};                                                                                                                     // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_dom-create.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_dom-create.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object');                                                                                // 1
var document = require('./_global').document;                                                                          // 2
// typeof document.createElement is 'object' in old IE                                                                 // 3
var is = isObject(document) && isObject(document.createElement);                                                       // 4
module.exports = function (it) {                                                                                       // 5
  return is ? document.createElement(it) : {};                                                                         // 6
};                                                                                                                     // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-primitive.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-primitive.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.1 ToPrimitive(input [, PreferredType])                                                                          // 1
var isObject = require('./_is-object');                                                                                // 2
// instead of the ES6 spec version, we didn't implement @@toPrimitive case                                             // 3
// and the second argument - flag - preferred type is a string                                                         // 4
module.exports = function (it, S) {                                                                                    // 5
  if (!isObject(it)) return it;                                                                                        // 6
  var fn, val;                                                                                                         // 7
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;                        // 8
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;                              // 9
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;                       // 10
  throw TypeError("Can't convert object to primitive value");                                                          // 11
};                                                                                                                     // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_property-desc.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_property-desc.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function (bitmap, value) {                                                                            // 1
  return {                                                                                                             // 2
    enumerable: !(bitmap & 1),                                                                                         // 3
    configurable: !(bitmap & 2),                                                                                       // 4
    writable: !(bitmap & 4),                                                                                           // 5
    value: value                                                                                                       // 6
  };                                                                                                                   // 7
};                                                                                                                     // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_redefine.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_redefine.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require('./_hide');                                                                                   // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_has.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_has.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var hasOwnProperty = {}.hasOwnProperty;                                                                                // 1
module.exports = function (it, key) {                                                                                  // 2
  return hasOwnProperty.call(it, key);                                                                                 // 3
};                                                                                                                     // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iterators.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iterators.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = {};                                                                                                   // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-create.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iter-create.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var create = require('./_object-create');                                                                              // 2
var descriptor = require('./_property-desc');                                                                          // 3
var setToStringTag = require('./_set-to-string-tag');                                                                  // 4
var IteratorPrototype = {};                                                                                            // 5
                                                                                                                       // 6
// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                                        // 7
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });                    // 8
                                                                                                                       // 9
module.exports = function (Constructor, NAME, next) {                                                                  // 10
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });                                    // 11
  setToStringTag(Constructor, NAME + ' Iterator');                                                                     // 12
};                                                                                                                     // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-create.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-create.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 1
var anObject = require('./_an-object');                                                                                // 2
var dPs = require('./_object-dps');                                                                                    // 3
var enumBugKeys = require('./_enum-bug-keys');                                                                         // 4
var IE_PROTO = require('./_shared-key')('IE_PROTO');                                                                   // 5
var Empty = function () { /* empty */ };                                                                               // 6
var PROTOTYPE = 'prototype';                                                                                           // 7
                                                                                                                       // 8
// Create object with fake `null` prototype: use iframe Object with cleared prototype                                  // 9
var createDict = function () {                                                                                         // 10
  // Thrash, waste and sodomy: IE GC bug                                                                               // 11
  var iframe = require('./_dom-create')('iframe');                                                                     // 12
  var i = enumBugKeys.length;                                                                                          // 13
  var lt = '<';                                                                                                        // 14
  var gt = '>';                                                                                                        // 15
  var iframeDocument;                                                                                                  // 16
  iframe.style.display = 'none';                                                                                       // 17
  require('./_html').appendChild(iframe);                                                                              // 18
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url                                                     // 19
  // createDict = iframe.contentWindow.Object;                                                                         // 20
  // html.removeChild(iframe);                                                                                         // 21
  iframeDocument = iframe.contentWindow.document;                                                                      // 22
  iframeDocument.open();                                                                                               // 23
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);                                // 24
  iframeDocument.close();                                                                                              // 25
  createDict = iframeDocument.F;                                                                                       // 26
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];                                                            // 27
  return createDict();                                                                                                 // 28
};                                                                                                                     // 29
                                                                                                                       // 30
module.exports = Object.create || function create(O, Properties) {                                                     // 31
  var result;                                                                                                          // 32
  if (O !== null) {                                                                                                    // 33
    Empty[PROTOTYPE] = anObject(O);                                                                                    // 34
    result = new Empty();                                                                                              // 35
    Empty[PROTOTYPE] = null;                                                                                           // 36
    // add "__proto__" for Object.getPrototypeOf polyfill                                                              // 37
    result[IE_PROTO] = O;                                                                                              // 38
  } else result = createDict();                                                                                        // 39
  return Properties === undefined ? result : dPs(result, Properties);                                                  // 40
};                                                                                                                     // 41
                                                                                                                       // 42
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-dps.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-dps.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dP = require('./_object-dp');                                                                                      // 1
var anObject = require('./_an-object');                                                                                // 2
var getKeys = require('./_object-keys');                                                                               // 3
                                                                                                                       // 4
module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {      // 5
  anObject(O);                                                                                                         // 6
  var keys = getKeys(Properties);                                                                                      // 7
  var length = keys.length;                                                                                            // 8
  var i = 0;                                                                                                           // 9
  var P;                                                                                                               // 10
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);                                                            // 11
  return O;                                                                                                            // 12
};                                                                                                                     // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-keys.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-keys.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.14 / 15.2.3.14 Object.keys(O)                                                                                // 1
var $keys = require('./_object-keys-internal');                                                                        // 2
var enumBugKeys = require('./_enum-bug-keys');                                                                         // 3
                                                                                                                       // 4
module.exports = Object.keys || function keys(O) {                                                                     // 5
  return $keys(O, enumBugKeys);                                                                                        // 6
};                                                                                                                     // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-keys-internal.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-keys-internal.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var has = require('./_has');                                                                                           // 1
var toIObject = require('./_to-iobject');                                                                              // 2
var arrayIndexOf = require('./_array-includes')(false);                                                                // 3
var IE_PROTO = require('./_shared-key')('IE_PROTO');                                                                   // 4
                                                                                                                       // 5
module.exports = function (object, names) {                                                                            // 6
  var O = toIObject(object);                                                                                           // 7
  var i = 0;                                                                                                           // 8
  var result = [];                                                                                                     // 9
  var key;                                                                                                             // 10
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);                                                 // 11
  // Don't enum bug & hidden keys                                                                                      // 12
  while (names.length > i) if (has(O, key = names[i++])) {                                                             // 13
    ~arrayIndexOf(result, key) || result.push(key);                                                                    // 14
  }                                                                                                                    // 15
  return result;                                                                                                       // 16
};                                                                                                                     // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-iobject.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-iobject.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// to indexed object, toObject with fallback for non-array-like ES3 strings                                            // 1
var IObject = require('./_iobject');                                                                                   // 2
var defined = require('./_defined');                                                                                   // 3
module.exports = function (it) {                                                                                       // 4
  return IObject(defined(it));                                                                                         // 5
};                                                                                                                     // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iobject.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iobject.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// fallback for non-array-like ES3 and non-enumerable old V8 strings                                                   // 1
var cof = require('./_cof');                                                                                           // 2
// eslint-disable-next-line no-prototype-builtins                                                                      // 3
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {                                        // 4
  return cof(it) == 'String' ? it.split('') : Object(it);                                                              // 5
};                                                                                                                     // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_cof.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_cof.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toString = {}.toString;                                                                                            // 1
                                                                                                                       // 2
module.exports = function (it) {                                                                                       // 3
  return toString.call(it).slice(8, -1);                                                                               // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_array-includes.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_array-includes.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// false -> Array#indexOf                                                                                              // 1
// true  -> Array#includes                                                                                             // 2
var toIObject = require('./_to-iobject');                                                                              // 3
var toLength = require('./_to-length');                                                                                // 4
var toAbsoluteIndex = require('./_to-absolute-index');                                                                 // 5
module.exports = function (IS_INCLUDES) {                                                                              // 6
  return function ($this, el, fromIndex) {                                                                             // 7
    var O = toIObject($this);                                                                                          // 8
    var length = toLength(O.length);                                                                                   // 9
    var index = toAbsoluteIndex(fromIndex, length);                                                                    // 10
    var value;                                                                                                         // 11
    // Array#includes uses SameValueZero equality algorithm                                                            // 12
    // eslint-disable-next-line no-self-compare                                                                        // 13
    if (IS_INCLUDES && el != el) while (length > index) {                                                              // 14
      value = O[index++];                                                                                              // 15
      // eslint-disable-next-line no-self-compare                                                                      // 16
      if (value != value) return true;                                                                                 // 17
    // Array#indexOf ignores holes, Array#includes - not                                                               // 18
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {                                             // 19
      if (O[index] === el) return IS_INCLUDES || index || 0;                                                           // 20
    } return !IS_INCLUDES && -1;                                                                                       // 21
  };                                                                                                                   // 22
};                                                                                                                     // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-length.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-length.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.15 ToLength                                                                                                     // 1
var toInteger = require('./_to-integer');                                                                              // 2
var min = Math.min;                                                                                                    // 3
module.exports = function (it) {                                                                                       // 4
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991                      // 5
};                                                                                                                     // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-absolute-index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-absolute-index.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toInteger = require('./_to-integer');                                                                              // 1
var max = Math.max;                                                                                                    // 2
var min = Math.min;                                                                                                    // 3
module.exports = function (index, length) {                                                                            // 4
  index = toInteger(index);                                                                                            // 5
  return index < 0 ? max(index + length, 0) : min(index, length);                                                      // 6
};                                                                                                                     // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_shared-key.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_shared-key.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var shared = require('./_shared')('keys');                                                                             // 1
var uid = require('./_uid');                                                                                           // 2
module.exports = function (key) {                                                                                      // 3
  return shared[key] || (shared[key] = uid(key));                                                                      // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_shared.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_shared.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global = require('./_global');                                                                                     // 1
var SHARED = '__core-js_shared__';                                                                                     // 2
var store = global[SHARED] || (global[SHARED] = {});                                                                   // 3
module.exports = function (key) {                                                                                      // 4
  return store[key] || (store[key] = {});                                                                              // 5
};                                                                                                                     // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_uid.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_uid.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var id = 0;                                                                                                            // 1
var px = Math.random();                                                                                                // 2
module.exports = function (key) {                                                                                      // 3
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));                               // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_enum-bug-keys.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_enum-bug-keys.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// IE 8- don't enum bug keys                                                                                           // 1
module.exports = (                                                                                                     // 2
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'                      // 3
).split(',');                                                                                                          // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_html.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_html.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var document = require('./_global').document;                                                                          // 1
module.exports = document && document.documentElement;                                                                 // 2
                                                                                                                       // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_set-to-string-tag.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_set-to-string-tag.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var def = require('./_object-dp').f;                                                                                   // 1
var has = require('./_has');                                                                                           // 2
var TAG = require('./_wks')('toStringTag');                                                                            // 3
                                                                                                                       // 4
module.exports = function (it, tag, stat) {                                                                            // 5
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });                // 6
};                                                                                                                     // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_wks.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_wks.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var store = require('./_shared')('wks');                                                                               // 1
var uid = require('./_uid');                                                                                           // 2
var Symbol = require('./_global').Symbol;                                                                              // 3
var USE_SYMBOL = typeof Symbol == 'function';                                                                          // 4
                                                                                                                       // 5
var $exports = module.exports = function (name) {                                                                      // 6
  return store[name] || (store[name] =                                                                                 // 7
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));                                      // 8
};                                                                                                                     // 9
                                                                                                                       // 10
$exports.store = store;                                                                                                // 11
                                                                                                                       // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-gpo.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gpo.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)                                                                        // 1
var has = require('./_has');                                                                                           // 2
var toObject = require('./_to-object');                                                                                // 3
var IE_PROTO = require('./_shared-key')('IE_PROTO');                                                                   // 4
var ObjectProto = Object.prototype;                                                                                    // 5
                                                                                                                       // 6
module.exports = Object.getPrototypeOf || function (O) {                                                               // 7
  O = toObject(O);                                                                                                     // 8
  if (has(O, IE_PROTO)) return O[IE_PROTO];                                                                            // 9
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {                                              // 10
    return O.constructor.prototype;                                                                                    // 11
  } return O instanceof Object ? ObjectProto : null;                                                                   // 12
};                                                                                                                     // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-object.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_to-object.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.13 ToObject(argument)                                                                                           // 1
var defined = require('./_defined');                                                                                   // 2
module.exports = function (it) {                                                                                       // 3
  return Object(defined(it));                                                                                          // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"web.dom.iterable.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/web.dom.iterable.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./es6.array.iterator');                                                                                       // 1
var global = require('./_global');                                                                                     // 2
var hide = require('./_hide');                                                                                         // 3
var Iterators = require('./_iterators');                                                                               // 4
var TO_STRING_TAG = require('./_wks')('toStringTag');                                                                  // 5
                                                                                                                       // 6
var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +         // 7
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +   // 8
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +   // 9
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +     // 10
  'TextTrackList,TouchList').split(',');                                                                               // 11
                                                                                                                       // 12
for (var i = 0; i < DOMIterables.length; i++) {                                                                        // 13
  var NAME = DOMIterables[i];                                                                                          // 14
  var Collection = global[NAME];                                                                                       // 15
  var proto = Collection && Collection.prototype;                                                                      // 16
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);                                                // 17
  Iterators[NAME] = Iterators.Array;                                                                                   // 18
}                                                                                                                      // 19
                                                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.iterator.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.array.iterator.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var addToUnscopables = require('./_add-to-unscopables');                                                               // 2
var step = require('./_iter-step');                                                                                    // 3
var Iterators = require('./_iterators');                                                                               // 4
var toIObject = require('./_to-iobject');                                                                              // 5
                                                                                                                       // 6
// 22.1.3.4 Array.prototype.entries()                                                                                  // 7
// 22.1.3.13 Array.prototype.keys()                                                                                    // 8
// 22.1.3.29 Array.prototype.values()                                                                                  // 9
// 22.1.3.30 Array.prototype[@@iterator]()                                                                             // 10
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {                                 // 11
  this._t = toIObject(iterated); // target                                                                             // 12
  this._i = 0;                   // next index                                                                         // 13
  this._k = kind;                // kind                                                                               // 14
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                                          // 15
}, function () {                                                                                                       // 16
  var O = this._t;                                                                                                     // 17
  var kind = this._k;                                                                                                  // 18
  var index = this._i++;                                                                                               // 19
  if (!O || index >= O.length) {                                                                                       // 20
    this._t = undefined;                                                                                               // 21
    return step(1);                                                                                                    // 22
  }                                                                                                                    // 23
  if (kind == 'keys') return step(0, index);                                                                           // 24
  if (kind == 'values') return step(0, O[index]);                                                                      // 25
  return step(0, [index, O[index]]);                                                                                   // 26
}, 'values');                                                                                                          // 27
                                                                                                                       // 28
// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                                                 // 29
Iterators.Arguments = Iterators.Array;                                                                                 // 30
                                                                                                                       // 31
addToUnscopables('keys');                                                                                              // 32
addToUnscopables('values');                                                                                            // 33
addToUnscopables('entries');                                                                                           // 34
                                                                                                                       // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_add-to-unscopables.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_add-to-unscopables.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function () { /* empty */ };                                                                          // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-step.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iter-step.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function (done, value) {                                                                              // 1
  return { value: value, done: !!done };                                                                               // 2
};                                                                                                                     // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_wks-ext.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_wks-ext.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = require('./_wks');                                                                                         // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.symbol.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.symbol.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// ECMAScript 6 symbols shim                                                                                           // 2
var global = require('./_global');                                                                                     // 3
var has = require('./_has');                                                                                           // 4
var DESCRIPTORS = require('./_descriptors');                                                                           // 5
var $export = require('./_export');                                                                                    // 6
var redefine = require('./_redefine');                                                                                 // 7
var META = require('./_meta').KEY;                                                                                     // 8
var $fails = require('./_fails');                                                                                      // 9
var shared = require('./_shared');                                                                                     // 10
var setToStringTag = require('./_set-to-string-tag');                                                                  // 11
var uid = require('./_uid');                                                                                           // 12
var wks = require('./_wks');                                                                                           // 13
var wksExt = require('./_wks-ext');                                                                                    // 14
var wksDefine = require('./_wks-define');                                                                              // 15
var enumKeys = require('./_enum-keys');                                                                                // 16
var isArray = require('./_is-array');                                                                                  // 17
var anObject = require('./_an-object');                                                                                // 18
var isObject = require('./_is-object');                                                                                // 19
var toIObject = require('./_to-iobject');                                                                              // 20
var toPrimitive = require('./_to-primitive');                                                                          // 21
var createDesc = require('./_property-desc');                                                                          // 22
var _create = require('./_object-create');                                                                             // 23
var gOPNExt = require('./_object-gopn-ext');                                                                           // 24
var $GOPD = require('./_object-gopd');                                                                                 // 25
var $DP = require('./_object-dp');                                                                                     // 26
var $keys = require('./_object-keys');                                                                                 // 27
var gOPD = $GOPD.f;                                                                                                    // 28
var dP = $DP.f;                                                                                                        // 29
var gOPN = gOPNExt.f;                                                                                                  // 30
var $Symbol = global.Symbol;                                                                                           // 31
var $JSON = global.JSON;                                                                                               // 32
var _stringify = $JSON && $JSON.stringify;                                                                             // 33
var PROTOTYPE = 'prototype';                                                                                           // 34
var HIDDEN = wks('_hidden');                                                                                           // 35
var TO_PRIMITIVE = wks('toPrimitive');                                                                                 // 36
var isEnum = {}.propertyIsEnumerable;                                                                                  // 37
var SymbolRegistry = shared('symbol-registry');                                                                        // 38
var AllSymbols = shared('symbols');                                                                                    // 39
var OPSymbols = shared('op-symbols');                                                                                  // 40
var ObjectProto = Object[PROTOTYPE];                                                                                   // 41
var USE_NATIVE = typeof $Symbol == 'function';                                                                         // 42
var QObject = global.QObject;                                                                                          // 43
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173                                      // 44
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;                                         // 45
                                                                                                                       // 46
// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687                                         // 47
var setSymbolDesc = DESCRIPTORS && $fails(function () {                                                                // 48
  return _create(dP({}, 'a', {                                                                                         // 49
    get: function () { return dP(this, 'a', { value: 7 }).a; }                                                         // 50
  })).a != 7;                                                                                                          // 51
}) ? function (it, key, D) {                                                                                           // 52
  var protoDesc = gOPD(ObjectProto, key);                                                                              // 53
  if (protoDesc) delete ObjectProto[key];                                                                              // 54
  dP(it, key, D);                                                                                                      // 55
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);                                                // 56
} : dP;                                                                                                                // 57
                                                                                                                       // 58
var wrap = function (tag) {                                                                                            // 59
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);                                                             // 60
  sym._k = tag;                                                                                                        // 61
  return sym;                                                                                                          // 62
};                                                                                                                     // 63
                                                                                                                       // 64
var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {                                     // 65
  return typeof it == 'symbol';                                                                                        // 66
} : function (it) {                                                                                                    // 67
  return it instanceof $Symbol;                                                                                        // 68
};                                                                                                                     // 69
                                                                                                                       // 70
var $defineProperty = function defineProperty(it, key, D) {                                                            // 71
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);                                                          // 72
  anObject(it);                                                                                                        // 73
  key = toPrimitive(key, true);                                                                                        // 74
  anObject(D);                                                                                                         // 75
  if (has(AllSymbols, key)) {                                                                                          // 76
    if (!D.enumerable) {                                                                                               // 77
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));                                                         // 78
      it[HIDDEN][key] = true;                                                                                          // 79
    } else {                                                                                                           // 80
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;                                                 // 81
      D = _create(D, { enumerable: createDesc(0, false) });                                                            // 82
    } return setSymbolDesc(it, key, D);                                                                                // 83
  } return dP(it, key, D);                                                                                             // 84
};                                                                                                                     // 85
var $defineProperties = function defineProperties(it, P) {                                                             // 86
  anObject(it);                                                                                                        // 87
  var keys = enumKeys(P = toIObject(P));                                                                               // 88
  var i = 0;                                                                                                           // 89
  var l = keys.length;                                                                                                 // 90
  var key;                                                                                                             // 91
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);                                                          // 92
  return it;                                                                                                           // 93
};                                                                                                                     // 94
var $create = function create(it, P) {                                                                                 // 95
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);                                            // 96
};                                                                                                                     // 97
var $propertyIsEnumerable = function propertyIsEnumerable(key) {                                                       // 98
  var E = isEnum.call(this, key = toPrimitive(key, true));                                                             // 99
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;                              // 100
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;           // 101
};                                                                                                                     // 102
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {                                           // 103
  it = toIObject(it);                                                                                                  // 104
  key = toPrimitive(key, true);                                                                                        // 105
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;                                      // 106
  var D = gOPD(it, key);                                                                                               // 107
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;                         // 108
  return D;                                                                                                            // 109
};                                                                                                                     // 110
var $getOwnPropertyNames = function getOwnPropertyNames(it) {                                                          // 111
  var names = gOPN(toIObject(it));                                                                                     // 112
  var result = [];                                                                                                     // 113
  var i = 0;                                                                                                           // 114
  var key;                                                                                                             // 115
  while (names.length > i) {                                                                                           // 116
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);                          // 117
  } return result;                                                                                                     // 118
};                                                                                                                     // 119
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {                                                      // 120
  var IS_OP = it === ObjectProto;                                                                                      // 121
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));                                                                 // 122
  var result = [];                                                                                                     // 123
  var i = 0;                                                                                                           // 124
  var key;                                                                                                             // 125
  while (names.length > i) {                                                                                           // 126
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);     // 127
  } return result;                                                                                                     // 128
};                                                                                                                     // 129
                                                                                                                       // 130
// 19.4.1.1 Symbol([description])                                                                                      // 131
if (!USE_NATIVE) {                                                                                                     // 132
  $Symbol = function Symbol() {                                                                                        // 133
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');                                      // 134
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);                                                    // 135
    var $set = function (value) {                                                                                      // 136
      if (this === ObjectProto) $set.call(OPSymbols, value);                                                           // 137
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;                                      // 138
      setSymbolDesc(this, tag, createDesc(1, value));                                                                  // 139
    };                                                                                                                 // 140
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });                     // 141
    return wrap(tag);                                                                                                  // 142
  };                                                                                                                   // 143
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {                                                       // 144
    return this._k;                                                                                                    // 145
  });                                                                                                                  // 146
                                                                                                                       // 147
  $GOPD.f = $getOwnPropertyDescriptor;                                                                                 // 148
  $DP.f = $defineProperty;                                                                                             // 149
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;                                                      // 150
  require('./_object-pie').f = $propertyIsEnumerable;                                                                  // 151
  require('./_object-gops').f = $getOwnPropertySymbols;                                                                // 152
                                                                                                                       // 153
  if (DESCRIPTORS && !require('./_library')) {                                                                         // 154
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);                                        // 155
  }                                                                                                                    // 156
                                                                                                                       // 157
  wksExt.f = function (name) {                                                                                         // 158
    return wrap(wks(name));                                                                                            // 159
  };                                                                                                                   // 160
}                                                                                                                      // 161
                                                                                                                       // 162
$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });                                         // 163
                                                                                                                       // 164
for (var es6Symbols = (                                                                                                // 165
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'     // 167
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);                                                      // 168
                                                                                                                       // 169
for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);   // 170
                                                                                                                       // 171
$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {                                                               // 172
  // 19.4.2.1 Symbol.for(key)                                                                                          // 173
  'for': function (key) {                                                                                              // 174
    return has(SymbolRegistry, key += '')                                                                              // 175
      ? SymbolRegistry[key]                                                                                            // 176
      : SymbolRegistry[key] = $Symbol(key);                                                                            // 177
  },                                                                                                                   // 178
  // 19.4.2.5 Symbol.keyFor(sym)                                                                                       // 179
  keyFor: function keyFor(sym) {                                                                                       // 180
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');                                                    // 181
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;                                       // 182
  },                                                                                                                   // 183
  useSetter: function () { setter = true; },                                                                           // 184
  useSimple: function () { setter = false; }                                                                           // 185
});                                                                                                                    // 186
                                                                                                                       // 187
$export($export.S + $export.F * !USE_NATIVE, 'Object', {                                                               // 188
  // 19.1.2.2 Object.create(O [, Properties])                                                                          // 189
  create: $create,                                                                                                     // 190
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)                                                                  // 191
  defineProperty: $defineProperty,                                                                                     // 192
  // 19.1.2.3 Object.defineProperties(O, Properties)                                                                   // 193
  defineProperties: $defineProperties,                                                                                 // 194
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                    // 195
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,                                                                 // 196
  // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                            // 197
  getOwnPropertyNames: $getOwnPropertyNames,                                                                           // 198
  // 19.1.2.8 Object.getOwnPropertySymbols(O)                                                                          // 199
  getOwnPropertySymbols: $getOwnPropertySymbols                                                                        // 200
});                                                                                                                    // 201
                                                                                                                       // 202
// 24.3.2 JSON.stringify(value [, replacer [, space]])                                                                 // 203
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {                                          // 204
  var S = $Symbol();                                                                                                   // 205
  // MS Edge converts symbol values to JSON as {}                                                                      // 206
  // WebKit converts symbol values to JSON as null                                                                     // 207
  // V8 throws on boxed symbols                                                                                        // 208
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';                 // 209
})), 'JSON', {                                                                                                         // 210
  stringify: function stringify(it) {                                                                                  // 211
    var args = [it];                                                                                                   // 212
    var i = 1;                                                                                                         // 213
    var replacer, $replacer;                                                                                           // 214
    while (arguments.length > i) args.push(arguments[i++]);                                                            // 215
    $replacer = replacer = args[1];                                                                                    // 216
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined            // 217
    if (!isArray(replacer)) replacer = function (key, value) {                                                         // 218
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);                                    // 219
      if (!isSymbol(value)) return value;                                                                              // 220
    };                                                                                                                 // 221
    args[1] = replacer;                                                                                                // 222
    return _stringify.apply($JSON, args);                                                                              // 223
  }                                                                                                                    // 224
});                                                                                                                    // 225
                                                                                                                       // 226
// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)                                                                      // 227
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);  // 228
// 19.4.3.5 Symbol.prototype[@@toStringTag]                                                                            // 229
setToStringTag($Symbol, 'Symbol');                                                                                     // 230
// 20.2.1.9 Math[@@toStringTag]                                                                                        // 231
setToStringTag(Math, 'Math', true);                                                                                    // 232
// 24.3.3 JSON[@@toStringTag]                                                                                          // 233
setToStringTag(global.JSON, 'JSON', true);                                                                             // 234
                                                                                                                       // 235
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_meta.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_meta.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var META = require('./_uid')('meta');                                                                                  // 1
var isObject = require('./_is-object');                                                                                // 2
var has = require('./_has');                                                                                           // 3
var setDesc = require('./_object-dp').f;                                                                               // 4
var id = 0;                                                                                                            // 5
var isExtensible = Object.isExtensible || function () {                                                                // 6
  return true;                                                                                                         // 7
};                                                                                                                     // 8
var FREEZE = !require('./_fails')(function () {                                                                        // 9
  return isExtensible(Object.preventExtensions({}));                                                                   // 10
});                                                                                                                    // 11
var setMeta = function (it) {                                                                                          // 12
  setDesc(it, META, { value: {                                                                                         // 13
    i: 'O' + ++id, // object ID                                                                                        // 14
    w: {}          // weak collections IDs                                                                             // 15
  } });                                                                                                                // 16
};                                                                                                                     // 17
var fastKey = function (it, create) {                                                                                  // 18
  // return primitive with prefix                                                                                      // 19
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;                     // 20
  if (!has(it, META)) {                                                                                                // 21
    // can't set metadata to uncaught frozen object                                                                    // 22
    if (!isExtensible(it)) return 'F';                                                                                 // 23
    // not necessary to add metadata                                                                                   // 24
    if (!create) return 'E';                                                                                           // 25
    // add missing metadata                                                                                            // 26
    setMeta(it);                                                                                                       // 27
  // return object ID                                                                                                  // 28
  } return it[META].i;                                                                                                 // 29
};                                                                                                                     // 30
var getWeak = function (it, create) {                                                                                  // 31
  if (!has(it, META)) {                                                                                                // 32
    // can't set metadata to uncaught frozen object                                                                    // 33
    if (!isExtensible(it)) return true;                                                                                // 34
    // not necessary to add metadata                                                                                   // 35
    if (!create) return false;                                                                                         // 36
    // add missing metadata                                                                                            // 37
    setMeta(it);                                                                                                       // 38
  // return hash weak collections IDs                                                                                  // 39
  } return it[META].w;                                                                                                 // 40
};                                                                                                                     // 41
// add metadata on freeze-family methods calling                                                                       // 42
var onFreeze = function (it) {                                                                                         // 43
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);                                          // 44
  return it;                                                                                                           // 45
};                                                                                                                     // 46
var meta = module.exports = {                                                                                          // 47
  KEY: META,                                                                                                           // 48
  NEED: false,                                                                                                         // 49
  fastKey: fastKey,                                                                                                    // 50
  getWeak: getWeak,                                                                                                    // 51
  onFreeze: onFreeze                                                                                                   // 52
};                                                                                                                     // 53
                                                                                                                       // 54
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_wks-define.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_wks-define.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global = require('./_global');                                                                                     // 1
var core = require('./_core');                                                                                         // 2
var LIBRARY = require('./_library');                                                                                   // 3
var wksExt = require('./_wks-ext');                                                                                    // 4
var defineProperty = require('./_object-dp').f;                                                                        // 5
module.exports = function (name) {                                                                                     // 6
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});                                     // 7
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });           // 8
};                                                                                                                     // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_enum-keys.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_enum-keys.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// all enumerable object keys, includes symbols                                                                        // 1
var getKeys = require('./_object-keys');                                                                               // 2
var gOPS = require('./_object-gops');                                                                                  // 3
var pIE = require('./_object-pie');                                                                                    // 4
module.exports = function (it) {                                                                                       // 5
  var result = getKeys(it);                                                                                            // 6
  var getSymbols = gOPS.f;                                                                                             // 7
  if (getSymbols) {                                                                                                    // 8
    var symbols = getSymbols(it);                                                                                      // 9
    var isEnum = pIE.f;                                                                                                // 10
    var i = 0;                                                                                                         // 11
    var key;                                                                                                           // 12
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);                              // 13
  } return result;                                                                                                     // 14
};                                                                                                                     // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-gops.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gops.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = Object.getOwnPropertySymbols;                                                                              // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-pie.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-pie.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = {}.propertyIsEnumerable;                                                                                   // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_is-array.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_is-array.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.2 IsArray(argument)                                                                                             // 1
var cof = require('./_cof');                                                                                           // 2
module.exports = Array.isArray || function isArray(arg) {                                                              // 3
  return cof(arg) == 'Array';                                                                                          // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-gopn-ext.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gopn-ext.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window                                           // 1
var toIObject = require('./_to-iobject');                                                                              // 2
var gOPN = require('./_object-gopn').f;                                                                                // 3
var toString = {}.toString;                                                                                            // 4
                                                                                                                       // 5
var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames                                    // 6
  ? Object.getOwnPropertyNames(window) : [];                                                                           // 7
                                                                                                                       // 8
var getWindowNames = function (it) {                                                                                   // 9
  try {                                                                                                                // 10
    return gOPN(it);                                                                                                   // 11
  } catch (e) {                                                                                                        // 12
    return windowNames.slice();                                                                                        // 13
  }                                                                                                                    // 14
};                                                                                                                     // 15
                                                                                                                       // 16
module.exports.f = function getOwnPropertyNames(it) {                                                                  // 17
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));             // 18
};                                                                                                                     // 19
                                                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-gopn.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gopn.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)                                                                   // 1
var $keys = require('./_object-keys-internal');                                                                        // 2
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');                                            // 3
                                                                                                                       // 4
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {                                            // 5
  return $keys(O, hiddenKeys);                                                                                         // 6
};                                                                                                                     // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-gopd.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-gopd.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var pIE = require('./_object-pie');                                                                                    // 1
var createDesc = require('./_property-desc');                                                                          // 2
var toIObject = require('./_to-iobject');                                                                              // 3
var toPrimitive = require('./_to-primitive');                                                                          // 4
var has = require('./_has');                                                                                           // 5
var IE8_DOM_DEFINE = require('./_ie8-dom-define');                                                                     // 6
var gOPD = Object.getOwnPropertyDescriptor;                                                                            // 7
                                                                                                                       // 8
exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {                               // 9
  O = toIObject(O);                                                                                                    // 10
  P = toPrimitive(P, true);                                                                                            // 11
  if (IE8_DOM_DEFINE) try {                                                                                            // 12
    return gOPD(O, P);                                                                                                 // 13
  } catch (e) { /* empty */ }                                                                                          // 14
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);                                                           // 15
};                                                                                                                     // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.to-string.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.object.to-string.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es7.symbol.async-iterator.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es7.symbol.async-iterator.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./_wks-define')('asyncIterator');                                                                             // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es7.symbol.observable.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es7.symbol.observable.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./_wks-define')('observable');                                                                                // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.set-prototype-of.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.object.set-prototype-of.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.3.19 Object.setPrototypeOf(O, proto)                                                                           // 1
var $export = require('./_export');                                                                                    // 2
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });                                         // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_set-proto.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_set-proto.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Works with __proto__ only. Old v8 can't work with null proto objects.                                               // 1
/* eslint-disable no-proto */                                                                                          // 2
var isObject = require('./_is-object');                                                                                // 3
var anObject = require('./_an-object');                                                                                // 4
var check = function (O, proto) {                                                                                      // 5
  anObject(O);                                                                                                         // 6
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");                        // 7
};                                                                                                                     // 8
module.exports = {                                                                                                     // 9
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line                                            // 10
    function (test, buggy, set) {                                                                                      // 11
      try {                                                                                                            // 12
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);     // 13
        set(test, []);                                                                                                 // 14
        buggy = !(test instanceof Array);                                                                              // 15
      } catch (e) { buggy = true; }                                                                                    // 16
      return function setPrototypeOf(O, proto) {                                                                       // 17
        check(O, proto);                                                                                               // 18
        if (buggy) O.__proto__ = proto;                                                                                // 19
        else set(O, proto);                                                                                            // 20
        return O;                                                                                                      // 21
      };                                                                                                               // 22
    }({}, false) : undefined),                                                                                         // 23
  check: check                                                                                                         // 24
};                                                                                                                     // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.create.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.object.create.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export');                                                                                    // 1
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 2
$export($export.S, 'Object', { create: require('./_object-create') });                                                 // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.from.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.array.from.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var ctx = require('./_ctx');                                                                                           // 2
var $export = require('./_export');                                                                                    // 3
var toObject = require('./_to-object');                                                                                // 4
var call = require('./_iter-call');                                                                                    // 5
var isArrayIter = require('./_is-array-iter');                                                                         // 6
var toLength = require('./_to-length');                                                                                // 7
var createProperty = require('./_create-property');                                                                    // 8
var getIterFn = require('./core.get-iterator-method');                                                                 // 9
                                                                                                                       // 10
$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {          // 11
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)                                            // 12
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {                                      // 13
    var O = toObject(arrayLike);                                                                                       // 14
    var C = typeof this == 'function' ? this : Array;                                                                  // 15
    var aLen = arguments.length;                                                                                       // 16
    var mapfn = aLen > 1 ? arguments[1] : undefined;                                                                   // 17
    var mapping = mapfn !== undefined;                                                                                 // 18
    var index = 0;                                                                                                     // 19
    var iterFn = getIterFn(O);                                                                                         // 20
    var length, result, step, iterator;                                                                                // 21
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);                                           // 22
    // if object isn't iterable or it's array with default iterator - use simple case                                  // 23
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {                                                 // 24
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {                     // 25
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);        // 26
      }                                                                                                                // 27
    } else {                                                                                                           // 28
      length = toLength(O.length);                                                                                     // 29
      for (result = new C(length); length > index; index++) {                                                          // 30
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);                                    // 31
      }                                                                                                                // 32
    }                                                                                                                  // 33
    result.length = index;                                                                                             // 34
    return result;                                                                                                     // 35
  }                                                                                                                    // 36
});                                                                                                                    // 37
                                                                                                                       // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-call.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iter-call.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// call something on iterator step with safe closing on error                                                          // 1
var anObject = require('./_an-object');                                                                                // 2
module.exports = function (iterator, fn, value, entries) {                                                             // 3
  try {                                                                                                                // 4
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);                                                     // 5
  // 7.4.6 IteratorClose(iterator, completion)                                                                         // 6
  } catch (e) {                                                                                                        // 7
    var ret = iterator['return'];                                                                                      // 8
    if (ret !== undefined) anObject(ret.call(iterator));                                                               // 9
    throw e;                                                                                                           // 10
  }                                                                                                                    // 11
};                                                                                                                     // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_is-array-iter.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_is-array-iter.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// check on default Array iterator                                                                                     // 1
var Iterators = require('./_iterators');                                                                               // 2
var ITERATOR = require('./_wks')('iterator');                                                                          // 3
var ArrayProto = Array.prototype;                                                                                      // 4
                                                                                                                       // 5
module.exports = function (it) {                                                                                       // 6
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);                                  // 7
};                                                                                                                     // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_create-property.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_create-property.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $defineProperty = require('./_object-dp');                                                                         // 2
var createDesc = require('./_property-desc');                                                                          // 3
                                                                                                                       // 4
module.exports = function (object, index, value) {                                                                     // 5
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));                                         // 6
  else object[index] = value;                                                                                          // 7
};                                                                                                                     // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"core.get-iterator-method.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/core.get-iterator-method.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var classof = require('./_classof');                                                                                   // 1
var ITERATOR = require('./_wks')('iterator');                                                                          // 2
var Iterators = require('./_iterators');                                                                               // 3
module.exports = require('./_core').getIteratorMethod = function (it) {                                                // 4
  if (it != undefined) return it[ITERATOR]                                                                             // 5
    || it['@@iterator']                                                                                                // 6
    || Iterators[classof(it)];                                                                                         // 7
};                                                                                                                     // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_classof.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_classof.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// getting tag from 19.1.3.6 Object.prototype.toString()                                                               // 1
var cof = require('./_cof');                                                                                           // 2
var TAG = require('./_wks')('toStringTag');                                                                            // 3
// ES3 wrong here                                                                                                      // 4
var ARG = cof(function () { return arguments; }()) == 'Arguments';                                                     // 5
                                                                                                                       // 6
// fallback for IE11 Script Access Denied error                                                                        // 7
var tryGet = function (it, key) {                                                                                      // 8
  try {                                                                                                                // 9
    return it[key];                                                                                                    // 10
  } catch (e) { /* empty */ }                                                                                          // 11
};                                                                                                                     // 12
                                                                                                                       // 13
module.exports = function (it) {                                                                                       // 14
  var O, T, B;                                                                                                         // 15
  return it === undefined ? 'Undefined' : it === null ? 'Null'                                                         // 16
    // @@toStringTag case                                                                                              // 17
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T                                                         // 18
    // builtinTag case                                                                                                 // 19
    : ARG ? cof(O)                                                                                                     // 20
    // ES3 arguments fallback                                                                                          // 21
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;                                     // 22
};                                                                                                                     // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-detect.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_iter-detect.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var ITERATOR = require('./_wks')('iterator');                                                                          // 1
var SAFE_CLOSING = false;                                                                                              // 2
                                                                                                                       // 3
try {                                                                                                                  // 4
  var riter = [7][ITERATOR]();                                                                                         // 5
  riter['return'] = function () { SAFE_CLOSING = true; };                                                              // 6
  // eslint-disable-next-line no-throw-literal                                                                         // 7
  Array.from(riter, function () { throw 2; });                                                                         // 8
} catch (e) { /* empty */ }                                                                                            // 9
                                                                                                                       // 10
module.exports = function (exec, skipClosing) {                                                                        // 11
  if (!skipClosing && !SAFE_CLOSING) return false;                                                                     // 12
  var safe = false;                                                                                                    // 13
  try {                                                                                                                // 14
    var arr = [7];                                                                                                     // 15
    var iter = arr[ITERATOR]();                                                                                        // 16
    iter.next = function () { return { done: safe = true }; };                                                         // 17
    arr[ITERATOR] = function () { return iter; };                                                                      // 18
    exec(arr);                                                                                                         // 19
  } catch (e) { /* empty */ }                                                                                          // 20
  return safe;                                                                                                         // 21
};                                                                                                                     // 22
                                                                                                                       // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.assign.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/es6.object.assign.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.3.1 Object.assign(target, source)                                                                              // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });                                     // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-assign.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/library/modules/_object-assign.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// 19.1.2.1 Object.assign(target, source, ...)                                                                         // 2
var getKeys = require('./_object-keys');                                                                               // 3
var gOPS = require('./_object-gops');                                                                                  // 4
var pIE = require('./_object-pie');                                                                                    // 5
var toObject = require('./_to-object');                                                                                // 6
var IObject = require('./_iobject');                                                                                   // 7
var $assign = Object.assign;                                                                                           // 8
                                                                                                                       // 9
// should work with symbols and should have deterministic property order (V8 bug)                                      // 10
module.exports = !$assign || require('./_fails')(function () {                                                         // 11
  var A = {};                                                                                                          // 12
  var B = {};                                                                                                          // 13
  // eslint-disable-next-line no-undef                                                                                 // 14
  var S = Symbol();                                                                                                    // 15
  var K = 'abcdefghijklmnopqrst';                                                                                      // 16
  A[S] = 7;                                                                                                            // 17
  K.split('').forEach(function (k) { B[k] = k; });                                                                     // 18
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;                                          // 19
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars                                           // 20
  var T = toObject(target);                                                                                            // 21
  var aLen = arguments.length;                                                                                         // 22
  var index = 1;                                                                                                       // 23
  var getSymbols = gOPS.f;                                                                                             // 24
  var isEnum = pIE.f;                                                                                                  // 25
  while (aLen > index) {                                                                                               // 26
    var S = IObject(arguments[index++]);                                                                               // 27
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);                                             // 28
    var length = keys.length;                                                                                          // 29
    var j = 0;                                                                                                         // 30
    var key;                                                                                                           // 31
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];                                           // 32
  } return T;                                                                                                          // 33
} : $assign;                                                                                                           // 34
                                                                                                                       // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"modules":{"es6.symbol.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.symbol.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// ECMAScript 6 symbols shim                                                                                           // 2
var global = require('./_global');                                                                                     // 3
var has = require('./_has');                                                                                           // 4
var DESCRIPTORS = require('./_descriptors');                                                                           // 5
var $export = require('./_export');                                                                                    // 6
var redefine = require('./_redefine');                                                                                 // 7
var META = require('./_meta').KEY;                                                                                     // 8
var $fails = require('./_fails');                                                                                      // 9
var shared = require('./_shared');                                                                                     // 10
var setToStringTag = require('./_set-to-string-tag');                                                                  // 11
var uid = require('./_uid');                                                                                           // 12
var wks = require('./_wks');                                                                                           // 13
var wksExt = require('./_wks-ext');                                                                                    // 14
var wksDefine = require('./_wks-define');                                                                              // 15
var enumKeys = require('./_enum-keys');                                                                                // 16
var isArray = require('./_is-array');                                                                                  // 17
var anObject = require('./_an-object');                                                                                // 18
var isObject = require('./_is-object');                                                                                // 19
var toIObject = require('./_to-iobject');                                                                              // 20
var toPrimitive = require('./_to-primitive');                                                                          // 21
var createDesc = require('./_property-desc');                                                                          // 22
var _create = require('./_object-create');                                                                             // 23
var gOPNExt = require('./_object-gopn-ext');                                                                           // 24
var $GOPD = require('./_object-gopd');                                                                                 // 25
var $DP = require('./_object-dp');                                                                                     // 26
var $keys = require('./_object-keys');                                                                                 // 27
var gOPD = $GOPD.f;                                                                                                    // 28
var dP = $DP.f;                                                                                                        // 29
var gOPN = gOPNExt.f;                                                                                                  // 30
var $Symbol = global.Symbol;                                                                                           // 31
var $JSON = global.JSON;                                                                                               // 32
var _stringify = $JSON && $JSON.stringify;                                                                             // 33
var PROTOTYPE = 'prototype';                                                                                           // 34
var HIDDEN = wks('_hidden');                                                                                           // 35
var TO_PRIMITIVE = wks('toPrimitive');                                                                                 // 36
var isEnum = {}.propertyIsEnumerable;                                                                                  // 37
var SymbolRegistry = shared('symbol-registry');                                                                        // 38
var AllSymbols = shared('symbols');                                                                                    // 39
var OPSymbols = shared('op-symbols');                                                                                  // 40
var ObjectProto = Object[PROTOTYPE];                                                                                   // 41
var USE_NATIVE = typeof $Symbol == 'function';                                                                         // 42
var QObject = global.QObject;                                                                                          // 43
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173                                      // 44
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;                                         // 45
                                                                                                                       // 46
// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687                                         // 47
var setSymbolDesc = DESCRIPTORS && $fails(function () {                                                                // 48
  return _create(dP({}, 'a', {                                                                                         // 49
    get: function () { return dP(this, 'a', { value: 7 }).a; }                                                         // 50
  })).a != 7;                                                                                                          // 51
}) ? function (it, key, D) {                                                                                           // 52
  var protoDesc = gOPD(ObjectProto, key);                                                                              // 53
  if (protoDesc) delete ObjectProto[key];                                                                              // 54
  dP(it, key, D);                                                                                                      // 55
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);                                                // 56
} : dP;                                                                                                                // 57
                                                                                                                       // 58
var wrap = function (tag) {                                                                                            // 59
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);                                                             // 60
  sym._k = tag;                                                                                                        // 61
  return sym;                                                                                                          // 62
};                                                                                                                     // 63
                                                                                                                       // 64
var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {                                     // 65
  return typeof it == 'symbol';                                                                                        // 66
} : function (it) {                                                                                                    // 67
  return it instanceof $Symbol;                                                                                        // 68
};                                                                                                                     // 69
                                                                                                                       // 70
var $defineProperty = function defineProperty(it, key, D) {                                                            // 71
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);                                                          // 72
  anObject(it);                                                                                                        // 73
  key = toPrimitive(key, true);                                                                                        // 74
  anObject(D);                                                                                                         // 75
  if (has(AllSymbols, key)) {                                                                                          // 76
    if (!D.enumerable) {                                                                                               // 77
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));                                                         // 78
      it[HIDDEN][key] = true;                                                                                          // 79
    } else {                                                                                                           // 80
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;                                                 // 81
      D = _create(D, { enumerable: createDesc(0, false) });                                                            // 82
    } return setSymbolDesc(it, key, D);                                                                                // 83
  } return dP(it, key, D);                                                                                             // 84
};                                                                                                                     // 85
var $defineProperties = function defineProperties(it, P) {                                                             // 86
  anObject(it);                                                                                                        // 87
  var keys = enumKeys(P = toIObject(P));                                                                               // 88
  var i = 0;                                                                                                           // 89
  var l = keys.length;                                                                                                 // 90
  var key;                                                                                                             // 91
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);                                                          // 92
  return it;                                                                                                           // 93
};                                                                                                                     // 94
var $create = function create(it, P) {                                                                                 // 95
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);                                            // 96
};                                                                                                                     // 97
var $propertyIsEnumerable = function propertyIsEnumerable(key) {                                                       // 98
  var E = isEnum.call(this, key = toPrimitive(key, true));                                                             // 99
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;                              // 100
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;           // 101
};                                                                                                                     // 102
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {                                           // 103
  it = toIObject(it);                                                                                                  // 104
  key = toPrimitive(key, true);                                                                                        // 105
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;                                      // 106
  var D = gOPD(it, key);                                                                                               // 107
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;                         // 108
  return D;                                                                                                            // 109
};                                                                                                                     // 110
var $getOwnPropertyNames = function getOwnPropertyNames(it) {                                                          // 111
  var names = gOPN(toIObject(it));                                                                                     // 112
  var result = [];                                                                                                     // 113
  var i = 0;                                                                                                           // 114
  var key;                                                                                                             // 115
  while (names.length > i) {                                                                                           // 116
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);                          // 117
  } return result;                                                                                                     // 118
};                                                                                                                     // 119
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {                                                      // 120
  var IS_OP = it === ObjectProto;                                                                                      // 121
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));                                                                 // 122
  var result = [];                                                                                                     // 123
  var i = 0;                                                                                                           // 124
  var key;                                                                                                             // 125
  while (names.length > i) {                                                                                           // 126
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);     // 127
  } return result;                                                                                                     // 128
};                                                                                                                     // 129
                                                                                                                       // 130
// 19.4.1.1 Symbol([description])                                                                                      // 131
if (!USE_NATIVE) {                                                                                                     // 132
  $Symbol = function Symbol() {                                                                                        // 133
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');                                      // 134
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);                                                    // 135
    var $set = function (value) {                                                                                      // 136
      if (this === ObjectProto) $set.call(OPSymbols, value);                                                           // 137
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;                                      // 138
      setSymbolDesc(this, tag, createDesc(1, value));                                                                  // 139
    };                                                                                                                 // 140
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });                     // 141
    return wrap(tag);                                                                                                  // 142
  };                                                                                                                   // 143
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {                                                       // 144
    return this._k;                                                                                                    // 145
  });                                                                                                                  // 146
                                                                                                                       // 147
  $GOPD.f = $getOwnPropertyDescriptor;                                                                                 // 148
  $DP.f = $defineProperty;                                                                                             // 149
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;                                                      // 150
  require('./_object-pie').f = $propertyIsEnumerable;                                                                  // 151
  require('./_object-gops').f = $getOwnPropertySymbols;                                                                // 152
                                                                                                                       // 153
  if (DESCRIPTORS && !require('./_library')) {                                                                         // 154
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);                                        // 155
  }                                                                                                                    // 156
                                                                                                                       // 157
  wksExt.f = function (name) {                                                                                         // 158
    return wrap(wks(name));                                                                                            // 159
  };                                                                                                                   // 160
}                                                                                                                      // 161
                                                                                                                       // 162
$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });                                         // 163
                                                                                                                       // 164
for (var es6Symbols = (                                                                                                // 165
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'     // 167
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);                                                      // 168
                                                                                                                       // 169
for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);   // 170
                                                                                                                       // 171
$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {                                                               // 172
  // 19.4.2.1 Symbol.for(key)                                                                                          // 173
  'for': function (key) {                                                                                              // 174
    return has(SymbolRegistry, key += '')                                                                              // 175
      ? SymbolRegistry[key]                                                                                            // 176
      : SymbolRegistry[key] = $Symbol(key);                                                                            // 177
  },                                                                                                                   // 178
  // 19.4.2.5 Symbol.keyFor(sym)                                                                                       // 179
  keyFor: function keyFor(sym) {                                                                                       // 180
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');                                                    // 181
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;                                       // 182
  },                                                                                                                   // 183
  useSetter: function () { setter = true; },                                                                           // 184
  useSimple: function () { setter = false; }                                                                           // 185
});                                                                                                                    // 186
                                                                                                                       // 187
$export($export.S + $export.F * !USE_NATIVE, 'Object', {                                                               // 188
  // 19.1.2.2 Object.create(O [, Properties])                                                                          // 189
  create: $create,                                                                                                     // 190
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)                                                                  // 191
  defineProperty: $defineProperty,                                                                                     // 192
  // 19.1.2.3 Object.defineProperties(O, Properties)                                                                   // 193
  defineProperties: $defineProperties,                                                                                 // 194
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                    // 195
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,                                                                 // 196
  // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                            // 197
  getOwnPropertyNames: $getOwnPropertyNames,                                                                           // 198
  // 19.1.2.8 Object.getOwnPropertySymbols(O)                                                                          // 199
  getOwnPropertySymbols: $getOwnPropertySymbols                                                                        // 200
});                                                                                                                    // 201
                                                                                                                       // 202
// 24.3.2 JSON.stringify(value [, replacer [, space]])                                                                 // 203
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {                                          // 204
  var S = $Symbol();                                                                                                   // 205
  // MS Edge converts symbol values to JSON as {}                                                                      // 206
  // WebKit converts symbol values to JSON as null                                                                     // 207
  // V8 throws on boxed symbols                                                                                        // 208
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';                 // 209
})), 'JSON', {                                                                                                         // 210
  stringify: function stringify(it) {                                                                                  // 211
    var args = [it];                                                                                                   // 212
    var i = 1;                                                                                                         // 213
    var replacer, $replacer;                                                                                           // 214
    while (arguments.length > i) args.push(arguments[i++]);                                                            // 215
    $replacer = replacer = args[1];                                                                                    // 216
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined            // 217
    if (!isArray(replacer)) replacer = function (key, value) {                                                         // 218
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);                                    // 219
      if (!isSymbol(value)) return value;                                                                              // 220
    };                                                                                                                 // 221
    args[1] = replacer;                                                                                                // 222
    return _stringify.apply($JSON, args);                                                                              // 223
  }                                                                                                                    // 224
});                                                                                                                    // 225
                                                                                                                       // 226
// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)                                                                      // 227
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);  // 228
// 19.4.3.5 Symbol.prototype[@@toStringTag]                                                                            // 229
setToStringTag($Symbol, 'Symbol');                                                                                     // 230
// 20.2.1.9 Math[@@toStringTag]                                                                                        // 231
setToStringTag(Math, 'Math', true);                                                                                    // 232
// 24.3.3 JSON[@@toStringTag]                                                                                          // 233
setToStringTag(global.JSON, 'JSON', true);                                                                             // 234
                                                                                                                       // 235
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_global.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_global.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                                                // 1
var global = module.exports = typeof window != 'undefined' && window.Math == Math                                      // 2
  ? window : typeof self != 'undefined' && self.Math == Math ? self                                                    // 3
  // eslint-disable-next-line no-new-func                                                                              // 4
  : Function('return this')();                                                                                         // 5
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef                                              // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_has.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_has.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var hasOwnProperty = {}.hasOwnProperty;                                                                                // 1
module.exports = function (it, key) {                                                                                  // 2
  return hasOwnProperty.call(it, key);                                                                                 // 3
};                                                                                                                     // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_descriptors.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_descriptors.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Thank's IE8 for his funny defineProperty                                                                            // 1
module.exports = !require('./_fails')(function () {                                                                    // 2
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;                                    // 3
});                                                                                                                    // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_fails.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_fails.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function (exec) {                                                                                     // 1
  try {                                                                                                                // 2
    return !!exec();                                                                                                   // 3
  } catch (e) {                                                                                                        // 4
    return true;                                                                                                       // 5
  }                                                                                                                    // 6
};                                                                                                                     // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_export.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_export.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global = require('./_global');                                                                                     // 1
var core = require('./_core');                                                                                         // 2
var hide = require('./_hide');                                                                                         // 3
var redefine = require('./_redefine');                                                                                 // 4
var ctx = require('./_ctx');                                                                                           // 5
var PROTOTYPE = 'prototype';                                                                                           // 6
                                                                                                                       // 7
var $export = function (type, name, source) {                                                                          // 8
  var IS_FORCED = type & $export.F;                                                                                    // 9
  var IS_GLOBAL = type & $export.G;                                                                                    // 10
  var IS_STATIC = type & $export.S;                                                                                    // 11
  var IS_PROTO = type & $export.P;                                                                                     // 12
  var IS_BIND = type & $export.B;                                                                                      // 13
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});                                                    // 15
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});                                                      // 16
  var key, own, out, exp;                                                                                              // 17
  if (IS_GLOBAL) source = name;                                                                                        // 18
  for (key in source) {                                                                                                // 19
    // contains in native                                                                                              // 20
    own = !IS_FORCED && target && target[key] !== undefined;                                                           // 21
    // export native or passed                                                                                         // 22
    out = (own ? target : source)[key];                                                                                // 23
    // bind timers to global for call from export context                                                              // 24
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;    // 25
    // extend global                                                                                                   // 26
    if (target) redefine(target, key, out, type & $export.U);                                                          // 27
    // export                                                                                                          // 28
    if (exports[key] != out) hide(exports, key, exp);                                                                  // 29
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;                                                         // 30
  }                                                                                                                    // 31
};                                                                                                                     // 32
global.core = core;                                                                                                    // 33
// type bitmap                                                                                                         // 34
$export.F = 1;   // forced                                                                                             // 35
$export.G = 2;   // global                                                                                             // 36
$export.S = 4;   // static                                                                                             // 37
$export.P = 8;   // proto                                                                                              // 38
$export.B = 16;  // bind                                                                                               // 39
$export.W = 32;  // wrap                                                                                               // 40
$export.U = 64;  // safe                                                                                               // 41
$export.R = 128; // real proto method for `library`                                                                    // 42
module.exports = $export;                                                                                              // 43
                                                                                                                       // 44
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_core.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_core.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var core = module.exports = { version: '2.5.3' };                                                                      // 1
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef                                                // 2
                                                                                                                       // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_hide.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_hide.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dP = require('./_object-dp');                                                                                      // 1
var createDesc = require('./_property-desc');                                                                          // 2
module.exports = require('./_descriptors') ? function (object, key, value) {                                           // 3
  return dP.f(object, key, createDesc(1, value));                                                                      // 4
} : function (object, key, value) {                                                                                    // 5
  object[key] = value;                                                                                                 // 6
  return object;                                                                                                       // 7
};                                                                                                                     // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-dp.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_object-dp.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var anObject = require('./_an-object');                                                                                // 1
var IE8_DOM_DEFINE = require('./_ie8-dom-define');                                                                     // 2
var toPrimitive = require('./_to-primitive');                                                                          // 3
var dP = Object.defineProperty;                                                                                        // 4
                                                                                                                       // 5
exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {            // 6
  anObject(O);                                                                                                         // 7
  P = toPrimitive(P, true);                                                                                            // 8
  anObject(Attributes);                                                                                                // 9
  if (IE8_DOM_DEFINE) try {                                                                                            // 10
    return dP(O, P, Attributes);                                                                                       // 11
  } catch (e) { /* empty */ }                                                                                          // 12
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');                         // 13
  if ('value' in Attributes) O[P] = Attributes.value;                                                                  // 14
  return O;                                                                                                            // 15
};                                                                                                                     // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_an-object.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_an-object.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object');                                                                                // 1
module.exports = function (it) {                                                                                       // 2
  if (!isObject(it)) throw TypeError(it + ' is not an object!');                                                       // 3
  return it;                                                                                                           // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_is-object.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_is-object.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function (it) {                                                                                       // 1
  return typeof it === 'object' ? it !== null : typeof it === 'function';                                              // 2
};                                                                                                                     // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_ie8-dom-define.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_ie8-dom-define.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = !require('./_descriptors') && !require('./_fails')(function () {                                      // 1
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;       // 2
});                                                                                                                    // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_dom-create.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_dom-create.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object');                                                                                // 1
var document = require('./_global').document;                                                                          // 2
// typeof document.createElement is 'object' in old IE                                                                 // 3
var is = isObject(document) && isObject(document.createElement);                                                       // 4
module.exports = function (it) {                                                                                       // 5
  return is ? document.createElement(it) : {};                                                                         // 6
};                                                                                                                     // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-primitive.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_to-primitive.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.1 ToPrimitive(input [, PreferredType])                                                                          // 1
var isObject = require('./_is-object');                                                                                // 2
// instead of the ES6 spec version, we didn't implement @@toPrimitive case                                             // 3
// and the second argument - flag - preferred type is a string                                                         // 4
module.exports = function (it, S) {                                                                                    // 5
  if (!isObject(it)) return it;                                                                                        // 6
  var fn, val;                                                                                                         // 7
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;                        // 8
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;                              // 9
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;                       // 10
  throw TypeError("Can't convert object to primitive value");                                                          // 11
};                                                                                                                     // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_property-desc.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_property-desc.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function (bitmap, value) {                                                                            // 1
  return {                                                                                                             // 2
    enumerable: !(bitmap & 1),                                                                                         // 3
    configurable: !(bitmap & 2),                                                                                       // 4
    writable: !(bitmap & 4),                                                                                           // 5
    value: value                                                                                                       // 6
  };                                                                                                                   // 7
};                                                                                                                     // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_redefine.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_redefine.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global = require('./_global');                                                                                     // 1
var hide = require('./_hide');                                                                                         // 2
var has = require('./_has');                                                                                           // 3
var SRC = require('./_uid')('src');                                                                                    // 4
var TO_STRING = 'toString';                                                                                            // 5
var $toString = Function[TO_STRING];                                                                                   // 6
var TPL = ('' + $toString).split(TO_STRING);                                                                           // 7
                                                                                                                       // 8
require('./_core').inspectSource = function (it) {                                                                     // 9
  return $toString.call(it);                                                                                           // 10
};                                                                                                                     // 11
                                                                                                                       // 12
(module.exports = function (O, key, val, safe) {                                                                       // 13
  var isFunction = typeof val == 'function';                                                                           // 14
  if (isFunction) has(val, 'name') || hide(val, 'name', key);                                                          // 15
  if (O[key] === val) return;                                                                                          // 16
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));                       // 17
  if (O === global) {                                                                                                  // 18
    O[key] = val;                                                                                                      // 19
  } else if (!safe) {                                                                                                  // 20
    delete O[key];                                                                                                     // 21
    hide(O, key, val);                                                                                                 // 22
  } else if (O[key]) {                                                                                                 // 23
    O[key] = val;                                                                                                      // 24
  } else {                                                                                                             // 25
    hide(O, key, val);                                                                                                 // 26
  }                                                                                                                    // 27
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative        // 28
})(Function.prototype, TO_STRING, function toString() {                                                                // 29
  return typeof this == 'function' && this[SRC] || $toString.call(this);                                               // 30
});                                                                                                                    // 31
                                                                                                                       // 32
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_uid.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_uid.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var id = 0;                                                                                                            // 1
var px = Math.random();                                                                                                // 2
module.exports = function (key) {                                                                                      // 3
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));                               // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_ctx.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_ctx.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// optional / simple context binding                                                                                   // 1
var aFunction = require('./_a-function');                                                                              // 2
module.exports = function (fn, that, length) {                                                                         // 3
  aFunction(fn);                                                                                                       // 4
  if (that === undefined) return fn;                                                                                   // 5
  switch (length) {                                                                                                    // 6
    case 1: return function (a) {                                                                                      // 7
      return fn.call(that, a);                                                                                         // 8
    };                                                                                                                 // 9
    case 2: return function (a, b) {                                                                                   // 10
      return fn.call(that, a, b);                                                                                      // 11
    };                                                                                                                 // 12
    case 3: return function (a, b, c) {                                                                                // 13
      return fn.call(that, a, b, c);                                                                                   // 14
    };                                                                                                                 // 15
  }                                                                                                                    // 16
  return function (/* ...args */) {                                                                                    // 17
    return fn.apply(that, arguments);                                                                                  // 18
  };                                                                                                                   // 19
};                                                                                                                     // 20
                                                                                                                       // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_a-function.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_a-function.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function (it) {                                                                                       // 1
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');                                            // 2
  return it;                                                                                                           // 3
};                                                                                                                     // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_meta.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_meta.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var META = require('./_uid')('meta');                                                                                  // 1
var isObject = require('./_is-object');                                                                                // 2
var has = require('./_has');                                                                                           // 3
var setDesc = require('./_object-dp').f;                                                                               // 4
var id = 0;                                                                                                            // 5
var isExtensible = Object.isExtensible || function () {                                                                // 6
  return true;                                                                                                         // 7
};                                                                                                                     // 8
var FREEZE = !require('./_fails')(function () {                                                                        // 9
  return isExtensible(Object.preventExtensions({}));                                                                   // 10
});                                                                                                                    // 11
var setMeta = function (it) {                                                                                          // 12
  setDesc(it, META, { value: {                                                                                         // 13
    i: 'O' + ++id, // object ID                                                                                        // 14
    w: {}          // weak collections IDs                                                                             // 15
  } });                                                                                                                // 16
};                                                                                                                     // 17
var fastKey = function (it, create) {                                                                                  // 18
  // return primitive with prefix                                                                                      // 19
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;                     // 20
  if (!has(it, META)) {                                                                                                // 21
    // can't set metadata to uncaught frozen object                                                                    // 22
    if (!isExtensible(it)) return 'F';                                                                                 // 23
    // not necessary to add metadata                                                                                   // 24
    if (!create) return 'E';                                                                                           // 25
    // add missing metadata                                                                                            // 26
    setMeta(it);                                                                                                       // 27
  // return object ID                                                                                                  // 28
  } return it[META].i;                                                                                                 // 29
};                                                                                                                     // 30
var getWeak = function (it, create) {                                                                                  // 31
  if (!has(it, META)) {                                                                                                // 32
    // can't set metadata to uncaught frozen object                                                                    // 33
    if (!isExtensible(it)) return true;                                                                                // 34
    // not necessary to add metadata                                                                                   // 35
    if (!create) return false;                                                                                         // 36
    // add missing metadata                                                                                            // 37
    setMeta(it);                                                                                                       // 38
  // return hash weak collections IDs                                                                                  // 39
  } return it[META].w;                                                                                                 // 40
};                                                                                                                     // 41
// add metadata on freeze-family methods calling                                                                       // 42
var onFreeze = function (it) {                                                                                         // 43
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);                                          // 44
  return it;                                                                                                           // 45
};                                                                                                                     // 46
var meta = module.exports = {                                                                                          // 47
  KEY: META,                                                                                                           // 48
  NEED: false,                                                                                                         // 49
  fastKey: fastKey,                                                                                                    // 50
  getWeak: getWeak,                                                                                                    // 51
  onFreeze: onFreeze                                                                                                   // 52
};                                                                                                                     // 53
                                                                                                                       // 54
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_shared.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_shared.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global = require('./_global');                                                                                     // 1
var SHARED = '__core-js_shared__';                                                                                     // 2
var store = global[SHARED] || (global[SHARED] = {});                                                                   // 3
module.exports = function (key) {                                                                                      // 4
  return store[key] || (store[key] = {});                                                                              // 5
};                                                                                                                     // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_set-to-string-tag.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_set-to-string-tag.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var def = require('./_object-dp').f;                                                                                   // 1
var has = require('./_has');                                                                                           // 2
var TAG = require('./_wks')('toStringTag');                                                                            // 3
                                                                                                                       // 4
module.exports = function (it, tag, stat) {                                                                            // 5
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });                // 6
};                                                                                                                     // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_wks.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_wks.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var store = require('./_shared')('wks');                                                                               // 1
var uid = require('./_uid');                                                                                           // 2
var Symbol = require('./_global').Symbol;                                                                              // 3
var USE_SYMBOL = typeof Symbol == 'function';                                                                          // 4
                                                                                                                       // 5
var $exports = module.exports = function (name) {                                                                      // 6
  return store[name] || (store[name] =                                                                                 // 7
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));                                      // 8
};                                                                                                                     // 9
                                                                                                                       // 10
$exports.store = store;                                                                                                // 11
                                                                                                                       // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_wks-ext.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_wks-ext.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = require('./_wks');                                                                                         // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_wks-define.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_wks-define.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global = require('./_global');                                                                                     // 1
var core = require('./_core');                                                                                         // 2
var LIBRARY = require('./_library');                                                                                   // 3
var wksExt = require('./_wks-ext');                                                                                    // 4
var defineProperty = require('./_object-dp').f;                                                                        // 5
module.exports = function (name) {                                                                                     // 6
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});                                     // 7
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });           // 8
};                                                                                                                     // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_library.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_library.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = false;                                                                                                // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_enum-keys.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_enum-keys.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// all enumerable object keys, includes symbols                                                                        // 1
var getKeys = require('./_object-keys');                                                                               // 2
var gOPS = require('./_object-gops');                                                                                  // 3
var pIE = require('./_object-pie');                                                                                    // 4
module.exports = function (it) {                                                                                       // 5
  var result = getKeys(it);                                                                                            // 6
  var getSymbols = gOPS.f;                                                                                             // 7
  if (getSymbols) {                                                                                                    // 8
    var symbols = getSymbols(it);                                                                                      // 9
    var isEnum = pIE.f;                                                                                                // 10
    var i = 0;                                                                                                         // 11
    var key;                                                                                                           // 12
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);                              // 13
  } return result;                                                                                                     // 14
};                                                                                                                     // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-keys.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_object-keys.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.14 / 15.2.3.14 Object.keys(O)                                                                                // 1
var $keys = require('./_object-keys-internal');                                                                        // 2
var enumBugKeys = require('./_enum-bug-keys');                                                                         // 3
                                                                                                                       // 4
module.exports = Object.keys || function keys(O) {                                                                     // 5
  return $keys(O, enumBugKeys);                                                                                        // 6
};                                                                                                                     // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-keys-internal.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_object-keys-internal.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var has = require('./_has');                                                                                           // 1
var toIObject = require('./_to-iobject');                                                                              // 2
var arrayIndexOf = require('./_array-includes')(false);                                                                // 3
var IE_PROTO = require('./_shared-key')('IE_PROTO');                                                                   // 4
                                                                                                                       // 5
module.exports = function (object, names) {                                                                            // 6
  var O = toIObject(object);                                                                                           // 7
  var i = 0;                                                                                                           // 8
  var result = [];                                                                                                     // 9
  var key;                                                                                                             // 10
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);                                                 // 11
  // Don't enum bug & hidden keys                                                                                      // 12
  while (names.length > i) if (has(O, key = names[i++])) {                                                             // 13
    ~arrayIndexOf(result, key) || result.push(key);                                                                    // 14
  }                                                                                                                    // 15
  return result;                                                                                                       // 16
};                                                                                                                     // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-iobject.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_to-iobject.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// to indexed object, toObject with fallback for non-array-like ES3 strings                                            // 1
var IObject = require('./_iobject');                                                                                   // 2
var defined = require('./_defined');                                                                                   // 3
module.exports = function (it) {                                                                                       // 4
  return IObject(defined(it));                                                                                         // 5
};                                                                                                                     // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iobject.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_iobject.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// fallback for non-array-like ES3 and non-enumerable old V8 strings                                                   // 1
var cof = require('./_cof');                                                                                           // 2
// eslint-disable-next-line no-prototype-builtins                                                                      // 3
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {                                        // 4
  return cof(it) == 'String' ? it.split('') : Object(it);                                                              // 5
};                                                                                                                     // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_cof.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_cof.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toString = {}.toString;                                                                                            // 1
                                                                                                                       // 2
module.exports = function (it) {                                                                                       // 3
  return toString.call(it).slice(8, -1);                                                                               // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_defined.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_defined.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.1 RequireObjectCoercible(argument)                                                                              // 1
module.exports = function (it) {                                                                                       // 2
  if (it == undefined) throw TypeError("Can't call method on  " + it);                                                 // 3
  return it;                                                                                                           // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_array-includes.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_array-includes.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// false -> Array#indexOf                                                                                              // 1
// true  -> Array#includes                                                                                             // 2
var toIObject = require('./_to-iobject');                                                                              // 3
var toLength = require('./_to-length');                                                                                // 4
var toAbsoluteIndex = require('./_to-absolute-index');                                                                 // 5
module.exports = function (IS_INCLUDES) {                                                                              // 6
  return function ($this, el, fromIndex) {                                                                             // 7
    var O = toIObject($this);                                                                                          // 8
    var length = toLength(O.length);                                                                                   // 9
    var index = toAbsoluteIndex(fromIndex, length);                                                                    // 10
    var value;                                                                                                         // 11
    // Array#includes uses SameValueZero equality algorithm                                                            // 12
    // eslint-disable-next-line no-self-compare                                                                        // 13
    if (IS_INCLUDES && el != el) while (length > index) {                                                              // 14
      value = O[index++];                                                                                              // 15
      // eslint-disable-next-line no-self-compare                                                                      // 16
      if (value != value) return true;                                                                                 // 17
    // Array#indexOf ignores holes, Array#includes - not                                                               // 18
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {                                             // 19
      if (O[index] === el) return IS_INCLUDES || index || 0;                                                           // 20
    } return !IS_INCLUDES && -1;                                                                                       // 21
  };                                                                                                                   // 22
};                                                                                                                     // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-length.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_to-length.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.15 ToLength                                                                                                     // 1
var toInteger = require('./_to-integer');                                                                              // 2
var min = Math.min;                                                                                                    // 3
module.exports = function (it) {                                                                                       // 4
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991                      // 5
};                                                                                                                     // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-integer.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_to-integer.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.4 ToInteger                                                                                                     // 1
var ceil = Math.ceil;                                                                                                  // 2
var floor = Math.floor;                                                                                                // 3
module.exports = function (it) {                                                                                       // 4
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);                                                            // 5
};                                                                                                                     // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-absolute-index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_to-absolute-index.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toInteger = require('./_to-integer');                                                                              // 1
var max = Math.max;                                                                                                    // 2
var min = Math.min;                                                                                                    // 3
module.exports = function (index, length) {                                                                            // 4
  index = toInteger(index);                                                                                            // 5
  return index < 0 ? max(index + length, 0) : min(index, length);                                                      // 6
};                                                                                                                     // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_shared-key.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_shared-key.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var shared = require('./_shared')('keys');                                                                             // 1
var uid = require('./_uid');                                                                                           // 2
module.exports = function (key) {                                                                                      // 3
  return shared[key] || (shared[key] = uid(key));                                                                      // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_enum-bug-keys.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_enum-bug-keys.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// IE 8- don't enum bug keys                                                                                           // 1
module.exports = (                                                                                                     // 2
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'                      // 3
).split(',');                                                                                                          // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-gops.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_object-gops.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = Object.getOwnPropertySymbols;                                                                              // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-pie.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_object-pie.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.f = {}.propertyIsEnumerable;                                                                                   // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_is-array.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_is-array.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.2 IsArray(argument)                                                                                             // 1
var cof = require('./_cof');                                                                                           // 2
module.exports = Array.isArray || function isArray(arg) {                                                              // 3
  return cof(arg) == 'Array';                                                                                          // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-create.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_object-create.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 1
var anObject = require('./_an-object');                                                                                // 2
var dPs = require('./_object-dps');                                                                                    // 3
var enumBugKeys = require('./_enum-bug-keys');                                                                         // 4
var IE_PROTO = require('./_shared-key')('IE_PROTO');                                                                   // 5
var Empty = function () { /* empty */ };                                                                               // 6
var PROTOTYPE = 'prototype';                                                                                           // 7
                                                                                                                       // 8
// Create object with fake `null` prototype: use iframe Object with cleared prototype                                  // 9
var createDict = function () {                                                                                         // 10
  // Thrash, waste and sodomy: IE GC bug                                                                               // 11
  var iframe = require('./_dom-create')('iframe');                                                                     // 12
  var i = enumBugKeys.length;                                                                                          // 13
  var lt = '<';                                                                                                        // 14
  var gt = '>';                                                                                                        // 15
  var iframeDocument;                                                                                                  // 16
  iframe.style.display = 'none';                                                                                       // 17
  require('./_html').appendChild(iframe);                                                                              // 18
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url                                                     // 19
  // createDict = iframe.contentWindow.Object;                                                                         // 20
  // html.removeChild(iframe);                                                                                         // 21
  iframeDocument = iframe.contentWindow.document;                                                                      // 22
  iframeDocument.open();                                                                                               // 23
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);                                // 24
  iframeDocument.close();                                                                                              // 25
  createDict = iframeDocument.F;                                                                                       // 26
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];                                                            // 27
  return createDict();                                                                                                 // 28
};                                                                                                                     // 29
                                                                                                                       // 30
module.exports = Object.create || function create(O, Properties) {                                                     // 31
  var result;                                                                                                          // 32
  if (O !== null) {                                                                                                    // 33
    Empty[PROTOTYPE] = anObject(O);                                                                                    // 34
    result = new Empty();                                                                                              // 35
    Empty[PROTOTYPE] = null;                                                                                           // 36
    // add "__proto__" for Object.getPrototypeOf polyfill                                                              // 37
    result[IE_PROTO] = O;                                                                                              // 38
  } else result = createDict();                                                                                        // 39
  return Properties === undefined ? result : dPs(result, Properties);                                                  // 40
};                                                                                                                     // 41
                                                                                                                       // 42
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-dps.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_object-dps.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dP = require('./_object-dp');                                                                                      // 1
var anObject = require('./_an-object');                                                                                // 2
var getKeys = require('./_object-keys');                                                                               // 3
                                                                                                                       // 4
module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {      // 5
  anObject(O);                                                                                                         // 6
  var keys = getKeys(Properties);                                                                                      // 7
  var length = keys.length;                                                                                            // 8
  var i = 0;                                                                                                           // 9
  var P;                                                                                                               // 10
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);                                                            // 11
  return O;                                                                                                            // 12
};                                                                                                                     // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_html.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_html.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var document = require('./_global').document;                                                                          // 1
module.exports = document && document.documentElement;                                                                 // 2
                                                                                                                       // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-gopn-ext.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_object-gopn-ext.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window                                           // 1
var toIObject = require('./_to-iobject');                                                                              // 2
var gOPN = require('./_object-gopn').f;                                                                                // 3
var toString = {}.toString;                                                                                            // 4
                                                                                                                       // 5
var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames                                    // 6
  ? Object.getOwnPropertyNames(window) : [];                                                                           // 7
                                                                                                                       // 8
var getWindowNames = function (it) {                                                                                   // 9
  try {                                                                                                                // 10
    return gOPN(it);                                                                                                   // 11
  } catch (e) {                                                                                                        // 12
    return windowNames.slice();                                                                                        // 13
  }                                                                                                                    // 14
};                                                                                                                     // 15
                                                                                                                       // 16
module.exports.f = function getOwnPropertyNames(it) {                                                                  // 17
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));             // 18
};                                                                                                                     // 19
                                                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-gopn.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_object-gopn.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)                                                                   // 1
var $keys = require('./_object-keys-internal');                                                                        // 2
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');                                            // 3
                                                                                                                       // 4
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {                                            // 5
  return $keys(O, hiddenKeys);                                                                                         // 6
};                                                                                                                     // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-gopd.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_object-gopd.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var pIE = require('./_object-pie');                                                                                    // 1
var createDesc = require('./_property-desc');                                                                          // 2
var toIObject = require('./_to-iobject');                                                                              // 3
var toPrimitive = require('./_to-primitive');                                                                          // 4
var has = require('./_has');                                                                                           // 5
var IE8_DOM_DEFINE = require('./_ie8-dom-define');                                                                     // 6
var gOPD = Object.getOwnPropertyDescriptor;                                                                            // 7
                                                                                                                       // 8
exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {                               // 9
  O = toIObject(O);                                                                                                    // 10
  P = toPrimitive(P, true);                                                                                            // 11
  if (IE8_DOM_DEFINE) try {                                                                                            // 12
    return gOPD(O, P);                                                                                                 // 13
  } catch (e) { /* empty */ }                                                                                          // 14
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);                                                           // 15
};                                                                                                                     // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.map.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.map.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var strong = require('./_collection-strong');                                                                          // 2
var validate = require('./_validate-collection');                                                                      // 3
var MAP = 'Map';                                                                                                       // 4
                                                                                                                       // 5
// 23.1 Map Objects                                                                                                    // 6
module.exports = require('./_collection')(MAP, function (get) {                                                        // 7
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };                        // 8
}, {                                                                                                                   // 9
  // 23.1.3.6 Map.prototype.get(key)                                                                                   // 10
  get: function get(key) {                                                                                             // 11
    var entry = strong.getEntry(validate(this, MAP), key);                                                             // 12
    return entry && entry.v;                                                                                           // 13
  },                                                                                                                   // 14
  // 23.1.3.9 Map.prototype.set(key, value)                                                                            // 15
  set: function set(key, value) {                                                                                      // 16
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);                                                // 17
  }                                                                                                                    // 18
}, strong, true);                                                                                                      // 19
                                                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_collection-strong.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_collection-strong.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var dP = require('./_object-dp').f;                                                                                    // 2
var create = require('./_object-create');                                                                              // 3
var redefineAll = require('./_redefine-all');                                                                          // 4
var ctx = require('./_ctx');                                                                                           // 5
var anInstance = require('./_an-instance');                                                                            // 6
var forOf = require('./_for-of');                                                                                      // 7
var $iterDefine = require('./_iter-define');                                                                           // 8
var step = require('./_iter-step');                                                                                    // 9
var setSpecies = require('./_set-species');                                                                            // 10
var DESCRIPTORS = require('./_descriptors');                                                                           // 11
var fastKey = require('./_meta').fastKey;                                                                              // 12
var validate = require('./_validate-collection');                                                                      // 13
var SIZE = DESCRIPTORS ? '_s' : 'size';                                                                                // 14
                                                                                                                       // 15
var getEntry = function (that, key) {                                                                                  // 16
  // fast case                                                                                                         // 17
  var index = fastKey(key);                                                                                            // 18
  var entry;                                                                                                           // 19
  if (index !== 'F') return that._i[index];                                                                            // 20
  // frozen object case                                                                                                // 21
  for (entry = that._f; entry; entry = entry.n) {                                                                      // 22
    if (entry.k == key) return entry;                                                                                  // 23
  }                                                                                                                    // 24
};                                                                                                                     // 25
                                                                                                                       // 26
module.exports = {                                                                                                     // 27
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {                                                            // 28
    var C = wrapper(function (that, iterable) {                                                                        // 29
      anInstance(that, C, NAME, '_i');                                                                                 // 30
      that._t = NAME;         // collection type                                                                       // 31
      that._i = create(null); // index                                                                                 // 32
      that._f = undefined;    // first entry                                                                           // 33
      that._l = undefined;    // last entry                                                                            // 34
      that[SIZE] = 0;         // size                                                                                  // 35
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);                                           // 36
    });                                                                                                                // 37
    redefineAll(C.prototype, {                                                                                         // 38
      // 23.1.3.1 Map.prototype.clear()                                                                                // 39
      // 23.2.3.2 Set.prototype.clear()                                                                                // 40
      clear: function clear() {                                                                                        // 41
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {               // 42
          entry.r = true;                                                                                              // 43
          if (entry.p) entry.p = entry.p.n = undefined;                                                                // 44
          delete data[entry.i];                                                                                        // 45
        }                                                                                                              // 46
        that._f = that._l = undefined;                                                                                 // 47
        that[SIZE] = 0;                                                                                                // 48
      },                                                                                                               // 49
      // 23.1.3.3 Map.prototype.delete(key)                                                                            // 50
      // 23.2.3.4 Set.prototype.delete(value)                                                                          // 51
      'delete': function (key) {                                                                                       // 52
        var that = validate(this, NAME);                                                                               // 53
        var entry = getEntry(that, key);                                                                               // 54
        if (entry) {                                                                                                   // 55
          var next = entry.n;                                                                                          // 56
          var prev = entry.p;                                                                                          // 57
          delete that._i[entry.i];                                                                                     // 58
          entry.r = true;                                                                                              // 59
          if (prev) prev.n = next;                                                                                     // 60
          if (next) next.p = prev;                                                                                     // 61
          if (that._f == entry) that._f = next;                                                                        // 62
          if (that._l == entry) that._l = prev;                                                                        // 63
          that[SIZE]--;                                                                                                // 64
        } return !!entry;                                                                                              // 65
      },                                                                                                               // 66
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)                                               // 67
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)                                               // 68
      forEach: function forEach(callbackfn /* , that = undefined */) {                                                 // 69
        validate(this, NAME);                                                                                          // 70
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);                                   // 71
        var entry;                                                                                                     // 72
        while (entry = entry ? entry.n : this._f) {                                                                    // 73
          f(entry.v, entry.k, this);                                                                                   // 74
          // revert to the last existing entry                                                                         // 75
          while (entry && entry.r) entry = entry.p;                                                                    // 76
        }                                                                                                              // 77
      },                                                                                                               // 78
      // 23.1.3.7 Map.prototype.has(key)                                                                               // 79
      // 23.2.3.7 Set.prototype.has(value)                                                                             // 80
      has: function has(key) {                                                                                         // 81
        return !!getEntry(validate(this, NAME), key);                                                                  // 82
      }                                                                                                                // 83
    });                                                                                                                // 84
    if (DESCRIPTORS) dP(C.prototype, 'size', {                                                                         // 85
      get: function () {                                                                                               // 86
        return validate(this, NAME)[SIZE];                                                                             // 87
      }                                                                                                                // 88
    });                                                                                                                // 89
    return C;                                                                                                          // 90
  },                                                                                                                   // 91
  def: function (that, key, value) {                                                                                   // 92
    var entry = getEntry(that, key);                                                                                   // 93
    var prev, index;                                                                                                   // 94
    // change existing entry                                                                                           // 95
    if (entry) {                                                                                                       // 96
      entry.v = value;                                                                                                 // 97
    // create new entry                                                                                                // 98
    } else {                                                                                                           // 99
      that._l = entry = {                                                                                              // 100
        i: index = fastKey(key, true), // <- index                                                                     // 101
        k: key,                        // <- key                                                                       // 102
        v: value,                      // <- value                                                                     // 103
        p: prev = that._l,             // <- previous entry                                                            // 104
        n: undefined,                  // <- next entry                                                                // 105
        r: false                       // <- removed                                                                   // 106
      };                                                                                                               // 107
      if (!that._f) that._f = entry;                                                                                   // 108
      if (prev) prev.n = entry;                                                                                        // 109
      that[SIZE]++;                                                                                                    // 110
      // add to index                                                                                                  // 111
      if (index !== 'F') that._i[index] = entry;                                                                       // 112
    } return that;                                                                                                     // 113
  },                                                                                                                   // 114
  getEntry: getEntry,                                                                                                  // 115
  setStrong: function (C, NAME, IS_MAP) {                                                                              // 116
    // add .keys, .values, .entries, [@@iterator]                                                                      // 117
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11                              // 118
    $iterDefine(C, NAME, function (iterated, kind) {                                                                   // 119
      this._t = validate(iterated, NAME); // target                                                                    // 120
      this._k = kind;                     // kind                                                                      // 121
      this._l = undefined;                // previous                                                                  // 122
    }, function () {                                                                                                   // 123
      var that = this;                                                                                                 // 124
      var kind = that._k;                                                                                              // 125
      var entry = that._l;                                                                                             // 126
      // revert to the last existing entry                                                                             // 127
      while (entry && entry.r) entry = entry.p;                                                                        // 128
      // get next entry                                                                                                // 129
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {                                             // 130
        // or finish the iteration                                                                                     // 131
        that._t = undefined;                                                                                           // 132
        return step(1);                                                                                                // 133
      }                                                                                                                // 134
      // return step by kind                                                                                           // 135
      if (kind == 'keys') return step(0, entry.k);                                                                     // 136
      if (kind == 'values') return step(0, entry.v);                                                                   // 137
      return step(0, [entry.k, entry.v]);                                                                              // 138
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);                                                                  // 139
                                                                                                                       // 140
    // add [@@species], 23.1.2.2, 23.2.2.2                                                                             // 141
    setSpecies(NAME);                                                                                                  // 142
  }                                                                                                                    // 143
};                                                                                                                     // 144
                                                                                                                       // 145
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_redefine-all.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_redefine-all.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var redefine = require('./_redefine');                                                                                 // 1
module.exports = function (target, src, safe) {                                                                        // 2
  for (var key in src) redefine(target, key, src[key], safe);                                                          // 3
  return target;                                                                                                       // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_an-instance.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_an-instance.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function (it, Constructor, name, forbiddenField) {                                                    // 1
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {                        // 2
    throw TypeError(name + ': incorrect invocation!');                                                                 // 3
  } return it;                                                                                                         // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_for-of.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_for-of.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var ctx = require('./_ctx');                                                                                           // 1
var call = require('./_iter-call');                                                                                    // 2
var isArrayIter = require('./_is-array-iter');                                                                         // 3
var anObject = require('./_an-object');                                                                                // 4
var toLength = require('./_to-length');                                                                                // 5
var getIterFn = require('./core.get-iterator-method');                                                                 // 6
var BREAK = {};                                                                                                        // 7
var RETURN = {};                                                                                                       // 8
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {                                      // 9
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);                                      // 10
  var f = ctx(fn, that, entries ? 2 : 1);                                                                              // 11
  var index = 0;                                                                                                       // 12
  var length, step, iterator, result;                                                                                  // 13
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');                                    // 14
  // fast case for arrays with default iterator                                                                        // 15
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {                         // 16
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);                           // 17
    if (result === BREAK || result === RETURN) return result;                                                          // 18
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {                                     // 19
    result = call(iterator, f, step.value, entries);                                                                   // 20
    if (result === BREAK || result === RETURN) return result;                                                          // 21
  }                                                                                                                    // 22
};                                                                                                                     // 23
exports.BREAK = BREAK;                                                                                                 // 24
exports.RETURN = RETURN;                                                                                               // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-call.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_iter-call.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// call something on iterator step with safe closing on error                                                          // 1
var anObject = require('./_an-object');                                                                                // 2
module.exports = function (iterator, fn, value, entries) {                                                             // 3
  try {                                                                                                                // 4
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);                                                     // 5
  // 7.4.6 IteratorClose(iterator, completion)                                                                         // 6
  } catch (e) {                                                                                                        // 7
    var ret = iterator['return'];                                                                                      // 8
    if (ret !== undefined) anObject(ret.call(iterator));                                                               // 9
    throw e;                                                                                                           // 10
  }                                                                                                                    // 11
};                                                                                                                     // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_is-array-iter.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_is-array-iter.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// check on default Array iterator                                                                                     // 1
var Iterators = require('./_iterators');                                                                               // 2
var ITERATOR = require('./_wks')('iterator');                                                                          // 3
var ArrayProto = Array.prototype;                                                                                      // 4
                                                                                                                       // 5
module.exports = function (it) {                                                                                       // 6
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);                                  // 7
};                                                                                                                     // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iterators.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_iterators.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = {};                                                                                                   // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"core.get-iterator-method.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/core.get-iterator-method.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var classof = require('./_classof');                                                                                   // 1
var ITERATOR = require('./_wks')('iterator');                                                                          // 2
var Iterators = require('./_iterators');                                                                               // 3
module.exports = require('./_core').getIteratorMethod = function (it) {                                                // 4
  if (it != undefined) return it[ITERATOR]                                                                             // 5
    || it['@@iterator']                                                                                                // 6
    || Iterators[classof(it)];                                                                                         // 7
};                                                                                                                     // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_classof.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_classof.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// getting tag from 19.1.3.6 Object.prototype.toString()                                                               // 1
var cof = require('./_cof');                                                                                           // 2
var TAG = require('./_wks')('toStringTag');                                                                            // 3
// ES3 wrong here                                                                                                      // 4
var ARG = cof(function () { return arguments; }()) == 'Arguments';                                                     // 5
                                                                                                                       // 6
// fallback for IE11 Script Access Denied error                                                                        // 7
var tryGet = function (it, key) {                                                                                      // 8
  try {                                                                                                                // 9
    return it[key];                                                                                                    // 10
  } catch (e) { /* empty */ }                                                                                          // 11
};                                                                                                                     // 12
                                                                                                                       // 13
module.exports = function (it) {                                                                                       // 14
  var O, T, B;                                                                                                         // 15
  return it === undefined ? 'Undefined' : it === null ? 'Null'                                                         // 16
    // @@toStringTag case                                                                                              // 17
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T                                                         // 18
    // builtinTag case                                                                                                 // 19
    : ARG ? cof(O)                                                                                                     // 20
    // ES3 arguments fallback                                                                                          // 21
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;                                     // 22
};                                                                                                                     // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-define.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_iter-define.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var LIBRARY = require('./_library');                                                                                   // 2
var $export = require('./_export');                                                                                    // 3
var redefine = require('./_redefine');                                                                                 // 4
var hide = require('./_hide');                                                                                         // 5
var has = require('./_has');                                                                                           // 6
var Iterators = require('./_iterators');                                                                               // 7
var $iterCreate = require('./_iter-create');                                                                           // 8
var setToStringTag = require('./_set-to-string-tag');                                                                  // 9
var getPrototypeOf = require('./_object-gpo');                                                                         // 10
var ITERATOR = require('./_wks')('iterator');                                                                          // 11
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`                                // 12
var FF_ITERATOR = '@@iterator';                                                                                        // 13
var KEYS = 'keys';                                                                                                     // 14
var VALUES = 'values';                                                                                                 // 15
                                                                                                                       // 16
var returnThis = function () { return this; };                                                                         // 17
                                                                                                                       // 18
module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {                                   // 19
  $iterCreate(Constructor, NAME, next);                                                                                // 20
  var getMethod = function (kind) {                                                                                    // 21
    if (!BUGGY && kind in proto) return proto[kind];                                                                   // 22
    switch (kind) {                                                                                                    // 23
      case KEYS: return function keys() { return new Constructor(this, kind); };                                       // 24
      case VALUES: return function values() { return new Constructor(this, kind); };                                   // 25
    } return function entries() { return new Constructor(this, kind); };                                               // 26
  };                                                                                                                   // 27
  var TAG = NAME + ' Iterator';                                                                                        // 28
  var DEF_VALUES = DEFAULT == VALUES;                                                                                  // 29
  var VALUES_BUG = false;                                                                                              // 30
  var proto = Base.prototype;                                                                                          // 31
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];                                    // 32
  var $default = (!BUGGY && $native) || getMethod(DEFAULT);                                                            // 33
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;                                  // 34
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;                                               // 35
  var methods, key, IteratorPrototype;                                                                                 // 36
  // Fix native                                                                                                        // 37
  if ($anyNative) {                                                                                                    // 38
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));                                                   // 39
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {                                            // 40
      // Set @@toStringTag to native iterators                                                                         // 41
      setToStringTag(IteratorPrototype, TAG, true);                                                                    // 42
      // fix for some old engines                                                                                      // 43
      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);                // 44
    }                                                                                                                  // 45
  }                                                                                                                    // 46
  // fix Array#{values, @@iterator}.name in V8 / FF                                                                    // 47
  if (DEF_VALUES && $native && $native.name !== VALUES) {                                                              // 48
    VALUES_BUG = true;                                                                                                 // 49
    $default = function values() { return $native.call(this); };                                                       // 50
  }                                                                                                                    // 51
  // Define iterator                                                                                                   // 52
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {                                             // 53
    hide(proto, ITERATOR, $default);                                                                                   // 54
  }                                                                                                                    // 55
  // Plug for library                                                                                                  // 56
  Iterators[NAME] = $default;                                                                                          // 57
  Iterators[TAG] = returnThis;                                                                                         // 58
  if (DEFAULT) {                                                                                                       // 59
    methods = {                                                                                                        // 60
      values: DEF_VALUES ? $default : getMethod(VALUES),                                                               // 61
      keys: IS_SET ? $default : getMethod(KEYS),                                                                       // 62
      entries: $entries                                                                                                // 63
    };                                                                                                                 // 64
    if (FORCED) for (key in methods) {                                                                                 // 65
      if (!(key in proto)) redefine(proto, key, methods[key]);                                                         // 66
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);                                      // 67
  }                                                                                                                    // 68
  return methods;                                                                                                      // 69
};                                                                                                                     // 70
                                                                                                                       // 71
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-create.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_iter-create.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var create = require('./_object-create');                                                                              // 2
var descriptor = require('./_property-desc');                                                                          // 3
var setToStringTag = require('./_set-to-string-tag');                                                                  // 4
var IteratorPrototype = {};                                                                                            // 5
                                                                                                                       // 6
// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                                        // 7
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });                    // 8
                                                                                                                       // 9
module.exports = function (Constructor, NAME, next) {                                                                  // 10
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });                                    // 11
  setToStringTag(Constructor, NAME + ' Iterator');                                                                     // 12
};                                                                                                                     // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-gpo.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_object-gpo.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)                                                                        // 1
var has = require('./_has');                                                                                           // 2
var toObject = require('./_to-object');                                                                                // 3
var IE_PROTO = require('./_shared-key')('IE_PROTO');                                                                   // 4
var ObjectProto = Object.prototype;                                                                                    // 5
                                                                                                                       // 6
module.exports = Object.getPrototypeOf || function (O) {                                                               // 7
  O = toObject(O);                                                                                                     // 8
  if (has(O, IE_PROTO)) return O[IE_PROTO];                                                                            // 9
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {                                              // 10
    return O.constructor.prototype;                                                                                    // 11
  } return O instanceof Object ? ObjectProto : null;                                                                   // 12
};                                                                                                                     // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-object.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_to-object.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.1.13 ToObject(argument)                                                                                           // 1
var defined = require('./_defined');                                                                                   // 2
module.exports = function (it) {                                                                                       // 3
  return Object(defined(it));                                                                                          // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-step.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_iter-step.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = function (done, value) {                                                                              // 1
  return { value: value, done: !!done };                                                                               // 2
};                                                                                                                     // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_set-species.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_set-species.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var global = require('./_global');                                                                                     // 2
var dP = require('./_object-dp');                                                                                      // 3
var DESCRIPTORS = require('./_descriptors');                                                                           // 4
var SPECIES = require('./_wks')('species');                                                                            // 5
                                                                                                                       // 6
module.exports = function (KEY) {                                                                                      // 7
  var C = global[KEY];                                                                                                 // 8
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {                                                              // 9
    configurable: true,                                                                                                // 10
    get: function () { return this; }                                                                                  // 11
  });                                                                                                                  // 12
};                                                                                                                     // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_validate-collection.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_validate-collection.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object');                                                                                // 1
module.exports = function (it, TYPE) {                                                                                 // 2
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');               // 3
  return it;                                                                                                           // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_collection.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_collection.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var global = require('./_global');                                                                                     // 2
var $export = require('./_export');                                                                                    // 3
var redefine = require('./_redefine');                                                                                 // 4
var redefineAll = require('./_redefine-all');                                                                          // 5
var meta = require('./_meta');                                                                                         // 6
var forOf = require('./_for-of');                                                                                      // 7
var anInstance = require('./_an-instance');                                                                            // 8
var isObject = require('./_is-object');                                                                                // 9
var fails = require('./_fails');                                                                                       // 10
var $iterDetect = require('./_iter-detect');                                                                           // 11
var setToStringTag = require('./_set-to-string-tag');                                                                  // 12
var inheritIfRequired = require('./_inherit-if-required');                                                             // 13
                                                                                                                       // 14
module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {                                          // 15
  var Base = global[NAME];                                                                                             // 16
  var C = Base;                                                                                                        // 17
  var ADDER = IS_MAP ? 'set' : 'add';                                                                                  // 18
  var proto = C && C.prototype;                                                                                        // 19
  var O = {};                                                                                                          // 20
  var fixMethod = function (KEY) {                                                                                     // 21
    var fn = proto[KEY];                                                                                               // 22
    redefine(proto, KEY,                                                                                               // 23
      KEY == 'delete' ? function (a) {                                                                                 // 24
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);                                       // 25
      } : KEY == 'has' ? function has(a) {                                                                             // 26
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);                                       // 27
      } : KEY == 'get' ? function get(a) {                                                                             // 28
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);                                   // 29
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }                              // 30
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }                                       // 31
    );                                                                                                                 // 32
  };                                                                                                                   // 33
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {                                     // 34
    new C().entries().next();                                                                                          // 35
  }))) {                                                                                                               // 36
    // create collection constructor                                                                                   // 37
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);                                                           // 38
    redefineAll(C.prototype, methods);                                                                                 // 39
    meta.NEED = true;                                                                                                  // 40
  } else {                                                                                                             // 41
    var instance = new C();                                                                                            // 42
    // early implementations not supports chaining                                                                     // 43
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;                                            // 44
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false                               // 45
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });                                                // 46
    // most early implementations doesn't supports iterables, most modern - not close it correctly                     // 47
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new                // 48
    // for early implementations -0 and +0 not the same                                                                // 49
    var BUGGY_ZERO = !IS_WEAK && fails(function () {                                                                   // 50
      // V8 ~ Chromium 42- fails only with 5+ elements                                                                 // 51
      var $instance = new C();                                                                                         // 52
      var index = 5;                                                                                                   // 53
      while (index--) $instance[ADDER](index, index);                                                                  // 54
      return !$instance.has(-0);                                                                                       // 55
    });                                                                                                                // 56
    if (!ACCEPT_ITERABLES) {                                                                                           // 57
      C = wrapper(function (target, iterable) {                                                                        // 58
        anInstance(target, C, NAME);                                                                                   // 59
        var that = inheritIfRequired(new Base(), target, C);                                                           // 60
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);                                         // 61
        return that;                                                                                                   // 62
      });                                                                                                              // 63
      C.prototype = proto;                                                                                             // 64
      proto.constructor = C;                                                                                           // 65
    }                                                                                                                  // 66
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {                                                                          // 67
      fixMethod('delete');                                                                                             // 68
      fixMethod('has');                                                                                                // 69
      IS_MAP && fixMethod('get');                                                                                      // 70
    }                                                                                                                  // 71
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);                                                                // 72
    // weak collections should not contains .clear method                                                              // 73
    if (IS_WEAK && proto.clear) delete proto.clear;                                                                    // 74
  }                                                                                                                    // 75
                                                                                                                       // 76
  setToStringTag(C, NAME);                                                                                             // 77
                                                                                                                       // 78
  O[NAME] = C;                                                                                                         // 79
  $export($export.G + $export.W + $export.F * (C != Base), O);                                                         // 80
                                                                                                                       // 81
  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);                                                                     // 82
                                                                                                                       // 83
  return C;                                                                                                            // 84
};                                                                                                                     // 85
                                                                                                                       // 86
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_iter-detect.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_iter-detect.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var ITERATOR = require('./_wks')('iterator');                                                                          // 1
var SAFE_CLOSING = false;                                                                                              // 2
                                                                                                                       // 3
try {                                                                                                                  // 4
  var riter = [7][ITERATOR]();                                                                                         // 5
  riter['return'] = function () { SAFE_CLOSING = true; };                                                              // 6
  // eslint-disable-next-line no-throw-literal                                                                         // 7
  Array.from(riter, function () { throw 2; });                                                                         // 8
} catch (e) { /* empty */ }                                                                                            // 9
                                                                                                                       // 10
module.exports = function (exec, skipClosing) {                                                                        // 11
  if (!skipClosing && !SAFE_CLOSING) return false;                                                                     // 12
  var safe = false;                                                                                                    // 13
  try {                                                                                                                // 14
    var arr = [7];                                                                                                     // 15
    var iter = arr[ITERATOR]();                                                                                        // 16
    iter.next = function () { return { done: safe = true }; };                                                         // 17
    arr[ITERATOR] = function () { return iter; };                                                                      // 18
    exec(arr);                                                                                                         // 19
  } catch (e) { /* empty */ }                                                                                          // 20
  return safe;                                                                                                         // 21
};                                                                                                                     // 22
                                                                                                                       // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_inherit-if-required.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_inherit-if-required.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object');                                                                                // 1
var setPrototypeOf = require('./_set-proto').set;                                                                      // 2
module.exports = function (that, target, C) {                                                                          // 3
  var S = target.constructor;                                                                                          // 4
  var P;                                                                                                               // 5
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {       // 6
    setPrototypeOf(that, P);                                                                                           // 7
  } return that;                                                                                                       // 8
};                                                                                                                     // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_set-proto.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_set-proto.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Works with __proto__ only. Old v8 can't work with null proto objects.                                               // 1
/* eslint-disable no-proto */                                                                                          // 2
var isObject = require('./_is-object');                                                                                // 3
var anObject = require('./_an-object');                                                                                // 4
var check = function (O, proto) {                                                                                      // 5
  anObject(O);                                                                                                         // 6
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");                        // 7
};                                                                                                                     // 8
module.exports = {                                                                                                     // 9
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line                                            // 10
    function (test, buggy, set) {                                                                                      // 11
      try {                                                                                                            // 12
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);     // 13
        set(test, []);                                                                                                 // 14
        buggy = !(test instanceof Array);                                                                              // 15
      } catch (e) { buggy = true; }                                                                                    // 16
      return function setPrototypeOf(O, proto) {                                                                       // 17
        check(O, proto);                                                                                               // 18
        if (buggy) O.__proto__ = proto;                                                                                // 19
        else set(O, proto);                                                                                            // 20
        return O;                                                                                                      // 21
      };                                                                                                               // 22
    }({}, false) : undefined),                                                                                         // 23
  check: check                                                                                                         // 24
};                                                                                                                     // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.set.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.set.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var strong = require('./_collection-strong');                                                                          // 2
var validate = require('./_validate-collection');                                                                      // 3
var SET = 'Set';                                                                                                       // 4
                                                                                                                       // 5
// 23.2 Set Objects                                                                                                    // 6
module.exports = require('./_collection')(SET, function (get) {                                                        // 7
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };                        // 8
}, {                                                                                                                   // 9
  // 23.2.3.1 Set.prototype.add(value)                                                                                 // 10
  add: function add(value) {                                                                                           // 11
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);                                    // 12
  }                                                                                                                    // 13
}, strong);                                                                                                            // 14
                                                                                                                       // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.iterator.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.iterator.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $at = require('./_string-at')(true);                                                                               // 2
                                                                                                                       // 3
// 21.1.3.27 String.prototype[@@iterator]()                                                                            // 4
require('./_iter-define')(String, 'String', function (iterated) {                                                      // 5
  this._t = String(iterated); // target                                                                                // 6
  this._i = 0;                // next index                                                                            // 7
// 21.1.5.2.1 %StringIteratorPrototype%.next()                                                                         // 8
}, function () {                                                                                                       // 9
  var O = this._t;                                                                                                     // 10
  var index = this._i;                                                                                                 // 11
  var point;                                                                                                           // 12
  if (index >= O.length) return { value: undefined, done: true };                                                      // 13
  point = $at(O, index);                                                                                               // 14
  this._i += point.length;                                                                                             // 15
  return { value: point, done: false };                                                                                // 16
});                                                                                                                    // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_string-at.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_string-at.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var toInteger = require('./_to-integer');                                                                              // 1
var defined = require('./_defined');                                                                                   // 2
// true  -> String#at                                                                                                  // 3
// false -> String#codePointAt                                                                                         // 4
module.exports = function (TO_STRING) {                                                                                // 5
  return function (that, pos) {                                                                                        // 6
    var s = String(defined(that));                                                                                     // 7
    var i = toInteger(pos);                                                                                            // 8
    var l = s.length;                                                                                                  // 9
    var a, b;                                                                                                          // 10
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;                                                            // 11
    a = s.charCodeAt(i);                                                                                               // 12
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff                 // 13
      ? TO_STRING ? s.charAt(i) : a                                                                                    // 14
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;                                   // 15
  };                                                                                                                   // 16
};                                                                                                                     // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.is-array.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.is-array.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)                                                                              // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S, 'Array', { isArray: require('./_is-array') });                                                      // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.from.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.from.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var ctx = require('./_ctx');                                                                                           // 2
var $export = require('./_export');                                                                                    // 3
var toObject = require('./_to-object');                                                                                // 4
var call = require('./_iter-call');                                                                                    // 5
var isArrayIter = require('./_is-array-iter');                                                                         // 6
var toLength = require('./_to-length');                                                                                // 7
var createProperty = require('./_create-property');                                                                    // 8
var getIterFn = require('./core.get-iterator-method');                                                                 // 9
                                                                                                                       // 10
$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {          // 11
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)                                            // 12
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {                                      // 13
    var O = toObject(arrayLike);                                                                                       // 14
    var C = typeof this == 'function' ? this : Array;                                                                  // 15
    var aLen = arguments.length;                                                                                       // 16
    var mapfn = aLen > 1 ? arguments[1] : undefined;                                                                   // 17
    var mapping = mapfn !== undefined;                                                                                 // 18
    var index = 0;                                                                                                     // 19
    var iterFn = getIterFn(O);                                                                                         // 20
    var length, result, step, iterator;                                                                                // 21
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);                                           // 22
    // if object isn't iterable or it's array with default iterator - use simple case                                  // 23
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {                                                 // 24
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {                     // 25
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);        // 26
      }                                                                                                                // 27
    } else {                                                                                                           // 28
      length = toLength(O.length);                                                                                     // 29
      for (result = new C(length); length > index; index++) {                                                          // 30
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);                                    // 31
      }                                                                                                                // 32
    }                                                                                                                  // 33
    result.length = index;                                                                                             // 34
    return result;                                                                                                     // 35
  }                                                                                                                    // 36
});                                                                                                                    // 37
                                                                                                                       // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_create-property.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_create-property.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $defineProperty = require('./_object-dp');                                                                         // 2
var createDesc = require('./_property-desc');                                                                          // 3
                                                                                                                       // 4
module.exports = function (object, index, value) {                                                                     // 5
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));                                         // 6
  else object[index] = value;                                                                                          // 7
};                                                                                                                     // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.of.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.of.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var createProperty = require('./_create-property');                                                                    // 3
                                                                                                                       // 4
// WebKit Array.of isn't generic                                                                                       // 5
$export($export.S + $export.F * require('./_fails')(function () {                                                      // 6
  function F() { /* empty */ }                                                                                         // 7
  return !(Array.of.call(F) instanceof F);                                                                             // 8
}), 'Array', {                                                                                                         // 9
  // 22.1.2.3 Array.of( ...items)                                                                                      // 10
  of: function of(/* ...args */) {                                                                                     // 11
    var index = 0;                                                                                                     // 12
    var aLen = arguments.length;                                                                                       // 13
    var result = new (typeof this == 'function' ? this : Array)(aLen);                                                 // 14
    while (aLen > index) createProperty(result, index, arguments[index++]);                                            // 15
    result.length = aLen;                                                                                              // 16
    return result;                                                                                                     // 17
  }                                                                                                                    // 18
});                                                                                                                    // 19
                                                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.join.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.join.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// 22.1.3.13 Array.prototype.join(separator)                                                                           // 2
var $export = require('./_export');                                                                                    // 3
var toIObject = require('./_to-iobject');                                                                              // 4
var arrayJoin = [].join;                                                                                               // 5
                                                                                                                       // 6
// fallback for not array-like strings                                                                                 // 7
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator) {                                                                                     // 9
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);                                 // 10
  }                                                                                                                    // 11
});                                                                                                                    // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_strict-method.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_strict-method.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var fails = require('./_fails');                                                                                       // 2
                                                                                                                       // 3
module.exports = function (method, arg) {                                                                              // 4
  return !!method && fails(function () {                                                                               // 5
    // eslint-disable-next-line no-useless-call                                                                        // 6
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);                                       // 7
  });                                                                                                                  // 8
};                                                                                                                     // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.slice.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.slice.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var html = require('./_html');                                                                                         // 3
var cof = require('./_cof');                                                                                           // 4
var toAbsoluteIndex = require('./_to-absolute-index');                                                                 // 5
var toLength = require('./_to-length');                                                                                // 6
var arraySlice = [].slice;                                                                                             // 7
                                                                                                                       // 8
// fallback for not array-like ES3 strings and DOM objects                                                             // 9
$export($export.P + $export.F * require('./_fails')(function () {                                                      // 10
  if (html) arraySlice.call(html);                                                                                     // 11
}), 'Array', {                                                                                                         // 12
  slice: function slice(begin, end) {                                                                                  // 13
    var len = toLength(this.length);                                                                                   // 14
    var klass = cof(this);                                                                                             // 15
    end = end === undefined ? len : end;                                                                               // 16
    if (klass == 'Array') return arraySlice.call(this, begin, end);                                                    // 17
    var start = toAbsoluteIndex(begin, len);                                                                           // 18
    var upTo = toAbsoluteIndex(end, len);                                                                              // 19
    var size = toLength(upTo - start);                                                                                 // 20
    var cloned = new Array(size);                                                                                      // 21
    var i = 0;                                                                                                         // 22
    for (; i < size; i++) cloned[i] = klass == 'String'                                                                // 23
      ? this.charAt(start + i)                                                                                         // 24
      : this[start + i];                                                                                               // 25
    return cloned;                                                                                                     // 26
  }                                                                                                                    // 27
});                                                                                                                    // 28
                                                                                                                       // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.sort.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.sort.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var aFunction = require('./_a-function');                                                                              // 3
var toObject = require('./_to-object');                                                                                // 4
var fails = require('./_fails');                                                                                       // 5
var $sort = [].sort;                                                                                                   // 6
var test = [1, 2, 3];                                                                                                  // 7
                                                                                                                       // 8
$export($export.P + $export.F * (fails(function () {                                                                   // 9
  // IE8-                                                                                                              // 10
  test.sort(undefined);                                                                                                // 11
}) || !fails(function () {                                                                                             // 12
  // V8 bug                                                                                                            // 13
  test.sort(null);                                                                                                     // 14
  // Old WebKit                                                                                                        // 15
}) || !require('./_strict-method')($sort)), 'Array', {                                                                 // 16
  // 22.1.3.25 Array.prototype.sort(comparefn)                                                                         // 17
  sort: function sort(comparefn) {                                                                                     // 18
    return comparefn === undefined                                                                                     // 19
      ? $sort.call(toObject(this))                                                                                     // 20
      : $sort.call(toObject(this), aFunction(comparefn));                                                              // 21
  }                                                                                                                    // 22
});                                                                                                                    // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.for-each.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.for-each.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var $forEach = require('./_array-methods')(0);                                                                         // 3
var STRICT = require('./_strict-method')([].forEach, true);                                                            // 4
                                                                                                                       // 5
$export($export.P + $export.F * !STRICT, 'Array', {                                                                    // 6
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])                                             // 7
  forEach: function forEach(callbackfn /* , thisArg */) {                                                              // 8
    return $forEach(this, callbackfn, arguments[1]);                                                                   // 9
  }                                                                                                                    // 10
});                                                                                                                    // 11
                                                                                                                       // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_array-methods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_array-methods.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 0 -> Array#forEach                                                                                                  // 1
// 1 -> Array#map                                                                                                      // 2
// 2 -> Array#filter                                                                                                   // 3
// 3 -> Array#some                                                                                                     // 4
// 4 -> Array#every                                                                                                    // 5
// 5 -> Array#find                                                                                                     // 6
// 6 -> Array#findIndex                                                                                                // 7
var ctx = require('./_ctx');                                                                                           // 8
var IObject = require('./_iobject');                                                                                   // 9
var toObject = require('./_to-object');                                                                                // 10
var toLength = require('./_to-length');                                                                                // 11
var asc = require('./_array-species-create');                                                                          // 12
module.exports = function (TYPE, $create) {                                                                            // 13
  var IS_MAP = TYPE == 1;                                                                                              // 14
  var IS_FILTER = TYPE == 2;                                                                                           // 15
  var IS_SOME = TYPE == 3;                                                                                             // 16
  var IS_EVERY = TYPE == 4;                                                                                            // 17
  var IS_FIND_INDEX = TYPE == 6;                                                                                       // 18
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;                                                                           // 19
  var create = $create || asc;                                                                                         // 20
  return function ($this, callbackfn, that) {                                                                          // 21
    var O = toObject($this);                                                                                           // 22
    var self = IObject(O);                                                                                             // 23
    var f = ctx(callbackfn, that, 3);                                                                                  // 24
    var length = toLength(self.length);                                                                                // 25
    var index = 0;                                                                                                     // 26
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;                            // 27
    var val, res;                                                                                                      // 28
    for (;length > index; index++) if (NO_HOLES || index in self) {                                                    // 29
      val = self[index];                                                                                               // 30
      res = f(val, index, O);                                                                                          // 31
      if (TYPE) {                                                                                                      // 32
        if (IS_MAP) result[index] = res;   // map                                                                      // 33
        else if (res) switch (TYPE) {                                                                                  // 34
          case 3: return true;             // some                                                                     // 35
          case 5: return val;              // find                                                                     // 36
          case 6: return index;            // findIndex                                                                // 37
          case 2: result.push(val);        // filter                                                                   // 38
        } else if (IS_EVERY) return false; // every                                                                    // 39
      }                                                                                                                // 40
    }                                                                                                                  // 41
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;                                               // 42
  };                                                                                                                   // 43
};                                                                                                                     // 44
                                                                                                                       // 45
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_array-species-create.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_array-species-create.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)                                                                   // 1
var speciesConstructor = require('./_array-species-constructor');                                                      // 2
                                                                                                                       // 3
module.exports = function (original, length) {                                                                         // 4
  return new (speciesConstructor(original))(length);                                                                   // 5
};                                                                                                                     // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_array-species-constructor.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_array-species-constructor.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var isObject = require('./_is-object');                                                                                // 1
var isArray = require('./_is-array');                                                                                  // 2
var SPECIES = require('./_wks')('species');                                                                            // 3
                                                                                                                       // 4
module.exports = function (original) {                                                                                 // 5
  var C;                                                                                                               // 6
  if (isArray(original)) {                                                                                             // 7
    C = original.constructor;                                                                                          // 8
    // cross-realm fallback                                                                                            // 9
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;                                // 10
    if (isObject(C)) {                                                                                                 // 11
      C = C[SPECIES];                                                                                                  // 12
      if (C === null) C = undefined;                                                                                   // 13
    }                                                                                                                  // 14
  } return C === undefined ? Array : C;                                                                                // 15
};                                                                                                                     // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.map.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.map.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var $map = require('./_array-methods')(1);                                                                             // 3
                                                                                                                       // 4
$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {                                 // 5
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])                                                 // 6
  map: function map(callbackfn /* , thisArg */) {                                                                      // 7
    return $map(this, callbackfn, arguments[1]);                                                                       // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.filter.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.filter.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var $filter = require('./_array-methods')(2);                                                                          // 3
                                                                                                                       // 4
$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {                              // 5
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])                                               // 6
  filter: function filter(callbackfn /* , thisArg */) {                                                                // 7
    return $filter(this, callbackfn, arguments[1]);                                                                    // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.some.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.some.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var $some = require('./_array-methods')(3);                                                                            // 3
                                                                                                                       // 4
$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {                                // 5
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])                                                // 6
  some: function some(callbackfn /* , thisArg */) {                                                                    // 7
    return $some(this, callbackfn, arguments[1]);                                                                      // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.every.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.every.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var $every = require('./_array-methods')(4);                                                                           // 3
                                                                                                                       // 4
$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {                               // 5
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])                                                // 6
  every: function every(callbackfn /* , thisArg */) {                                                                  // 7
    return $every(this, callbackfn, arguments[1]);                                                                     // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.reduce.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.reduce.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var $reduce = require('./_array-reduce');                                                                              // 3
                                                                                                                       // 4
$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {                              // 5
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])                                         // 6
  reduce: function reduce(callbackfn /* , initialValue */) {                                                           // 7
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);                                           // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_array-reduce.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_array-reduce.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var aFunction = require('./_a-function');                                                                              // 1
var toObject = require('./_to-object');                                                                                // 2
var IObject = require('./_iobject');                                                                                   // 3
var toLength = require('./_to-length');                                                                                // 4
                                                                                                                       // 5
module.exports = function (that, callbackfn, aLen, memo, isRight) {                                                    // 6
  aFunction(callbackfn);                                                                                               // 7
  var O = toObject(that);                                                                                              // 8
  var self = IObject(O);                                                                                               // 9
  var length = toLength(O.length);                                                                                     // 10
  var index = isRight ? length - 1 : 0;                                                                                // 11
  var i = isRight ? -1 : 1;                                                                                            // 12
  if (aLen < 2) for (;;) {                                                                                             // 13
    if (index in self) {                                                                                               // 14
      memo = self[index];                                                                                              // 15
      index += i;                                                                                                      // 16
      break;                                                                                                           // 17
    }                                                                                                                  // 18
    index += i;                                                                                                        // 19
    if (isRight ? index < 0 : length <= index) {                                                                       // 20
      throw TypeError('Reduce of empty array with no initial value');                                                  // 21
    }                                                                                                                  // 22
  }                                                                                                                    // 23
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {                                        // 24
    memo = callbackfn(memo, self[index], index, O);                                                                    // 25
  }                                                                                                                    // 26
  return memo;                                                                                                         // 27
};                                                                                                                     // 28
                                                                                                                       // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.reduce-right.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.reduce-right.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var $reduce = require('./_array-reduce');                                                                              // 3
                                                                                                                       // 4
$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {                         // 5
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])                                    // 6
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {                                                 // 7
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);                                            // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.index-of.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.index-of.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var $indexOf = require('./_array-includes')(false);                                                                    // 3
var $native = [].indexOf;                                                                                              // 4
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;                                                           // 5
                                                                                                                       // 6
$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {                   // 7
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])                                        // 8
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {                                                     // 9
    return NEGATIVE_ZERO                                                                                               // 10
      // convert -0 to +0                                                                                              // 11
      ? $native.apply(this, arguments) || 0                                                                            // 12
      : $indexOf(this, searchElement, arguments[1]);                                                                   // 13
  }                                                                                                                    // 14
});                                                                                                                    // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.last-index-of.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.last-index-of.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var toIObject = require('./_to-iobject');                                                                              // 3
var toInteger = require('./_to-integer');                                                                              // 4
var toLength = require('./_to-length');                                                                                // 5
var $native = [].lastIndexOf;                                                                                          // 6
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;                                                       // 7
                                                                                                                       // 8
$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {                   // 9
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])                                    // 10
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {                                        // 11
    // convert -0 to +0                                                                                                // 12
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;                                                     // 13
    var O = toIObject(this);                                                                                           // 14
    var length = toLength(O.length);                                                                                   // 15
    var index = length - 1;                                                                                            // 16
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));                                        // 17
    if (index < 0) index = length + index;                                                                             // 18
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;                      // 19
    return -1;                                                                                                         // 20
  }                                                                                                                    // 21
});                                                                                                                    // 22
                                                                                                                       // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.copy-within.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.copy-within.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)                                               // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });                                          // 4
                                                                                                                       // 5
require('./_add-to-unscopables')('copyWithin');                                                                        // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_array-copy-within.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_array-copy-within.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)                                               // 1
'use strict';                                                                                                          // 2
var toObject = require('./_to-object');                                                                                // 3
var toAbsoluteIndex = require('./_to-absolute-index');                                                                 // 4
var toLength = require('./_to-length');                                                                                // 5
                                                                                                                       // 6
module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {              // 7
  var O = toObject(this);                                                                                              // 8
  var len = toLength(O.length);                                                                                        // 9
  var to = toAbsoluteIndex(target, len);                                                                               // 10
  var from = toAbsoluteIndex(start, len);                                                                              // 11
  var end = arguments.length > 2 ? arguments[2] : undefined;                                                           // 12
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);                        // 13
  var inc = 1;                                                                                                         // 14
  if (from < to && to < from + count) {                                                                                // 15
    inc = -1;                                                                                                          // 16
    from += count - 1;                                                                                                 // 17
    to += count - 1;                                                                                                   // 18
  }                                                                                                                    // 19
  while (count-- > 0) {                                                                                                // 20
    if (from in O) O[to] = O[from];                                                                                    // 21
    else delete O[to];                                                                                                 // 22
    to += inc;                                                                                                         // 23
    from += inc;                                                                                                       // 24
  } return O;                                                                                                          // 25
};                                                                                                                     // 26
                                                                                                                       // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_add-to-unscopables.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_add-to-unscopables.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 22.1.3.31 Array.prototype[@@unscopables]                                                                            // 1
var UNSCOPABLES = require('./_wks')('unscopables');                                                                    // 2
var ArrayProto = Array.prototype;                                                                                      // 3
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});                             // 4
module.exports = function (key) {                                                                                      // 5
  ArrayProto[UNSCOPABLES][key] = true;                                                                                 // 6
};                                                                                                                     // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.fill.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.fill.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)                                                  // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.P, 'Array', { fill: require('./_array-fill') });                                                       // 4
                                                                                                                       // 5
require('./_add-to-unscopables')('fill');                                                                              // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_array-fill.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_array-fill.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)                                                  // 1
'use strict';                                                                                                          // 2
var toObject = require('./_to-object');                                                                                // 3
var toAbsoluteIndex = require('./_to-absolute-index');                                                                 // 4
var toLength = require('./_to-length');                                                                                // 5
module.exports = function fill(value /* , start = 0, end = @length */) {                                               // 6
  var O = toObject(this);                                                                                              // 7
  var length = toLength(O.length);                                                                                     // 8
  var aLen = arguments.length;                                                                                         // 9
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);                                            // 10
  var end = aLen > 2 ? arguments[2] : undefined;                                                                       // 11
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);                                              // 12
  while (endPos > index) O[index++] = value;                                                                           // 13
  return O;                                                                                                            // 14
};                                                                                                                     // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.find.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.find.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)                                                       // 2
var $export = require('./_export');                                                                                    // 3
var $find = require('./_array-methods')(5);                                                                            // 4
var KEY = 'find';                                                                                                      // 5
var forced = true;                                                                                                     // 6
// Shouldn't skip holes                                                                                                // 7
if (KEY in []) Array(1)[KEY](function () { forced = false; });                                                         // 8
$export($export.P + $export.F * forced, 'Array', {                                                                     // 9
  find: function find(callbackfn /* , that = undefined */) {                                                           // 10
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);                                   // 11
  }                                                                                                                    // 12
});                                                                                                                    // 13
require('./_add-to-unscopables')(KEY);                                                                                 // 14
                                                                                                                       // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.find-index.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.find-index.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)                                                  // 2
var $export = require('./_export');                                                                                    // 3
var $find = require('./_array-methods')(6);                                                                            // 4
var KEY = 'findIndex';                                                                                                 // 5
var forced = true;                                                                                                     // 6
// Shouldn't skip holes                                                                                                // 7
if (KEY in []) Array(1)[KEY](function () { forced = false; });                                                         // 8
$export($export.P + $export.F * forced, 'Array', {                                                                     // 9
  findIndex: function findIndex(callbackfn /* , that = undefined */) {                                                 // 10
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);                                   // 11
  }                                                                                                                    // 12
});                                                                                                                    // 13
require('./_add-to-unscopables')(KEY);                                                                                 // 14
                                                                                                                       // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.species.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.species.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./_set-species')('Array');                                                                                    // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.array.iterator.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.array.iterator.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var addToUnscopables = require('./_add-to-unscopables');                                                               // 2
var step = require('./_iter-step');                                                                                    // 3
var Iterators = require('./_iterators');                                                                               // 4
var toIObject = require('./_to-iobject');                                                                              // 5
                                                                                                                       // 6
// 22.1.3.4 Array.prototype.entries()                                                                                  // 7
// 22.1.3.13 Array.prototype.keys()                                                                                    // 8
// 22.1.3.29 Array.prototype.values()                                                                                  // 9
// 22.1.3.30 Array.prototype[@@iterator]()                                                                             // 10
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {                                 // 11
  this._t = toIObject(iterated); // target                                                                             // 12
  this._i = 0;                   // next index                                                                         // 13
  this._k = kind;                // kind                                                                               // 14
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                                          // 15
}, function () {                                                                                                       // 16
  var O = this._t;                                                                                                     // 17
  var kind = this._k;                                                                                                  // 18
  var index = this._i++;                                                                                               // 19
  if (!O || index >= O.length) {                                                                                       // 20
    this._t = undefined;                                                                                               // 21
    return step(1);                                                                                                    // 22
  }                                                                                                                    // 23
  if (kind == 'keys') return step(0, index);                                                                           // 24
  if (kind == 'values') return step(0, O[index]);                                                                      // 25
  return step(0, [index, O[index]]);                                                                                   // 26
}, 'values');                                                                                                          // 27
                                                                                                                       // 28
// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                                                 // 29
Iterators.Arguments = Iterators.Array;                                                                                 // 30
                                                                                                                       // 31
addToUnscopables('keys');                                                                                              // 32
addToUnscopables('values');                                                                                            // 33
addToUnscopables('entries');                                                                                           // 34
                                                                                                                       // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.function.bind.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.function.bind.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)                                                       // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.P, 'Function', { bind: require('./_bind') });                                                          // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_bind.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_bind.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var aFunction = require('./_a-function');                                                                              // 2
var isObject = require('./_is-object');                                                                                // 3
var invoke = require('./_invoke');                                                                                     // 4
var arraySlice = [].slice;                                                                                             // 5
var factories = {};                                                                                                    // 6
                                                                                                                       // 7
var construct = function (F, len, args) {                                                                              // 8
  if (!(len in factories)) {                                                                                           // 9
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';                                                       // 10
    // eslint-disable-next-line no-new-func                                                                            // 11
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');                                             // 12
  } return factories[len](F, args);                                                                                    // 13
};                                                                                                                     // 14
                                                                                                                       // 15
module.exports = Function.bind || function bind(that /* , ...args */) {                                                // 16
  var fn = aFunction(this);                                                                                            // 17
  var partArgs = arraySlice.call(arguments, 1);                                                                        // 18
  var bound = function (/* args... */) {                                                                               // 19
    var args = partArgs.concat(arraySlice.call(arguments));                                                            // 20
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);                          // 21
  };                                                                                                                   // 22
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;                                                          // 23
  return bound;                                                                                                        // 24
};                                                                                                                     // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_invoke.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_invoke.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// fast apply, http://jsperf.lnkit.com/fast-apply/5                                                                    // 1
module.exports = function (fn, args, that) {                                                                           // 2
  var un = that === undefined;                                                                                         // 3
  switch (args.length) {                                                                                               // 4
    case 0: return un ? fn()                                                                                           // 5
                      : fn.call(that);                                                                                 // 6
    case 1: return un ? fn(args[0])                                                                                    // 7
                      : fn.call(that, args[0]);                                                                        // 8
    case 2: return un ? fn(args[0], args[1])                                                                           // 9
                      : fn.call(that, args[0], args[1]);                                                               // 10
    case 3: return un ? fn(args[0], args[1], args[2])                                                                  // 11
                      : fn.call(that, args[0], args[1], args[2]);                                                      // 12
    case 4: return un ? fn(args[0], args[1], args[2], args[3])                                                         // 13
                      : fn.call(that, args[0], args[1], args[2], args[3]);                                             // 14
  } return fn.apply(that, args);                                                                                       // 15
};                                                                                                                     // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.function.name.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.function.name.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dP = require('./_object-dp').f;                                                                                    // 1
var FProto = Function.prototype;                                                                                       // 2
var nameRE = /^\s*function ([^ (]*)/;                                                                                  // 3
var NAME = 'name';                                                                                                     // 4
                                                                                                                       // 5
// 19.2.4.2 name                                                                                                       // 6
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {                                                      // 7
  configurable: true,                                                                                                  // 8
  get: function () {                                                                                                   // 9
    try {                                                                                                              // 10
      return ('' + this).match(nameRE)[1];                                                                             // 11
    } catch (e) {                                                                                                      // 12
      return '';                                                                                                       // 13
    }                                                                                                                  // 14
  }                                                                                                                    // 15
});                                                                                                                    // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.function.has-instance.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.function.has-instance.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var isObject = require('./_is-object');                                                                                // 2
var getPrototypeOf = require('./_object-gpo');                                                                         // 3
var HAS_INSTANCE = require('./_wks')('hasInstance');                                                                   // 4
var FunctionProto = Function.prototype;                                                                                // 5
// 19.2.3.6 Function.prototype[@@hasInstance](V)                                                                       // 6
if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {   // 7
  if (typeof this != 'function' || !isObject(O)) return false;                                                         // 8
  if (!isObject(this.prototype)) return O instanceof this;                                                             // 9
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:                               // 10
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;                                                 // 11
  return false;                                                                                                        // 12
} });                                                                                                                  // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.acosh.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.acosh.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.3 Math.acosh(x)                                                                                              // 1
var $export = require('./_export');                                                                                    // 2
var log1p = require('./_math-log1p');                                                                                  // 3
var sqrt = Math.sqrt;                                                                                                  // 4
var $acosh = Math.acosh;                                                                                               // 5
                                                                                                                       // 6
$export($export.S + $export.F * !($acosh                                                                               // 7
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509                                                        // 8
  && Math.floor($acosh(Number.MAX_VALUE)) == 710                                                                       // 9
  // Tor Browser bug: Math.acosh(Infinity) -> NaN                                                                      // 10
  && $acosh(Infinity) == Infinity                                                                                      // 11
), 'Math', {                                                                                                           // 12
  acosh: function acosh(x) {                                                                                           // 13
    return (x = +x) < 1 ? NaN : x > 94906265.62425156                                                                  // 14
      ? Math.log(x) + Math.LN2                                                                                         // 15
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));                                                                      // 16
  }                                                                                                                    // 17
});                                                                                                                    // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_math-log1p.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_math-log1p.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.20 Math.log1p(x)                                                                                             // 1
module.exports = Math.log1p || function log1p(x) {                                                                     // 2
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);                                               // 3
};                                                                                                                     // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.asinh.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.asinh.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.5 Math.asinh(x)                                                                                              // 1
var $export = require('./_export');                                                                                    // 2
var $asinh = Math.asinh;                                                                                               // 3
                                                                                                                       // 4
function asinh(x) {                                                                                                    // 5
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));                    // 6
}                                                                                                                      // 7
                                                                                                                       // 8
// Tor Browser bug: Math.asinh(0) -> -0                                                                                // 9
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });                             // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.atanh.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.atanh.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.7 Math.atanh(x)                                                                                              // 1
var $export = require('./_export');                                                                                    // 2
var $atanh = Math.atanh;                                                                                               // 3
                                                                                                                       // 4
// Tor Browser bug: Math.atanh(-0) -> 0                                                                                // 5
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {                                             // 6
  atanh: function atanh(x) {                                                                                           // 7
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;                                                        // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.cbrt.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.cbrt.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.9 Math.cbrt(x)                                                                                               // 1
var $export = require('./_export');                                                                                    // 2
var sign = require('./_math-sign');                                                                                    // 3
                                                                                                                       // 4
$export($export.S, 'Math', {                                                                                           // 5
  cbrt: function cbrt(x) {                                                                                             // 6
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);                                                                // 7
  }                                                                                                                    // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_math-sign.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_math-sign.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.28 Math.sign(x)                                                                                              // 1
module.exports = Math.sign || function sign(x) {                                                                       // 2
  // eslint-disable-next-line no-self-compare                                                                          // 3
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;                                                                 // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.clz32.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.clz32.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.11 Math.clz32(x)                                                                                             // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S, 'Math', {                                                                                           // 4
  clz32: function clz32(x) {                                                                                           // 5
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;                                          // 6
  }                                                                                                                    // 7
});                                                                                                                    // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.cosh.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.cosh.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.12 Math.cosh(x)                                                                                              // 1
var $export = require('./_export');                                                                                    // 2
var exp = Math.exp;                                                                                                    // 3
                                                                                                                       // 4
$export($export.S, 'Math', {                                                                                           // 5
  cosh: function cosh(x) {                                                                                             // 6
    return (exp(x = +x) + exp(-x)) / 2;                                                                                // 7
  }                                                                                                                    // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.expm1.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.expm1.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.14 Math.expm1(x)                                                                                             // 1
var $export = require('./_export');                                                                                    // 2
var $expm1 = require('./_math-expm1');                                                                                 // 3
                                                                                                                       // 4
$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });                                    // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_math-expm1.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_math-expm1.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.14 Math.expm1(x)                                                                                             // 1
var $expm1 = Math.expm1;                                                                                               // 2
module.exports = (!$expm1                                                                                              // 3
  // Old FF bug                                                                                                        // 4
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168                                            // 5
  // Tor Browser bug                                                                                                   // 6
  || $expm1(-2e-17) != -2e-17                                                                                          // 7
) ? function expm1(x) {                                                                                                // 8
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;                                  // 9
} : $expm1;                                                                                                            // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.fround.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.fround.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.16 Math.fround(x)                                                                                            // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S, 'Math', { fround: require('./_math-fround') });                                                     // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_math-fround.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_math-fround.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.16 Math.fround(x)                                                                                            // 1
var sign = require('./_math-sign');                                                                                    // 2
var pow = Math.pow;                                                                                                    // 3
var EPSILON = pow(2, -52);                                                                                             // 4
var EPSILON32 = pow(2, -23);                                                                                           // 5
var MAX32 = pow(2, 127) * (2 - EPSILON32);                                                                             // 6
var MIN32 = pow(2, -126);                                                                                              // 7
                                                                                                                       // 8
var roundTiesToEven = function (n) {                                                                                   // 9
  return n + 1 / EPSILON - 1 / EPSILON;                                                                                // 10
};                                                                                                                     // 11
                                                                                                                       // 12
module.exports = Math.fround || function fround(x) {                                                                   // 13
  var $abs = Math.abs(x);                                                                                              // 14
  var $sign = sign(x);                                                                                                 // 15
  var a, result;                                                                                                       // 16
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;                      // 17
  a = (1 + EPSILON32 / EPSILON) * $abs;                                                                                // 18
  result = a - (a - $abs);                                                                                             // 19
  // eslint-disable-next-line no-self-compare                                                                          // 20
  if (result > MAX32 || result != result) return $sign * Infinity;                                                     // 21
  return $sign * result;                                                                                               // 22
};                                                                                                                     // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.hypot.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.hypot.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])                                                                      // 1
var $export = require('./_export');                                                                                    // 2
var abs = Math.abs;                                                                                                    // 3
                                                                                                                       // 4
$export($export.S, 'Math', {                                                                                           // 5
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars                                        // 6
    var sum = 0;                                                                                                       // 7
    var i = 0;                                                                                                         // 8
    var aLen = arguments.length;                                                                                       // 9
    var larg = 0;                                                                                                      // 10
    var arg, div;                                                                                                      // 11
    while (i < aLen) {                                                                                                 // 12
      arg = abs(arguments[i++]);                                                                                       // 13
      if (larg < arg) {                                                                                                // 14
        div = larg / arg;                                                                                              // 15
        sum = sum * div * div + 1;                                                                                     // 16
        larg = arg;                                                                                                    // 17
      } else if (arg > 0) {                                                                                            // 18
        div = arg / larg;                                                                                              // 19
        sum += div * div;                                                                                              // 20
      } else sum += arg;                                                                                               // 21
    }                                                                                                                  // 22
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);                                                       // 23
  }                                                                                                                    // 24
});                                                                                                                    // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.imul.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.imul.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.18 Math.imul(x, y)                                                                                           // 1
var $export = require('./_export');                                                                                    // 2
var $imul = Math.imul;                                                                                                 // 3
                                                                                                                       // 4
// some WebKit versions fails with big numbers, some has wrong arity                                                   // 5
$export($export.S + $export.F * require('./_fails')(function () {                                                      // 6
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;                                                              // 7
}), 'Math', {                                                                                                          // 8
  imul: function imul(x, y) {                                                                                          // 9
    var UINT16 = 0xffff;                                                                                               // 10
    var xn = +x;                                                                                                       // 11
    var yn = +y;                                                                                                       // 12
    var xl = UINT16 & xn;                                                                                              // 13
    var yl = UINT16 & yn;                                                                                              // 14
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);                          // 15
  }                                                                                                                    // 16
});                                                                                                                    // 17
                                                                                                                       // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.log10.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.log10.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.21 Math.log10(x)                                                                                             // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S, 'Math', {                                                                                           // 4
  log10: function log10(x) {                                                                                           // 5
    return Math.log(x) * Math.LOG10E;                                                                                  // 6
  }                                                                                                                    // 7
});                                                                                                                    // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.log1p.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.log1p.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.20 Math.log1p(x)                                                                                             // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S, 'Math', { log1p: require('./_math-log1p') });                                                       // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.log2.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.log2.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.22 Math.log2(x)                                                                                              // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S, 'Math', {                                                                                           // 4
  log2: function log2(x) {                                                                                             // 5
    return Math.log(x) / Math.LN2;                                                                                     // 6
  }                                                                                                                    // 7
});                                                                                                                    // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.sign.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.sign.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.28 Math.sign(x)                                                                                              // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S, 'Math', { sign: require('./_math-sign') });                                                         // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.sinh.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.sinh.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.30 Math.sinh(x)                                                                                              // 1
var $export = require('./_export');                                                                                    // 2
var expm1 = require('./_math-expm1');                                                                                  // 3
var exp = Math.exp;                                                                                                    // 4
                                                                                                                       // 5
// V8 near Chromium 38 has a problem with very small numbers                                                           // 6
$export($export.S + $export.F * require('./_fails')(function () {                                                      // 7
  return !Math.sinh(-2e-17) != -2e-17;                                                                                 // 8
}), 'Math', {                                                                                                          // 9
  sinh: function sinh(x) {                                                                                             // 10
    return Math.abs(x = +x) < 1                                                                                        // 11
      ? (expm1(x) - expm1(-x)) / 2                                                                                     // 12
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);                                                                     // 13
  }                                                                                                                    // 14
});                                                                                                                    // 15
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.tanh.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.tanh.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.33 Math.tanh(x)                                                                                              // 1
var $export = require('./_export');                                                                                    // 2
var expm1 = require('./_math-expm1');                                                                                  // 3
var exp = Math.exp;                                                                                                    // 4
                                                                                                                       // 5
$export($export.S, 'Math', {                                                                                           // 6
  tanh: function tanh(x) {                                                                                             // 7
    var a = expm1(x = +x);                                                                                             // 8
    var b = expm1(-x);                                                                                                 // 9
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));                                      // 10
  }                                                                                                                    // 11
});                                                                                                                    // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.math.trunc.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.math.trunc.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.2.2.34 Math.trunc(x)                                                                                             // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S, 'Math', {                                                                                           // 4
  trunc: function trunc(it) {                                                                                          // 5
    return (it > 0 ? Math.floor : Math.ceil)(it);                                                                      // 6
  }                                                                                                                    // 7
});                                                                                                                    // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.create.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.create.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export');                                                                                    // 1
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 2
$export($export.S, 'Object', { create: require('./_object-create') });                                                 // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.define-property.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.define-property.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export');                                                                                    // 1
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)                                                         // 2
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });  // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.define-properties.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.define-properties.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export');                                                                                    // 1
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)                                                          // 2
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.get-own-property-descriptor.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.get-own-property-descriptor.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                      // 1
var toIObject = require('./_to-iobject');                                                                              // 2
var $getOwnPropertyDescriptor = require('./_object-gopd').f;                                                           // 3
                                                                                                                       // 4
require('./_object-sap')('getOwnPropertyDescriptor', function () {                                                     // 5
  return function getOwnPropertyDescriptor(it, key) {                                                                  // 6
    return $getOwnPropertyDescriptor(toIObject(it), key);                                                              // 7
  };                                                                                                                   // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-sap.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_object-sap.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// most Object methods by ES6 should accept primitives                                                                 // 1
var $export = require('./_export');                                                                                    // 2
var core = require('./_core');                                                                                         // 3
var fails = require('./_fails');                                                                                       // 4
module.exports = function (KEY, exec) {                                                                                // 5
  var fn = (core.Object || {})[KEY] || Object[KEY];                                                                    // 6
  var exp = {};                                                                                                        // 7
  exp[KEY] = exec(fn);                                                                                                 // 8
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);                                       // 9
};                                                                                                                     // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.get-prototype-of.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.get-prototype-of.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.9 Object.getPrototypeOf(O)                                                                                   // 1
var toObject = require('./_to-object');                                                                                // 2
var $getPrototypeOf = require('./_object-gpo');                                                                        // 3
                                                                                                                       // 4
require('./_object-sap')('getPrototypeOf', function () {                                                               // 5
  return function getPrototypeOf(it) {                                                                                 // 6
    return $getPrototypeOf(toObject(it));                                                                              // 7
  };                                                                                                                   // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.keys.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.keys.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.14 Object.keys(O)                                                                                            // 1
var toObject = require('./_to-object');                                                                                // 2
var $keys = require('./_object-keys');                                                                                 // 3
                                                                                                                       // 4
require('./_object-sap')('keys', function () {                                                                         // 5
  return function keys(it) {                                                                                           // 6
    return $keys(toObject(it));                                                                                        // 7
  };                                                                                                                   // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.get-own-property-names.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.get-own-property-names.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.7 Object.getOwnPropertyNames(O)                                                                              // 1
require('./_object-sap')('getOwnPropertyNames', function () {                                                          // 2
  return require('./_object-gopn-ext').f;                                                                              // 3
});                                                                                                                    // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.freeze.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.freeze.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.5 Object.freeze(O)                                                                                           // 1
var isObject = require('./_is-object');                                                                                // 2
var meta = require('./_meta').onFreeze;                                                                                // 3
                                                                                                                       // 4
require('./_object-sap')('freeze', function ($freeze) {                                                                // 5
  return function freeze(it) {                                                                                         // 6
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;                                                           // 7
  };                                                                                                                   // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.seal.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.seal.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.17 Object.seal(O)                                                                                            // 1
var isObject = require('./_is-object');                                                                                // 2
var meta = require('./_meta').onFreeze;                                                                                // 3
                                                                                                                       // 4
require('./_object-sap')('seal', function ($seal) {                                                                    // 5
  return function seal(it) {                                                                                           // 6
    return $seal && isObject(it) ? $seal(meta(it)) : it;                                                               // 7
  };                                                                                                                   // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.prevent-extensions.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.prevent-extensions.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.15 Object.preventExtensions(O)                                                                               // 1
var isObject = require('./_is-object');                                                                                // 2
var meta = require('./_meta').onFreeze;                                                                                // 3
                                                                                                                       // 4
require('./_object-sap')('preventExtensions', function ($preventExtensions) {                                          // 5
  return function preventExtensions(it) {                                                                              // 6
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;                                     // 7
  };                                                                                                                   // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.is-frozen.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.is-frozen.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.12 Object.isFrozen(O)                                                                                        // 1
var isObject = require('./_is-object');                                                                                // 2
                                                                                                                       // 3
require('./_object-sap')('isFrozen', function ($isFrozen) {                                                            // 4
  return function isFrozen(it) {                                                                                       // 5
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;                                                    // 6
  };                                                                                                                   // 7
});                                                                                                                    // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.is-sealed.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.is-sealed.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.13 Object.isSealed(O)                                                                                        // 1
var isObject = require('./_is-object');                                                                                // 2
                                                                                                                       // 3
require('./_object-sap')('isSealed', function ($isSealed) {                                                            // 4
  return function isSealed(it) {                                                                                       // 5
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;                                                    // 6
  };                                                                                                                   // 7
});                                                                                                                    // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.is-extensible.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.is-extensible.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.2.11 Object.isExtensible(O)                                                                                    // 1
var isObject = require('./_is-object');                                                                                // 2
                                                                                                                       // 3
require('./_object-sap')('isExtensible', function ($isExtensible) {                                                    // 4
  return function isExtensible(it) {                                                                                   // 5
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;                                            // 6
  };                                                                                                                   // 7
});                                                                                                                    // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.assign.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.assign.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.3.1 Object.assign(target, source)                                                                              // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });                                     // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-assign.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_object-assign.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// 19.1.2.1 Object.assign(target, source, ...)                                                                         // 2
var getKeys = require('./_object-keys');                                                                               // 3
var gOPS = require('./_object-gops');                                                                                  // 4
var pIE = require('./_object-pie');                                                                                    // 5
var toObject = require('./_to-object');                                                                                // 6
var IObject = require('./_iobject');                                                                                   // 7
var $assign = Object.assign;                                                                                           // 8
                                                                                                                       // 9
// should work with symbols and should have deterministic property order (V8 bug)                                      // 10
module.exports = !$assign || require('./_fails')(function () {                                                         // 11
  var A = {};                                                                                                          // 12
  var B = {};                                                                                                          // 13
  // eslint-disable-next-line no-undef                                                                                 // 14
  var S = Symbol();                                                                                                    // 15
  var K = 'abcdefghijklmnopqrst';                                                                                      // 16
  A[S] = 7;                                                                                                            // 17
  K.split('').forEach(function (k) { B[k] = k; });                                                                     // 18
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;                                          // 19
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars                                           // 20
  var T = toObject(target);                                                                                            // 21
  var aLen = arguments.length;                                                                                         // 22
  var index = 1;                                                                                                       // 23
  var getSymbols = gOPS.f;                                                                                             // 24
  var isEnum = pIE.f;                                                                                                  // 25
  while (aLen > index) {                                                                                               // 26
    var S = IObject(arguments[index++]);                                                                               // 27
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);                                             // 28
    var length = keys.length;                                                                                          // 29
    var j = 0;                                                                                                         // 30
    var key;                                                                                                           // 31
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];                                           // 32
  } return T;                                                                                                          // 33
} : $assign;                                                                                                           // 34
                                                                                                                       // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.is.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.is.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.3.10 Object.is(value1, value2)                                                                                 // 1
var $export = require('./_export');                                                                                    // 2
$export($export.S, 'Object', { is: require('./_same-value') });                                                        // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_same-value.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_same-value.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.9 SameValue(x, y)                                                                                               // 1
module.exports = Object.is || function is(x, y) {                                                                      // 2
  // eslint-disable-next-line no-self-compare                                                                          // 3
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;                                                      // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.set-prototype-of.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.set-prototype-of.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 19.1.3.19 Object.setPrototypeOf(O, proto)                                                                           // 1
var $export = require('./_export');                                                                                    // 2
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });                                         // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.object.to-string.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.object.to-string.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// 19.1.3.6 Object.prototype.toString()                                                                                // 2
var classof = require('./_classof');                                                                                   // 3
var test = {};                                                                                                         // 4
test[require('./_wks')('toStringTag')] = 'z';                                                                          // 5
if (test + '' != '[object z]') {                                                                                       // 6
  require('./_redefine')(Object.prototype, 'toString', function toString() {                                           // 7
    return '[object ' + classof(this) + ']';                                                                           // 8
  }, true);                                                                                                            // 9
}                                                                                                                      // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.regexp.constructor.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.regexp.constructor.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global = require('./_global');                                                                                     // 1
var inheritIfRequired = require('./_inherit-if-required');                                                             // 2
var dP = require('./_object-dp').f;                                                                                    // 3
var gOPN = require('./_object-gopn').f;                                                                                // 4
var isRegExp = require('./_is-regexp');                                                                                // 5
var $flags = require('./_flags');                                                                                      // 6
var $RegExp = global.RegExp;                                                                                           // 7
var Base = $RegExp;                                                                                                    // 8
var proto = $RegExp.prototype;                                                                                         // 9
var re1 = /a/g;                                                                                                        // 10
var re2 = /a/g;                                                                                                        // 11
// "new" creates a new object, old webkit buggy here                                                                   // 12
var CORRECT_NEW = new $RegExp(re1) !== re1;                                                                            // 13
                                                                                                                       // 14
if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {                                    // 15
  re2[require('./_wks')('match')] = false;                                                                             // 16
  // RegExp constructor can alter flags and IsRegExp works correct with @@match                                        // 17
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';                                    // 18
}))) {                                                                                                                 // 19
  $RegExp = function RegExp(p, f) {                                                                                    // 20
    var tiRE = this instanceof $RegExp;                                                                                // 21
    var piRE = isRegExp(p);                                                                                            // 22
    var fiU = f === undefined;                                                                                         // 23
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p                                                       // 24
      : inheritIfRequired(CORRECT_NEW                                                                                  // 25
        ? new Base(piRE && !fiU ? p.source : p, f)                                                                     // 26
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)                         // 27
      , tiRE ? this : proto, $RegExp);                                                                                 // 28
  };                                                                                                                   // 29
  var proxy = function (key) {                                                                                         // 30
    key in $RegExp || dP($RegExp, key, {                                                                               // 31
      configurable: true,                                                                                              // 32
      get: function () { return Base[key]; },                                                                          // 33
      set: function (it) { Base[key] = it; }                                                                           // 34
    });                                                                                                                // 35
  };                                                                                                                   // 36
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);                                               // 37
  proto.constructor = $RegExp;                                                                                         // 38
  $RegExp.prototype = proto;                                                                                           // 39
  require('./_redefine')(global, 'RegExp', $RegExp);                                                                   // 40
}                                                                                                                      // 41
                                                                                                                       // 42
require('./_set-species')('RegExp');                                                                                   // 43
                                                                                                                       // 44
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_is-regexp.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_is-regexp.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.2.8 IsRegExp(argument)                                                                                            // 1
var isObject = require('./_is-object');                                                                                // 2
var cof = require('./_cof');                                                                                           // 3
var MATCH = require('./_wks')('match');                                                                                // 4
module.exports = function (it) {                                                                                       // 5
  var isRegExp;                                                                                                        // 6
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');                    // 7
};                                                                                                                     // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_flags.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_flags.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// 21.2.5.3 get RegExp.prototype.flags                                                                                 // 2
var anObject = require('./_an-object');                                                                                // 3
module.exports = function () {                                                                                         // 4
  var that = anObject(this);                                                                                           // 5
  var result = '';                                                                                                     // 6
  if (that.global) result += 'g';                                                                                      // 7
  if (that.ignoreCase) result += 'i';                                                                                  // 8
  if (that.multiline) result += 'm';                                                                                   // 9
  if (that.unicode) result += 'u';                                                                                     // 10
  if (that.sticky) result += 'y';                                                                                      // 11
  return result;                                                                                                       // 12
};                                                                                                                     // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.regexp.to-string.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.regexp.to-string.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
require('./es6.regexp.flags');                                                                                         // 2
var anObject = require('./_an-object');                                                                                // 3
var $flags = require('./_flags');                                                                                      // 4
var DESCRIPTORS = require('./_descriptors');                                                                           // 5
var TO_STRING = 'toString';                                                                                            // 6
var $toString = /./[TO_STRING];                                                                                        // 7
                                                                                                                       // 8
var define = function (fn) {                                                                                           // 9
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);                                                       // 10
};                                                                                                                     // 11
                                                                                                                       // 12
// 21.2.5.14 RegExp.prototype.toString()                                                                               // 13
if (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {              // 14
  define(function toString() {                                                                                         // 15
    var R = anObject(this);                                                                                            // 16
    return '/'.concat(R.source, '/',                                                                                   // 17
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);                      // 18
  });                                                                                                                  // 19
// FF44- RegExp#toString has a wrong name                                                                              // 20
} else if ($toString.name != TO_STRING) {                                                                              // 21
  define(function toString() {                                                                                         // 22
    return $toString.call(this);                                                                                       // 23
  });                                                                                                                  // 24
}                                                                                                                      // 25
                                                                                                                       // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.regexp.flags.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.regexp.flags.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 21.2.5.3 get RegExp.prototype.flags()                                                                               // 1
if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {             // 2
  configurable: true,                                                                                                  // 3
  get: require('./_flags')                                                                                             // 4
});                                                                                                                    // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.regexp.match.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.regexp.match.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// @@match logic                                                                                                       // 1
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {                                               // 2
  // 21.1.3.11 String.prototype.match(regexp)                                                                          // 3
  return [function match(regexp) {                                                                                     // 4
    'use strict';                                                                                                      // 5
    var O = defined(this);                                                                                             // 6
    var fn = regexp == undefined ? undefined : regexp[MATCH];                                                          // 7
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));                               // 8
  }, $match];                                                                                                          // 9
});                                                                                                                    // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_fix-re-wks.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_fix-re-wks.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var hide = require('./_hide');                                                                                         // 2
var redefine = require('./_redefine');                                                                                 // 3
var fails = require('./_fails');                                                                                       // 4
var defined = require('./_defined');                                                                                   // 5
var wks = require('./_wks');                                                                                           // 6
                                                                                                                       // 7
module.exports = function (KEY, length, exec) {                                                                        // 8
  var SYMBOL = wks(KEY);                                                                                               // 9
  var fns = exec(defined, SYMBOL, ''[KEY]);                                                                            // 10
  var strfn = fns[0];                                                                                                  // 11
  var rxfn = fns[1];                                                                                                   // 12
  if (fails(function () {                                                                                              // 13
    var O = {};                                                                                                        // 14
    O[SYMBOL] = function () { return 7; };                                                                             // 15
    return ''[KEY](O) != 7;                                                                                            // 16
  })) {                                                                                                                // 17
    redefine(String.prototype, KEY, strfn);                                                                            // 18
    hide(RegExp.prototype, SYMBOL, length == 2                                                                         // 19
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)                                                    // 20
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)                                                            // 21
      ? function (string, arg) { return rxfn.call(string, this, arg); }                                                // 22
      // 21.2.5.6 RegExp.prototype[@@match](string)                                                                    // 23
      // 21.2.5.9 RegExp.prototype[@@search](string)                                                                   // 24
      : function (string) { return rxfn.call(string, this); }                                                          // 25
    );                                                                                                                 // 26
  }                                                                                                                    // 27
};                                                                                                                     // 28
                                                                                                                       // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.regexp.replace.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.regexp.replace.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// @@replace logic                                                                                                     // 1
require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {                                         // 2
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)                                                     // 3
  return [function replace(searchValue, replaceValue) {                                                                // 4
    'use strict';                                                                                                      // 5
    var O = defined(this);                                                                                             // 6
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];                                              // 7
    return fn !== undefined                                                                                            // 8
      ? fn.call(searchValue, O, replaceValue)                                                                          // 9
      : $replace.call(String(O), searchValue, replaceValue);                                                           // 10
  }, $replace];                                                                                                        // 11
});                                                                                                                    // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.regexp.search.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.regexp.search.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// @@search logic                                                                                                      // 1
require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search) {                                            // 2
  // 21.1.3.15 String.prototype.search(regexp)                                                                         // 3
  return [function search(regexp) {                                                                                    // 4
    'use strict';                                                                                                      // 5
    var O = defined(this);                                                                                             // 6
    var fn = regexp == undefined ? undefined : regexp[SEARCH];                                                         // 7
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));                              // 8
  }, $search];                                                                                                         // 9
});                                                                                                                    // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.regexp.split.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.regexp.split.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// @@split logic                                                                                                       // 1
require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {                                               // 2
  'use strict';                                                                                                        // 3
  var isRegExp = require('./_is-regexp');                                                                              // 4
  var _split = $split;                                                                                                 // 5
  var $push = [].push;                                                                                                 // 6
  var $SPLIT = 'split';                                                                                                // 7
  var LENGTH = 'length';                                                                                               // 8
  var LAST_INDEX = 'lastIndex';                                                                                        // 9
  if (                                                                                                                 // 10
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||                                                                                // 11
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||                                                                         // 12
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||                                                                            // 13
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||                                                                            // 14
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||                                                                                 // 15
    ''[$SPLIT](/.?/)[LENGTH]                                                                                           // 16
  ) {                                                                                                                  // 17
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group                                   // 18
    // based on es5-shim implementation, need to rework it                                                             // 19
    $split = function (separator, limit) {                                                                             // 20
      var string = String(this);                                                                                       // 21
      if (separator === undefined && limit === 0) return [];                                                           // 22
      // If `separator` is not a regex, use native split                                                               // 23
      if (!isRegExp(separator)) return _split.call(string, separator, limit);                                          // 24
      var output = [];                                                                                                 // 25
      var flags = (separator.ignoreCase ? 'i' : '') +                                                                  // 26
                  (separator.multiline ? 'm' : '') +                                                                   // 27
                  (separator.unicode ? 'u' : '') +                                                                     // 28
                  (separator.sticky ? 'y' : '');                                                                       // 29
      var lastLastIndex = 0;                                                                                           // 30
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;                                                 // 31
      // Make `global` and avoid `lastIndex` issues by working with a copy                                             // 32
      var separatorCopy = new RegExp(separator.source, flags + 'g');                                                   // 33
      var separator2, match, lastIndex, lastLength, i;                                                                 // 34
      // Doesn't need flags gy, but they don't hurt                                                                    // 35
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);                              // 36
      while (match = separatorCopy.exec(string)) {                                                                     // 37
        // `separatorCopy.lastIndex` is not reliable cross-browser                                                     // 38
        lastIndex = match.index + match[0][LENGTH];                                                                    // 39
        if (lastIndex > lastLastIndex) {                                                                               // 40
          output.push(string.slice(lastLastIndex, match.index));                                                       // 41
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG                          // 42
          // eslint-disable-next-line no-loop-func                                                                     // 43
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {                                   // 44
            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;          // 45
          });                                                                                                          // 46
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));                  // 47
          lastLength = match[0][LENGTH];                                                                               // 48
          lastLastIndex = lastIndex;                                                                                   // 49
          if (output[LENGTH] >= splitLimit) break;                                                                     // 50
        }                                                                                                              // 51
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop          // 52
      }                                                                                                                // 53
      if (lastLastIndex === string[LENGTH]) {                                                                          // 54
        if (lastLength || !separatorCopy.test('')) output.push('');                                                    // 55
      } else output.push(string.slice(lastLastIndex));                                                                 // 56
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;                                       // 57
    };                                                                                                                 // 58
  // Chakra, V8                                                                                                        // 59
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {                                                                      // 60
    $split = function (separator, limit) {                                                                             // 61
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);                        // 62
    };                                                                                                                 // 63
  }                                                                                                                    // 64
  // 21.1.3.17 String.prototype.split(separator, limit)                                                                // 65
  return [function split(separator, limit) {                                                                           // 66
    var O = defined(this);                                                                                             // 67
    var fn = separator == undefined ? undefined : separator[SPLIT];                                                    // 68
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);                 // 69
  }, $split];                                                                                                          // 70
});                                                                                                                    // 71
                                                                                                                       // 72
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.from-code-point.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.from-code-point.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export');                                                                                    // 1
var toAbsoluteIndex = require('./_to-absolute-index');                                                                 // 2
var fromCharCode = String.fromCharCode;                                                                                // 3
var $fromCodePoint = String.fromCodePoint;                                                                             // 4
                                                                                                                       // 5
// length should be 1, old FF problem                                                                                  // 6
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {                          // 7
  // 21.1.2.2 String.fromCodePoint(...codePoints)                                                                      // 8
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars                                     // 9
    var res = [];                                                                                                      // 10
    var aLen = arguments.length;                                                                                       // 11
    var i = 0;                                                                                                         // 12
    var code;                                                                                                          // 13
    while (aLen > i) {                                                                                                 // 14
      code = +arguments[i++];                                                                                          // 15
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');             // 16
      res.push(code < 0x10000                                                                                          // 17
        ? fromCharCode(code)                                                                                           // 18
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)                                      // 19
      );                                                                                                               // 20
    } return res.join('');                                                                                             // 21
  }                                                                                                                    // 22
});                                                                                                                    // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.raw.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.raw.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export');                                                                                    // 1
var toIObject = require('./_to-iobject');                                                                              // 2
var toLength = require('./_to-length');                                                                                // 3
                                                                                                                       // 4
$export($export.S, 'String', {                                                                                         // 5
  // 21.1.2.4 String.raw(callSite, ...substitutions)                                                                   // 6
  raw: function raw(callSite) {                                                                                        // 7
    var tpl = toIObject(callSite.raw);                                                                                 // 8
    var len = toLength(tpl.length);                                                                                    // 9
    var aLen = arguments.length;                                                                                       // 10
    var res = [];                                                                                                      // 11
    var i = 0;                                                                                                         // 12
    while (len > i) {                                                                                                  // 13
      res.push(String(tpl[i++]));                                                                                      // 14
      if (i < aLen) res.push(String(arguments[i]));                                                                    // 15
    } return res.join('');                                                                                             // 16
  }                                                                                                                    // 17
});                                                                                                                    // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.trim.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.trim.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// 21.1.3.25 String.prototype.trim()                                                                                   // 2
require('./_string-trim')('trim', function ($trim) {                                                                   // 3
  return function trim() {                                                                                             // 4
    return $trim(this, 3);                                                                                             // 5
  };                                                                                                                   // 6
});                                                                                                                    // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_string-trim.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_string-trim.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export');                                                                                    // 1
var defined = require('./_defined');                                                                                   // 2
var fails = require('./_fails');                                                                                       // 3
var spaces = require('./_string-ws');                                                                                  // 4
var space = '[' + spaces + ']';                                                                                        // 5
var non = '\u200b\u0085';                                                                                              // 6
var ltrim = RegExp('^' + space + space + '*');                                                                         // 7
var rtrim = RegExp(space + space + '*$');                                                                              // 8
                                                                                                                       // 9
var exporter = function (KEY, exec, ALIAS) {                                                                           // 10
  var exp = {};                                                                                                        // 11
  var FORCE = fails(function () {                                                                                      // 12
    return !!spaces[KEY]() || non[KEY]() != non;                                                                       // 13
  });                                                                                                                  // 14
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];                                                                // 15
  if (ALIAS) exp[ALIAS] = fn;                                                                                          // 16
  $export($export.P + $export.F * FORCE, 'String', exp);                                                               // 17
};                                                                                                                     // 18
                                                                                                                       // 19
// 1 -> String#trimLeft                                                                                                // 20
// 2 -> String#trimRight                                                                                               // 21
// 3 -> String#trim                                                                                                    // 22
var trim = exporter.trim = function (string, TYPE) {                                                                   // 23
  string = String(defined(string));                                                                                    // 24
  if (TYPE & 1) string = string.replace(ltrim, '');                                                                    // 25
  if (TYPE & 2) string = string.replace(rtrim, '');                                                                    // 26
  return string;                                                                                                       // 27
};                                                                                                                     // 28
                                                                                                                       // 29
module.exports = exporter;                                                                                             // 30
                                                                                                                       // 31
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_string-ws.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_string-ws.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +                                  // 1
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';                                    // 2
                                                                                                                       // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.code-point-at.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.code-point-at.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var $at = require('./_string-at')(false);                                                                              // 3
$export($export.P, 'String', {                                                                                         // 4
  // 21.1.3.3 String.prototype.codePointAt(pos)                                                                        // 5
  codePointAt: function codePointAt(pos) {                                                                             // 6
    return $at(this, pos);                                                                                             // 7
  }                                                                                                                    // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.ends-with.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.ends-with.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])                                                    // 1
'use strict';                                                                                                          // 2
var $export = require('./_export');                                                                                    // 3
var toLength = require('./_to-length');                                                                                // 4
var context = require('./_string-context');                                                                            // 5
var ENDS_WITH = 'endsWith';                                                                                            // 6
var $endsWith = ''[ENDS_WITH];                                                                                         // 7
                                                                                                                       // 8
$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {                                  // 9
  endsWith: function endsWith(searchString /* , endPosition = @length */) {                                            // 10
    var that = context(this, searchString, ENDS_WITH);                                                                 // 11
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;                                                 // 12
    var len = toLength(that.length);                                                                                   // 13
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);                                  // 14
    var search = String(searchString);                                                                                 // 15
    return $endsWith                                                                                                   // 16
      ? $endsWith.call(that, search, end)                                                                              // 17
      : that.slice(end - search.length, end) === search;                                                               // 18
  }                                                                                                                    // 19
});                                                                                                                    // 20
                                                                                                                       // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_string-context.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_string-context.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// helper for String#{startsWith, endsWith, includes}                                                                  // 1
var isRegExp = require('./_is-regexp');                                                                                // 2
var defined = require('./_defined');                                                                                   // 3
                                                                                                                       // 4
module.exports = function (that, searchString, NAME) {                                                                 // 5
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");                            // 6
  return String(defined(that));                                                                                        // 7
};                                                                                                                     // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_fails-is-regexp.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_fails-is-regexp.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var MATCH = require('./_wks')('match');                                                                                // 1
module.exports = function (KEY) {                                                                                      // 2
  var re = /./;                                                                                                        // 3
  try {                                                                                                                // 4
    '/./'[KEY](re);                                                                                                    // 5
  } catch (e) {                                                                                                        // 6
    try {                                                                                                              // 7
      re[MATCH] = false;                                                                                               // 8
      return !'/./'[KEY](re);                                                                                          // 9
    } catch (f) { /* empty */ }                                                                                        // 10
  } return true;                                                                                                       // 11
};                                                                                                                     // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.includes.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.includes.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 21.1.3.7 String.prototype.includes(searchString, position = 0)                                                      // 1
'use strict';                                                                                                          // 2
var $export = require('./_export');                                                                                    // 3
var context = require('./_string-context');                                                                            // 4
var INCLUDES = 'includes';                                                                                             // 5
                                                                                                                       // 6
$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {                                   // 7
  includes: function includes(searchString /* , position = 0 */) {                                                     // 8
    return !!~context(this, searchString, INCLUDES)                                                                    // 9
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);                                         // 10
  }                                                                                                                    // 11
});                                                                                                                    // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.repeat.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.repeat.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export');                                                                                    // 1
                                                                                                                       // 2
$export($export.P, 'String', {                                                                                         // 3
  // 21.1.3.13 String.prototype.repeat(count)                                                                          // 4
  repeat: require('./_string-repeat')                                                                                  // 5
});                                                                                                                    // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_string-repeat.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_string-repeat.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var toInteger = require('./_to-integer');                                                                              // 2
var defined = require('./_defined');                                                                                   // 3
                                                                                                                       // 4
module.exports = function repeat(count) {                                                                              // 5
  var str = String(defined(this));                                                                                     // 6
  var res = '';                                                                                                        // 7
  var n = toInteger(count);                                                                                            // 8
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");                                             // 9
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;                                                      // 10
  return res;                                                                                                          // 11
};                                                                                                                     // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.starts-with.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.starts-with.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])                                                   // 1
'use strict';                                                                                                          // 2
var $export = require('./_export');                                                                                    // 3
var toLength = require('./_to-length');                                                                                // 4
var context = require('./_string-context');                                                                            // 5
var STARTS_WITH = 'startsWith';                                                                                        // 6
var $startsWith = ''[STARTS_WITH];                                                                                     // 7
                                                                                                                       // 8
$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {                                // 9
  startsWith: function startsWith(searchString /* , position = 0 */) {                                                 // 10
    var that = context(this, searchString, STARTS_WITH);                                                               // 11
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));                      // 12
    var search = String(searchString);                                                                                 // 13
    return $startsWith                                                                                                 // 14
      ? $startsWith.call(that, search, index)                                                                          // 15
      : that.slice(index, index + search.length) === search;                                                           // 16
  }                                                                                                                    // 17
});                                                                                                                    // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.anchor.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.anchor.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.2 String.prototype.anchor(name)                                                                               // 2
require('./_string-html')('anchor', function (createHTML) {                                                            // 3
  return function anchor(name) {                                                                                       // 4
    return createHTML(this, 'a', 'name', name);                                                                        // 5
  };                                                                                                                   // 6
});                                                                                                                    // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_string-html.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_string-html.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export');                                                                                    // 1
var fails = require('./_fails');                                                                                       // 2
var defined = require('./_defined');                                                                                   // 3
var quot = /"/g;                                                                                                       // 4
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)                                                                 // 5
var createHTML = function (string, tag, attribute, value) {                                                            // 6
  var S = String(defined(string));                                                                                     // 7
  var p1 = '<' + tag;                                                                                                  // 8
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';                    // 9
  return p1 + '>' + S + '</' + tag + '>';                                                                              // 10
};                                                                                                                     // 11
module.exports = function (NAME, exec) {                                                                               // 12
  var O = {};                                                                                                          // 13
  O[NAME] = exec(createHTML);                                                                                          // 14
  $export($export.P + $export.F * fails(function () {                                                                  // 15
    var test = ''[NAME]('"');                                                                                          // 16
    return test !== test.toLowerCase() || test.split('"').length > 3;                                                  // 17
  }), 'String', O);                                                                                                    // 18
};                                                                                                                     // 19
                                                                                                                       // 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.big.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.big.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.3 String.prototype.big()                                                                                      // 2
require('./_string-html')('big', function (createHTML) {                                                               // 3
  return function big() {                                                                                              // 4
    return createHTML(this, 'big', '', '');                                                                            // 5
  };                                                                                                                   // 6
});                                                                                                                    // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.blink.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.blink.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.4 String.prototype.blink()                                                                                    // 2
require('./_string-html')('blink', function (createHTML) {                                                             // 3
  return function blink() {                                                                                            // 4
    return createHTML(this, 'blink', '', '');                                                                          // 5
  };                                                                                                                   // 6
});                                                                                                                    // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.bold.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.bold.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.5 String.prototype.bold()                                                                                     // 2
require('./_string-html')('bold', function (createHTML) {                                                              // 3
  return function bold() {                                                                                             // 4
    return createHTML(this, 'b', '', '');                                                                              // 5
  };                                                                                                                   // 6
});                                                                                                                    // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.fixed.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.fixed.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.6 String.prototype.fixed()                                                                                    // 2
require('./_string-html')('fixed', function (createHTML) {                                                             // 3
  return function fixed() {                                                                                            // 4
    return createHTML(this, 'tt', '', '');                                                                             // 5
  };                                                                                                                   // 6
});                                                                                                                    // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.fontcolor.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.fontcolor.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.7 String.prototype.fontcolor(color)                                                                           // 2
require('./_string-html')('fontcolor', function (createHTML) {                                                         // 3
  return function fontcolor(color) {                                                                                   // 4
    return createHTML(this, 'font', 'color', color);                                                                   // 5
  };                                                                                                                   // 6
});                                                                                                                    // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.fontsize.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.fontsize.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.8 String.prototype.fontsize(size)                                                                             // 2
require('./_string-html')('fontsize', function (createHTML) {                                                          // 3
  return function fontsize(size) {                                                                                     // 4
    return createHTML(this, 'font', 'size', size);                                                                     // 5
  };                                                                                                                   // 6
});                                                                                                                    // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.italics.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.italics.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.9 String.prototype.italics()                                                                                  // 2
require('./_string-html')('italics', function (createHTML) {                                                           // 3
  return function italics() {                                                                                          // 4
    return createHTML(this, 'i', '', '');                                                                              // 5
  };                                                                                                                   // 6
});                                                                                                                    // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.link.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.link.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.10 String.prototype.link(url)                                                                                 // 2
require('./_string-html')('link', function (createHTML) {                                                              // 3
  return function link(url) {                                                                                          // 4
    return createHTML(this, 'a', 'href', url);                                                                         // 5
  };                                                                                                                   // 6
});                                                                                                                    // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.small.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.small.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.11 String.prototype.small()                                                                                   // 2
require('./_string-html')('small', function (createHTML) {                                                             // 3
  return function small() {                                                                                            // 4
    return createHTML(this, 'small', '', '');                                                                          // 5
  };                                                                                                                   // 6
});                                                                                                                    // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.strike.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.strike.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.12 String.prototype.strike()                                                                                  // 2
require('./_string-html')('strike', function (createHTML) {                                                            // 3
  return function strike() {                                                                                           // 4
    return createHTML(this, 'strike', '', '');                                                                         // 5
  };                                                                                                                   // 6
});                                                                                                                    // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.sub.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.sub.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.13 String.prototype.sub()                                                                                     // 2
require('./_string-html')('sub', function (createHTML) {                                                               // 3
  return function sub() {                                                                                              // 4
    return createHTML(this, 'sub', '', '');                                                                            // 5
  };                                                                                                                   // 6
});                                                                                                                    // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.string.sup.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.string.sup.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// B.2.3.14 String.prototype.sup()                                                                                     // 2
require('./_string-html')('sup', function (createHTML) {                                                               // 3
  return function sup() {                                                                                              // 4
    return createHTML(this, 'sup', '', '');                                                                            // 5
  };                                                                                                                   // 6
});                                                                                                                    // 7
                                                                                                                       // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.weak-map.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.weak-map.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var each = require('./_array-methods')(0);                                                                             // 2
var redefine = require('./_redefine');                                                                                 // 3
var meta = require('./_meta');                                                                                         // 4
var assign = require('./_object-assign');                                                                              // 5
var weak = require('./_collection-weak');                                                                              // 6
var isObject = require('./_is-object');                                                                                // 7
var fails = require('./_fails');                                                                                       // 8
var validate = require('./_validate-collection');                                                                      // 9
var WEAK_MAP = 'WeakMap';                                                                                              // 10
var getWeak = meta.getWeak;                                                                                            // 11
var isExtensible = Object.isExtensible;                                                                                // 12
var uncaughtFrozenStore = weak.ufstore;                                                                                // 13
var tmp = {};                                                                                                          // 14
var InternalMap;                                                                                                       // 15
                                                                                                                       // 16
var wrapper = function (get) {                                                                                         // 17
  return function WeakMap() {                                                                                          // 18
    return get(this, arguments.length > 0 ? arguments[0] : undefined);                                                 // 19
  };                                                                                                                   // 20
};                                                                                                                     // 21
                                                                                                                       // 22
var methods = {                                                                                                        // 23
  // 23.3.3.3 WeakMap.prototype.get(key)                                                                               // 24
  get: function get(key) {                                                                                             // 25
    if (isObject(key)) {                                                                                               // 26
      var data = getWeak(key);                                                                                         // 27
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);                                // 28
      return data ? data[this._i] : undefined;                                                                         // 29
    }                                                                                                                  // 30
  },                                                                                                                   // 31
  // 23.3.3.5 WeakMap.prototype.set(key, value)                                                                        // 32
  set: function set(key, value) {                                                                                      // 33
    return weak.def(validate(this, WEAK_MAP), key, value);                                                             // 34
  }                                                                                                                    // 35
};                                                                                                                     // 36
                                                                                                                       // 37
// 23.3 WeakMap Objects                                                                                                // 38
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);                // 39
                                                                                                                       // 40
// IE11 WeakMap frozen keys fix                                                                                        // 41
if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {              // 42
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);                                                                // 43
  assign(InternalMap.prototype, methods);                                                                              // 44
  meta.NEED = true;                                                                                                    // 45
  each(['delete', 'has', 'get', 'set'], function (key) {                                                               // 46
    var proto = $WeakMap.prototype;                                                                                    // 47
    var method = proto[key];                                                                                           // 48
    redefine(proto, key, function (a, b) {                                                                             // 49
      // store frozen objects on internal weakmap shim                                                                 // 50
      if (isObject(a) && !isExtensible(a)) {                                                                           // 51
        if (!this._f) this._f = new InternalMap();                                                                     // 52
        var result = this._f[key](a, b);                                                                               // 53
        return key == 'set' ? this : result;                                                                           // 54
      // store all the rest on native weakmap                                                                          // 55
      } return method.call(this, a, b);                                                                                // 56
    });                                                                                                                // 57
  });                                                                                                                  // 58
}                                                                                                                      // 59
                                                                                                                       // 60
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_collection-weak.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_collection-weak.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var redefineAll = require('./_redefine-all');                                                                          // 2
var getWeak = require('./_meta').getWeak;                                                                              // 3
var anObject = require('./_an-object');                                                                                // 4
var isObject = require('./_is-object');                                                                                // 5
var anInstance = require('./_an-instance');                                                                            // 6
var forOf = require('./_for-of');                                                                                      // 7
var createArrayMethod = require('./_array-methods');                                                                   // 8
var $has = require('./_has');                                                                                          // 9
var validate = require('./_validate-collection');                                                                      // 10
var arrayFind = createArrayMethod(5);                                                                                  // 11
var arrayFindIndex = createArrayMethod(6);                                                                             // 12
var id = 0;                                                                                                            // 13
                                                                                                                       // 14
// fallback for uncaught frozen keys                                                                                   // 15
var uncaughtFrozenStore = function (that) {                                                                            // 16
  return that._l || (that._l = new UncaughtFrozenStore());                                                             // 17
};                                                                                                                     // 18
var UncaughtFrozenStore = function () {                                                                                // 19
  this.a = [];                                                                                                         // 20
};                                                                                                                     // 21
var findUncaughtFrozen = function (store, key) {                                                                       // 22
  return arrayFind(store.a, function (it) {                                                                            // 23
    return it[0] === key;                                                                                              // 24
  });                                                                                                                  // 25
};                                                                                                                     // 26
UncaughtFrozenStore.prototype = {                                                                                      // 27
  get: function (key) {                                                                                                // 28
    var entry = findUncaughtFrozen(this, key);                                                                         // 29
    if (entry) return entry[1];                                                                                        // 30
  },                                                                                                                   // 31
  has: function (key) {                                                                                                // 32
    return !!findUncaughtFrozen(this, key);                                                                            // 33
  },                                                                                                                   // 34
  set: function (key, value) {                                                                                         // 35
    var entry = findUncaughtFrozen(this, key);                                                                         // 36
    if (entry) entry[1] = value;                                                                                       // 37
    else this.a.push([key, value]);                                                                                    // 38
  },                                                                                                                   // 39
  'delete': function (key) {                                                                                           // 40
    var index = arrayFindIndex(this.a, function (it) {                                                                 // 41
      return it[0] === key;                                                                                            // 42
    });                                                                                                                // 43
    if (~index) this.a.splice(index, 1);                                                                               // 44
    return !!~index;                                                                                                   // 45
  }                                                                                                                    // 46
};                                                                                                                     // 47
                                                                                                                       // 48
module.exports = {                                                                                                     // 49
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {                                                            // 50
    var C = wrapper(function (that, iterable) {                                                                        // 51
      anInstance(that, C, NAME, '_i');                                                                                 // 52
      that._t = NAME;      // collection type                                                                          // 53
      that._i = id++;      // collection id                                                                            // 54
      that._l = undefined; // leak store for uncaught frozen objects                                                   // 55
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);                                           // 56
    });                                                                                                                // 57
    redefineAll(C.prototype, {                                                                                         // 58
      // 23.3.3.2 WeakMap.prototype.delete(key)                                                                        // 59
      // 23.4.3.3 WeakSet.prototype.delete(value)                                                                      // 60
      'delete': function (key) {                                                                                       // 61
        if (!isObject(key)) return false;                                                                              // 62
        var data = getWeak(key);                                                                                       // 63
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);                            // 64
        return data && $has(data, this._i) && delete data[this._i];                                                    // 65
      },                                                                                                               // 66
      // 23.3.3.4 WeakMap.prototype.has(key)                                                                           // 67
      // 23.4.3.4 WeakSet.prototype.has(value)                                                                         // 68
      has: function has(key) {                                                                                         // 69
        if (!isObject(key)) return false;                                                                              // 70
        var data = getWeak(key);                                                                                       // 71
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);                                  // 72
        return data && $has(data, this._i);                                                                            // 73
      }                                                                                                                // 74
    });                                                                                                                // 75
    return C;                                                                                                          // 76
  },                                                                                                                   // 77
  def: function (that, key, value) {                                                                                   // 78
    var data = getWeak(anObject(key), true);                                                                           // 79
    if (data === true) uncaughtFrozenStore(that).set(key, value);                                                      // 80
    else data[that._i] = value;                                                                                        // 81
    return that;                                                                                                       // 82
  },                                                                                                                   // 83
  ufstore: uncaughtFrozenStore                                                                                         // 84
};                                                                                                                     // 85
                                                                                                                       // 86
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"web.dom.iterable.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/web.dom.iterable.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $iterators = require('./es6.array.iterator');                                                                      // 1
var getKeys = require('./_object-keys');                                                                               // 2
var redefine = require('./_redefine');                                                                                 // 3
var global = require('./_global');                                                                                     // 4
var hide = require('./_hide');                                                                                         // 5
var Iterators = require('./_iterators');                                                                               // 6
var wks = require('./_wks');                                                                                           // 7
var ITERATOR = wks('iterator');                                                                                        // 8
var TO_STRING_TAG = wks('toStringTag');                                                                                // 9
var ArrayValues = Iterators.Array;                                                                                     // 10
                                                                                                                       // 11
var DOMIterables = {                                                                                                   // 12
  CSSRuleList: true, // TODO: Not spec compliant, should be false.                                                     // 13
  CSSStyleDeclaration: false,                                                                                          // 14
  CSSValueList: false,                                                                                                 // 15
  ClientRectList: false,                                                                                               // 16
  DOMRectList: false,                                                                                                  // 17
  DOMStringList: false,                                                                                                // 18
  DOMTokenList: true,                                                                                                  // 19
  DataTransferItemList: false,                                                                                         // 20
  FileList: false,                                                                                                     // 21
  HTMLAllCollection: false,                                                                                            // 22
  HTMLCollection: false,                                                                                               // 23
  HTMLFormElement: false,                                                                                              // 24
  HTMLSelectElement: false,                                                                                            // 25
  MediaList: true, // TODO: Not spec compliant, should be false.                                                       // 26
  MimeTypeArray: false,                                                                                                // 27
  NamedNodeMap: false,                                                                                                 // 28
  NodeList: true,                                                                                                      // 29
  PaintRequestList: false,                                                                                             // 30
  Plugin: false,                                                                                                       // 31
  PluginArray: false,                                                                                                  // 32
  SVGLengthList: false,                                                                                                // 33
  SVGNumberList: false,                                                                                                // 34
  SVGPathSegList: false,                                                                                               // 35
  SVGPointList: false,                                                                                                 // 36
  SVGStringList: false,                                                                                                // 37
  SVGTransformList: false,                                                                                             // 38
  SourceBufferList: false,                                                                                             // 39
  StyleSheetList: true, // TODO: Not spec compliant, should be false.                                                  // 40
  TextTrackCueList: false,                                                                                             // 41
  TextTrackList: false,                                                                                                // 42
  TouchList: false                                                                                                     // 43
};                                                                                                                     // 44
                                                                                                                       // 45
for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {                                    // 46
  var NAME = collections[i];                                                                                           // 47
  var explicit = DOMIterables[NAME];                                                                                   // 48
  var Collection = global[NAME];                                                                                       // 49
  var proto = Collection && Collection.prototype;                                                                      // 50
  var key;                                                                                                             // 51
  if (proto) {                                                                                                         // 52
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);                                                          // 53
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);                                                       // 54
    Iterators[NAME] = ArrayValues;                                                                                     // 55
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);                // 56
  }                                                                                                                    // 57
}                                                                                                                      // 58
                                                                                                                       // 59
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.weak-set.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.weak-set.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var weak = require('./_collection-weak');                                                                              // 2
var validate = require('./_validate-collection');                                                                      // 3
var WEAK_SET = 'WeakSet';                                                                                              // 4
                                                                                                                       // 5
// 23.4 WeakSet Objects                                                                                                // 6
require('./_collection')(WEAK_SET, function (get) {                                                                    // 7
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };                    // 8
}, {                                                                                                                   // 9
  // 23.4.3.1 WeakSet.prototype.add(value)                                                                             // 10
  add: function add(value) {                                                                                           // 11
    return weak.def(validate(this, WEAK_SET), value, true);                                                            // 12
  }                                                                                                                    // 13
}, weak, false, true);                                                                                                 // 14
                                                                                                                       // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es7.array.includes.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es7.array.includes.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// https://github.com/tc39/Array.prototype.includes                                                                    // 2
var $export = require('./_export');                                                                                    // 3
var $includes = require('./_array-includes')(true);                                                                    // 4
                                                                                                                       // 5
$export($export.P, 'Array', {                                                                                          // 6
  includes: function includes(el /* , fromIndex = 0 */) {                                                              // 7
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);                                       // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
                                                                                                                       // 11
require('./_add-to-unscopables')('includes');                                                                          // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es7.array.flat-map.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es7.array.flat-map.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap                                                // 2
var $export = require('./_export');                                                                                    // 3
var flattenIntoArray = require('./_flatten-into-array');                                                               // 4
var toObject = require('./_to-object');                                                                                // 5
var toLength = require('./_to-length');                                                                                // 6
var aFunction = require('./_a-function');                                                                              // 7
var arraySpeciesCreate = require('./_array-species-create');                                                           // 8
                                                                                                                       // 9
$export($export.P, 'Array', {                                                                                          // 10
  flatMap: function flatMap(callbackfn /* , thisArg */) {                                                              // 11
    var O = toObject(this);                                                                                            // 12
    var sourceLen, A;                                                                                                  // 13
    aFunction(callbackfn);                                                                                             // 14
    sourceLen = toLength(O.length);                                                                                    // 15
    A = arraySpeciesCreate(O, 0);                                                                                      // 16
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);                                              // 17
    return A;                                                                                                          // 18
  }                                                                                                                    // 19
});                                                                                                                    // 20
                                                                                                                       // 21
require('./_add-to-unscopables')('flatMap');                                                                           // 22
                                                                                                                       // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_flatten-into-array.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_flatten-into-array.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray                                                       // 2
var isArray = require('./_is-array');                                                                                  // 3
var isObject = require('./_is-object');                                                                                // 4
var toLength = require('./_to-length');                                                                                // 5
var ctx = require('./_ctx');                                                                                           // 6
var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');                                                    // 7
                                                                                                                       // 8
function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {                        // 9
  var targetIndex = start;                                                                                             // 10
  var sourceIndex = 0;                                                                                                 // 11
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;                                                                // 12
  var element, spreadable;                                                                                             // 13
                                                                                                                       // 14
  while (sourceIndex < sourceLen) {                                                                                    // 15
    if (sourceIndex in source) {                                                                                       // 16
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];                       // 17
                                                                                                                       // 18
      spreadable = false;                                                                                              // 19
      if (isObject(element)) {                                                                                         // 20
        spreadable = element[IS_CONCAT_SPREADABLE];                                                                    // 21
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);                                       // 22
      }                                                                                                                // 23
                                                                                                                       // 24
      if (spreadable && depth > 0) {                                                                                   // 25
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {                                                                                                         // 27
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();                                                        // 28
        target[targetIndex] = element;                                                                                 // 29
      }                                                                                                                // 30
                                                                                                                       // 31
      targetIndex++;                                                                                                   // 32
    }                                                                                                                  // 33
    sourceIndex++;                                                                                                     // 34
  }                                                                                                                    // 35
  return targetIndex;                                                                                                  // 36
}                                                                                                                      // 37
                                                                                                                       // 38
module.exports = flattenIntoArray;                                                                                     // 39
                                                                                                                       // 40
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es7.array.flatten.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es7.array.flatten.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten                                                // 2
var $export = require('./_export');                                                                                    // 3
var flattenIntoArray = require('./_flatten-into-array');                                                               // 4
var toObject = require('./_to-object');                                                                                // 5
var toLength = require('./_to-length');                                                                                // 6
var toInteger = require('./_to-integer');                                                                              // 7
var arraySpeciesCreate = require('./_array-species-create');                                                           // 8
                                                                                                                       // 9
$export($export.P, 'Array', {                                                                                          // 10
  flatten: function flatten(/* depthArg = 1 */) {                                                                      // 11
    var depthArg = arguments[0];                                                                                       // 12
    var O = toObject(this);                                                                                            // 13
    var sourceLen = toLength(O.length);                                                                                // 14
    var A = arraySpeciesCreate(O, 0);                                                                                  // 15
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));                         // 16
    return A;                                                                                                          // 17
  }                                                                                                                    // 18
});                                                                                                                    // 19
                                                                                                                       // 20
require('./_add-to-unscopables')('flatten');                                                                           // 21
                                                                                                                       // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es7.object.get-own-property-descriptors.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es7.object.get-own-property-descriptors.js                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// https://github.com/tc39/proposal-object-getownpropertydescriptors                                                   // 1
var $export = require('./_export');                                                                                    // 2
var ownKeys = require('./_own-keys');                                                                                  // 3
var toIObject = require('./_to-iobject');                                                                              // 4
var gOPD = require('./_object-gopd');                                                                                  // 5
var createProperty = require('./_create-property');                                                                    // 6
                                                                                                                       // 7
$export($export.S, 'Object', {                                                                                         // 8
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {                                              // 9
    var O = toIObject(object);                                                                                         // 10
    var getDesc = gOPD.f;                                                                                              // 11
    var keys = ownKeys(O);                                                                                             // 12
    var result = {};                                                                                                   // 13
    var i = 0;                                                                                                         // 14
    var key, desc;                                                                                                     // 15
    while (keys.length > i) {                                                                                          // 16
      desc = getDesc(O, key = keys[i++]);                                                                              // 17
      if (desc !== undefined) createProperty(result, key, desc);                                                       // 18
    }                                                                                                                  // 19
    return result;                                                                                                     // 20
  }                                                                                                                    // 21
});                                                                                                                    // 22
                                                                                                                       // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_own-keys.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_own-keys.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// all object keys, includes non-enumerable and symbols                                                                // 1
var gOPN = require('./_object-gopn');                                                                                  // 2
var gOPS = require('./_object-gops');                                                                                  // 3
var anObject = require('./_an-object');                                                                                // 4
var Reflect = require('./_global').Reflect;                                                                            // 5
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {                                                  // 6
  var keys = gOPN.f(anObject(it));                                                                                     // 7
  var getSymbols = gOPS.f;                                                                                             // 8
  return getSymbols ? keys.concat(getSymbols(it)) : keys;                                                              // 9
};                                                                                                                     // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es7.object.values.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es7.object.values.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// https://github.com/tc39/proposal-object-values-entries                                                              // 1
var $export = require('./_export');                                                                                    // 2
var $values = require('./_object-to-array')(false);                                                                    // 3
                                                                                                                       // 4
$export($export.S, 'Object', {                                                                                         // 5
  values: function values(it) {                                                                                        // 6
    return $values(it);                                                                                                // 7
  }                                                                                                                    // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-to-array.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_object-to-array.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var getKeys = require('./_object-keys');                                                                               // 1
var toIObject = require('./_to-iobject');                                                                              // 2
var isEnum = require('./_object-pie').f;                                                                               // 3
module.exports = function (isEntries) {                                                                                // 4
  return function (it) {                                                                                               // 5
    var O = toIObject(it);                                                                                             // 6
    var keys = getKeys(O);                                                                                             // 7
    var length = keys.length;                                                                                          // 8
    var i = 0;                                                                                                         // 9
    var result = [];                                                                                                   // 10
    var key;                                                                                                           // 11
    while (length > i) if (isEnum.call(O, key = keys[i++])) {                                                          // 12
      result.push(isEntries ? [key, O[key]] : O[key]);                                                                 // 13
    } return result;                                                                                                   // 14
  };                                                                                                                   // 15
};                                                                                                                     // 16
                                                                                                                       // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es7.object.entries.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es7.object.entries.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// https://github.com/tc39/proposal-object-values-entries                                                              // 1
var $export = require('./_export');                                                                                    // 2
var $entries = require('./_object-to-array')(true);                                                                    // 3
                                                                                                                       // 4
$export($export.S, 'Object', {                                                                                         // 5
  entries: function entries(it) {                                                                                      // 6
    return $entries(it);                                                                                               // 7
  }                                                                                                                    // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es7.object.define-getter.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es7.object.define-getter.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var toObject = require('./_to-object');                                                                                // 3
var aFunction = require('./_a-function');                                                                              // 4
var $defineProperty = require('./_object-dp');                                                                         // 5
                                                                                                                       // 6
// B.2.2.2 Object.prototype.__defineGetter__(P, getter)                                                                // 7
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {                          // 8
  __defineGetter__: function __defineGetter__(P, getter) {                                                             // 9
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });            // 10
  }                                                                                                                    // 11
});                                                                                                                    // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_object-forced-pam.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_object-forced-pam.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
// Forced replacement prototype accessors methods                                                                      // 2
module.exports = require('./_library') || !require('./_fails')(function () {                                           // 3
  var K = Math.random();                                                                                               // 4
  // In FF throws only define methods                                                                                  // 5
  // eslint-disable-next-line no-undef, no-useless-call                                                                // 6
  __defineSetter__.call(null, K, function () { /* empty */ });                                                         // 7
  delete require('./_global')[K];                                                                                      // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es7.object.define-setter.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es7.object.define-setter.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var toObject = require('./_to-object');                                                                                // 3
var aFunction = require('./_a-function');                                                                              // 4
var $defineProperty = require('./_object-dp');                                                                         // 5
                                                                                                                       // 6
// B.2.2.3 Object.prototype.__defineSetter__(P, setter)                                                                // 7
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {                          // 8
  __defineSetter__: function __defineSetter__(P, setter) {                                                             // 9
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });            // 10
  }                                                                                                                    // 11
});                                                                                                                    // 12
                                                                                                                       // 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es7.object.lookup-getter.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es7.object.lookup-getter.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var toObject = require('./_to-object');                                                                                // 3
var toPrimitive = require('./_to-primitive');                                                                          // 4
var getPrototypeOf = require('./_object-gpo');                                                                         // 5
var getOwnPropertyDescriptor = require('./_object-gopd').f;                                                            // 6
                                                                                                                       // 7
// B.2.2.4 Object.prototype.__lookupGetter__(P)                                                                        // 8
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {                          // 9
  __lookupGetter__: function __lookupGetter__(P) {                                                                     // 10
    var O = toObject(this);                                                                                            // 11
    var K = toPrimitive(P, true);                                                                                      // 12
    var D;                                                                                                             // 13
    do {                                                                                                               // 14
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;                                                            // 15
    } while (O = getPrototypeOf(O));                                                                                   // 16
  }                                                                                                                    // 17
});                                                                                                                    // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es7.object.lookup-setter.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es7.object.lookup-setter.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var $export = require('./_export');                                                                                    // 2
var toObject = require('./_to-object');                                                                                // 3
var toPrimitive = require('./_to-primitive');                                                                          // 4
var getPrototypeOf = require('./_object-gpo');                                                                         // 5
var getOwnPropertyDescriptor = require('./_object-gopd').f;                                                            // 6
                                                                                                                       // 7
// B.2.2.5 Object.prototype.__lookupSetter__(P)                                                                        // 8
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {                          // 9
  __lookupSetter__: function __lookupSetter__(P) {                                                                     // 10
    var O = toObject(this);                                                                                            // 11
    var K = toPrimitive(P, true);                                                                                      // 12
    var D;                                                                                                             // 13
    do {                                                                                                               // 14
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;                                                            // 15
    } while (O = getPrototypeOf(O));                                                                                   // 16
  }                                                                                                                    // 17
});                                                                                                                    // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.number.epsilon.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.number.epsilon.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.1.2.1 Number.EPSILON                                                                                             // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });                                                           // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.number.is-finite.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.number.is-finite.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.1.2.2 Number.isFinite(number)                                                                                    // 1
var $export = require('./_export');                                                                                    // 2
var _isFinite = require('./_global').isFinite;                                                                         // 3
                                                                                                                       // 4
$export($export.S, 'Number', {                                                                                         // 5
  isFinite: function isFinite(it) {                                                                                    // 6
    return typeof it == 'number' && _isFinite(it);                                                                     // 7
  }                                                                                                                    // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.number.is-integer.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.number.is-integer.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.1.2.3 Number.isInteger(number)                                                                                   // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S, 'Number', { isInteger: require('./_is-integer') });                                                 // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_is-integer.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_is-integer.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.1.2.3 Number.isInteger(number)                                                                                   // 1
var isObject = require('./_is-object');                                                                                // 2
var floor = Math.floor;                                                                                                // 3
module.exports = function isInteger(it) {                                                                              // 4
  return !isObject(it) && isFinite(it) && floor(it) === it;                                                            // 5
};                                                                                                                     // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.number.is-nan.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.number.is-nan.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.1.2.4 Number.isNaN(number)                                                                                       // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S, 'Number', {                                                                                         // 4
  isNaN: function isNaN(number) {                                                                                      // 5
    // eslint-disable-next-line no-self-compare                                                                        // 6
    return number != number;                                                                                           // 7
  }                                                                                                                    // 8
});                                                                                                                    // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.number.is-safe-integer.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.number.is-safe-integer.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.1.2.5 Number.isSafeInteger(number)                                                                               // 1
var $export = require('./_export');                                                                                    // 2
var isInteger = require('./_is-integer');                                                                              // 3
var abs = Math.abs;                                                                                                    // 4
                                                                                                                       // 5
$export($export.S, 'Number', {                                                                                         // 6
  isSafeInteger: function isSafeInteger(number) {                                                                      // 7
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;                                                       // 8
  }                                                                                                                    // 9
});                                                                                                                    // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.number.max-safe-integer.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.number.max-safe-integer.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.1.2.6 Number.MAX_SAFE_INTEGER                                                                                    // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });                                                  // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.number.min-safe-integer.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.number.min-safe-integer.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 20.1.2.10 Number.MIN_SAFE_INTEGER                                                                                   // 1
var $export = require('./_export');                                                                                    // 2
                                                                                                                       // 3
$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });                                                 // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.number.parse-float.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.number.parse-float.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export');                                                                                    // 1
var $parseFloat = require('./_parse-float');                                                                           // 2
// 20.1.2.12 Number.parseFloat(string)                                                                                 // 3
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });            // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_parse-float.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_parse-float.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $parseFloat = require('./_global').parseFloat;                                                                     // 1
var $trim = require('./_string-trim').trim;                                                                            // 2
                                                                                                                       // 3
module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {            // 4
  var string = $trim(String(str), 3);                                                                                  // 5
  var result = $parseFloat(string);                                                                                    // 6
  return result === 0 && string.charAt(0) == '-' ? -0 : result;                                                        // 7
} : $parseFloat;                                                                                                       // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.number.parse-int.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.number.parse-int.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $export = require('./_export');                                                                                    // 1
var $parseInt = require('./_parse-int');                                                                               // 2
// 20.1.2.13 Number.parseInt(string, radix)                                                                            // 3
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });                    // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_parse-int.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_parse-int.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var $parseInt = require('./_global').parseInt;                                                                         // 1
var $trim = require('./_string-trim').trim;                                                                            // 2
var ws = require('./_string-ws');                                                                                      // 3
var hex = /^[-+]?0[xX]/;                                                                                               // 4
                                                                                                                       // 5
module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {         // 6
  var string = $trim(String(str), 3);                                                                                  // 7
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));                                             // 8
} : $parseInt;                                                                                                         // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.typed.uint8-array.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.typed.uint8-array.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./_typed-array')('Uint8', 1, function (init) {                                                                // 1
  return function Uint8Array(data, byteOffset, length) {                                                               // 2
    return init(this, data, byteOffset, length);                                                                       // 3
  };                                                                                                                   // 4
});                                                                                                                    // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_typed-array.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_typed-array.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
if (require('./_descriptors')) {                                                                                       // 2
  var LIBRARY = require('./_library');                                                                                 // 3
  var global = require('./_global');                                                                                   // 4
  var fails = require('./_fails');                                                                                     // 5
  var $export = require('./_export');                                                                                  // 6
  var $typed = require('./_typed');                                                                                    // 7
  var $buffer = require('./_typed-buffer');                                                                            // 8
  var ctx = require('./_ctx');                                                                                         // 9
  var anInstance = require('./_an-instance');                                                                          // 10
  var propertyDesc = require('./_property-desc');                                                                      // 11
  var hide = require('./_hide');                                                                                       // 12
  var redefineAll = require('./_redefine-all');                                                                        // 13
  var toInteger = require('./_to-integer');                                                                            // 14
  var toLength = require('./_to-length');                                                                              // 15
  var toIndex = require('./_to-index');                                                                                // 16
  var toAbsoluteIndex = require('./_to-absolute-index');                                                               // 17
  var toPrimitive = require('./_to-primitive');                                                                        // 18
  var has = require('./_has');                                                                                         // 19
  var classof = require('./_classof');                                                                                 // 20
  var isObject = require('./_is-object');                                                                              // 21
  var toObject = require('./_to-object');                                                                              // 22
  var isArrayIter = require('./_is-array-iter');                                                                       // 23
  var create = require('./_object-create');                                                                            // 24
  var getPrototypeOf = require('./_object-gpo');                                                                       // 25
  var gOPN = require('./_object-gopn').f;                                                                              // 26
  var getIterFn = require('./core.get-iterator-method');                                                               // 27
  var uid = require('./_uid');                                                                                         // 28
  var wks = require('./_wks');                                                                                         // 29
  var createArrayMethod = require('./_array-methods');                                                                 // 30
  var createArrayIncludes = require('./_array-includes');                                                              // 31
  var speciesConstructor = require('./_species-constructor');                                                          // 32
  var ArrayIterators = require('./es6.array.iterator');                                                                // 33
  var Iterators = require('./_iterators');                                                                             // 34
  var $iterDetect = require('./_iter-detect');                                                                         // 35
  var setSpecies = require('./_set-species');                                                                          // 36
  var arrayFill = require('./_array-fill');                                                                            // 37
  var arrayCopyWithin = require('./_array-copy-within');                                                               // 38
  var $DP = require('./_object-dp');                                                                                   // 39
  var $GOPD = require('./_object-gopd');                                                                               // 40
  var dP = $DP.f;                                                                                                      // 41
  var gOPD = $GOPD.f;                                                                                                  // 42
  var RangeError = global.RangeError;                                                                                  // 43
  var TypeError = global.TypeError;                                                                                    // 44
  var Uint8Array = global.Uint8Array;                                                                                  // 45
  var ARRAY_BUFFER = 'ArrayBuffer';                                                                                    // 46
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;                                                                         // 47
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';                                                                         // 48
  var PROTOTYPE = 'prototype';                                                                                         // 49
  var ArrayProto = Array[PROTOTYPE];                                                                                   // 50
  var $ArrayBuffer = $buffer.ArrayBuffer;                                                                              // 51
  var $DataView = $buffer.DataView;                                                                                    // 52
  var arrayForEach = createArrayMethod(0);                                                                             // 53
  var arrayFilter = createArrayMethod(2);                                                                              // 54
  var arraySome = createArrayMethod(3);                                                                                // 55
  var arrayEvery = createArrayMethod(4);                                                                               // 56
  var arrayFind = createArrayMethod(5);                                                                                // 57
  var arrayFindIndex = createArrayMethod(6);                                                                           // 58
  var arrayIncludes = createArrayIncludes(true);                                                                       // 59
  var arrayIndexOf = createArrayIncludes(false);                                                                       // 60
  var arrayValues = ArrayIterators.values;                                                                             // 61
  var arrayKeys = ArrayIterators.keys;                                                                                 // 62
  var arrayEntries = ArrayIterators.entries;                                                                           // 63
  var arrayLastIndexOf = ArrayProto.lastIndexOf;                                                                       // 64
  var arrayReduce = ArrayProto.reduce;                                                                                 // 65
  var arrayReduceRight = ArrayProto.reduceRight;                                                                       // 66
  var arrayJoin = ArrayProto.join;                                                                                     // 67
  var arraySort = ArrayProto.sort;                                                                                     // 68
  var arraySlice = ArrayProto.slice;                                                                                   // 69
  var arrayToString = ArrayProto.toString;                                                                             // 70
  var arrayToLocaleString = ArrayProto.toLocaleString;                                                                 // 71
  var ITERATOR = wks('iterator');                                                                                      // 72
  var TAG = wks('toStringTag');                                                                                        // 73
  var TYPED_CONSTRUCTOR = uid('typed_constructor');                                                                    // 74
  var DEF_CONSTRUCTOR = uid('def_constructor');                                                                        // 75
  var ALL_CONSTRUCTORS = $typed.CONSTR;                                                                                // 76
  var TYPED_ARRAY = $typed.TYPED;                                                                                      // 77
  var VIEW = $typed.VIEW;                                                                                              // 78
  var WRONG_LENGTH = 'Wrong length!';                                                                                  // 79
                                                                                                                       // 80
  var $map = createArrayMethod(1, function (O, length) {                                                               // 81
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);                                                // 82
  });                                                                                                                  // 83
                                                                                                                       // 84
  var LITTLE_ENDIAN = fails(function () {                                                                              // 85
    // eslint-disable-next-line no-undef                                                                               // 86
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;                                                       // 87
  });                                                                                                                  // 88
                                                                                                                       // 89
  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {                                  // 90
    new Uint8Array(1).set({});                                                                                         // 91
  });                                                                                                                  // 92
                                                                                                                       // 93
  var toOffset = function (it, BYTES) {                                                                                // 94
    var offset = toInteger(it);                                                                                        // 95
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');                                               // 96
    return offset;                                                                                                     // 97
  };                                                                                                                   // 98
                                                                                                                       // 99
  var validate = function (it) {                                                                                       // 100
    if (isObject(it) && TYPED_ARRAY in it) return it;                                                                  // 101
    throw TypeError(it + ' is not a typed array!');                                                                    // 102
  };                                                                                                                   // 103
                                                                                                                       // 104
  var allocate = function (C, length) {                                                                                // 105
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {                                                                    // 106
      throw TypeError('It is not a typed array constructor!');                                                         // 107
    } return new C(length);                                                                                            // 108
  };                                                                                                                   // 109
                                                                                                                       // 110
  var speciesFromList = function (O, list) {                                                                           // 111
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);                                                  // 112
  };                                                                                                                   // 113
                                                                                                                       // 114
  var fromList = function (C, list) {                                                                                  // 115
    var index = 0;                                                                                                     // 116
    var length = list.length;                                                                                          // 117
    var result = allocate(C, length);                                                                                  // 118
    while (length > index) result[index] = list[index++];                                                              // 119
    return result;                                                                                                     // 120
  };                                                                                                                   // 121
                                                                                                                       // 122
  var addGetter = function (it, key, internal) {                                                                       // 123
    dP(it, key, { get: function () { return this._d[internal]; } });                                                   // 124
  };                                                                                                                   // 125
                                                                                                                       // 126
  var $from = function from(source /* , mapfn, thisArg */) {                                                           // 127
    var O = toObject(source);                                                                                          // 128
    var aLen = arguments.length;                                                                                       // 129
    var mapfn = aLen > 1 ? arguments[1] : undefined;                                                                   // 130
    var mapping = mapfn !== undefined;                                                                                 // 131
    var iterFn = getIterFn(O);                                                                                         // 132
    var i, length, values, result, step, iterator;                                                                     // 133
    if (iterFn != undefined && !isArrayIter(iterFn)) {                                                                 // 134
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {                       // 135
        values.push(step.value);                                                                                       // 136
      } O = values;                                                                                                    // 137
    }                                                                                                                  // 138
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);                                                      // 139
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {                       // 140
      result[i] = mapping ? mapfn(O[i], i) : O[i];                                                                     // 141
    }                                                                                                                  // 142
    return result;                                                                                                     // 143
  };                                                                                                                   // 144
                                                                                                                       // 145
  var $of = function of(/* ...items */) {                                                                              // 146
    var index = 0;                                                                                                     // 147
    var length = arguments.length;                                                                                     // 148
    var result = allocate(this, length);                                                                               // 149
    while (length > index) result[index] = arguments[index++];                                                         // 150
    return result;                                                                                                     // 151
  };                                                                                                                   // 152
                                                                                                                       // 153
  // iOS Safari 6.x fails here                                                                                         // 154
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });             // 155
                                                                                                                       // 156
  var $toLocaleString = function toLocaleString() {                                                                    // 157
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);     // 158
  };                                                                                                                   // 159
                                                                                                                       // 160
  var proto = {                                                                                                        // 161
    copyWithin: function copyWithin(target, start /* , end */) {                                                       // 162
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);     // 163
    },                                                                                                                 // 164
    every: function every(callbackfn /* , thisArg */) {                                                                // 165
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);                  // 166
    },                                                                                                                 // 167
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars                              // 168
      return arrayFill.apply(validate(this), arguments);                                                               // 169
    },                                                                                                                 // 170
    filter: function filter(callbackfn /* , thisArg */) {                                                              // 171
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,                                             // 172
        arguments.length > 1 ? arguments[1] : undefined));                                                             // 173
    },                                                                                                                 // 174
    find: function find(predicate /* , thisArg */) {                                                                   // 175
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);                    // 176
    },                                                                                                                 // 177
    findIndex: function findIndex(predicate /* , thisArg */) {                                                         // 178
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);               // 179
    },                                                                                                                 // 180
    forEach: function forEach(callbackfn /* , thisArg */) {                                                            // 181
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);                       // 182
    },                                                                                                                 // 183
    indexOf: function indexOf(searchElement /* , fromIndex */) {                                                       // 184
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);             // 185
    },                                                                                                                 // 186
    includes: function includes(searchElement /* , fromIndex */) {                                                     // 187
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);            // 188
    },                                                                                                                 // 189
    join: function join(separator) { // eslint-disable-line no-unused-vars                                             // 190
      return arrayJoin.apply(validate(this), arguments);                                                               // 191
    },                                                                                                                 // 192
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars         // 193
      return arrayLastIndexOf.apply(validate(this), arguments);                                                        // 194
    },                                                                                                                 // 195
    map: function map(mapfn /* , thisArg */) {                                                                         // 196
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);                             // 197
    },                                                                                                                 // 198
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars                   // 199
      return arrayReduce.apply(validate(this), arguments);                                                             // 200
    },                                                                                                                 // 201
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars         // 202
      return arrayReduceRight.apply(validate(this), arguments);                                                        // 203
    },                                                                                                                 // 204
    reverse: function reverse() {                                                                                      // 205
      var that = this;                                                                                                 // 206
      var length = validate(that).length;                                                                              // 207
      var middle = Math.floor(length / 2);                                                                             // 208
      var index = 0;                                                                                                   // 209
      var value;                                                                                                       // 210
      while (index < middle) {                                                                                         // 211
        value = that[index];                                                                                           // 212
        that[index++] = that[--length];                                                                                // 213
        that[length] = value;                                                                                          // 214
      } return that;                                                                                                   // 215
    },                                                                                                                 // 216
    some: function some(callbackfn /* , thisArg */) {                                                                  // 217
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);                   // 218
    },                                                                                                                 // 219
    sort: function sort(comparefn) {                                                                                   // 220
      return arraySort.call(validate(this), comparefn);                                                                // 221
    },                                                                                                                 // 222
    subarray: function subarray(begin, end) {                                                                          // 223
      var O = validate(this);                                                                                          // 224
      var length = O.length;                                                                                           // 225
      var $begin = toAbsoluteIndex(begin, length);                                                                     // 226
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(                                                          // 227
        O.buffer,                                                                                                      // 228
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,                                                                   // 229
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)                                 // 230
      );                                                                                                               // 231
    }                                                                                                                  // 232
  };                                                                                                                   // 233
                                                                                                                       // 234
  var $slice = function slice(start, end) {                                                                            // 235
    return speciesFromList(this, arraySlice.call(validate(this), start, end));                                         // 236
  };                                                                                                                   // 237
                                                                                                                       // 238
  var $set = function set(arrayLike /* , offset */) {                                                                  // 239
    validate(this);                                                                                                    // 240
    var offset = toOffset(arguments[1], 1);                                                                            // 241
    var length = this.length;                                                                                          // 242
    var src = toObject(arrayLike);                                                                                     // 243
    var len = toLength(src.length);                                                                                    // 244
    var index = 0;                                                                                                     // 245
    if (len + offset > length) throw RangeError(WRONG_LENGTH);                                                         // 246
    while (index < len) this[offset + index] = src[index++];                                                           // 247
  };                                                                                                                   // 248
                                                                                                                       // 249
  var $iterators = {                                                                                                   // 250
    entries: function entries() {                                                                                      // 251
      return arrayEntries.call(validate(this));                                                                        // 252
    },                                                                                                                 // 253
    keys: function keys() {                                                                                            // 254
      return arrayKeys.call(validate(this));                                                                           // 255
    },                                                                                                                 // 256
    values: function values() {                                                                                        // 257
      return arrayValues.call(validate(this));                                                                         // 258
    }                                                                                                                  // 259
  };                                                                                                                   // 260
                                                                                                                       // 261
  var isTAIndex = function (target, key) {                                                                             // 262
    return isObject(target)                                                                                            // 263
      && target[TYPED_ARRAY]                                                                                           // 264
      && typeof key != 'symbol'                                                                                        // 265
      && key in target                                                                                                 // 266
      && String(+key) == String(key);                                                                                  // 267
  };                                                                                                                   // 268
  var $getDesc = function getOwnPropertyDescriptor(target, key) {                                                      // 269
    return isTAIndex(target, key = toPrimitive(key, true))                                                             // 270
      ? propertyDesc(2, target[key])                                                                                   // 271
      : gOPD(target, key);                                                                                             // 272
  };                                                                                                                   // 273
  var $setDesc = function defineProperty(target, key, desc) {                                                          // 274
    if (isTAIndex(target, key = toPrimitive(key, true))                                                                // 275
      && isObject(desc)                                                                                                // 276
      && has(desc, 'value')                                                                                            // 277
      && !has(desc, 'get')                                                                                             // 278
      && !has(desc, 'set')                                                                                             // 279
      // TODO: add validation descriptor w/o calling accessors                                                         // 280
      && !desc.configurable                                                                                            // 281
      && (!has(desc, 'writable') || desc.writable)                                                                     // 282
      && (!has(desc, 'enumerable') || desc.enumerable)                                                                 // 283
    ) {                                                                                                                // 284
      target[key] = desc.value;                                                                                        // 285
      return target;                                                                                                   // 286
    } return dP(target, key, desc);                                                                                    // 287
  };                                                                                                                   // 288
                                                                                                                       // 289
  if (!ALL_CONSTRUCTORS) {                                                                                             // 290
    $GOPD.f = $getDesc;                                                                                                // 291
    $DP.f = $setDesc;                                                                                                  // 292
  }                                                                                                                    // 293
                                                                                                                       // 294
  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {                                                       // 295
    getOwnPropertyDescriptor: $getDesc,                                                                                // 296
    defineProperty: $setDesc                                                                                           // 297
  });                                                                                                                  // 298
                                                                                                                       // 299
  if (fails(function () { arrayToString.call({}); })) {                                                                // 300
    arrayToString = arrayToLocaleString = function toString() {                                                        // 301
      return arrayJoin.call(this);                                                                                     // 302
    };                                                                                                                 // 303
  }                                                                                                                    // 304
                                                                                                                       // 305
  var $TypedArrayPrototype$ = redefineAll({}, proto);                                                                  // 306
  redefineAll($TypedArrayPrototype$, $iterators);                                                                      // 307
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);                                                            // 308
  redefineAll($TypedArrayPrototype$, {                                                                                 // 309
    slice: $slice,                                                                                                     // 310
    set: $set,                                                                                                         // 311
    constructor: function () { /* noop */ },                                                                           // 312
    toString: arrayToString,                                                                                           // 313
    toLocaleString: $toLocaleString                                                                                    // 314
  });                                                                                                                  // 315
  addGetter($TypedArrayPrototype$, 'buffer', 'b');                                                                     // 316
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');                                                                 // 317
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');                                                                 // 318
  addGetter($TypedArrayPrototype$, 'length', 'e');                                                                     // 319
  dP($TypedArrayPrototype$, TAG, {                                                                                     // 320
    get: function () { return this[TYPED_ARRAY]; }                                                                     // 321
  });                                                                                                                  // 322
                                                                                                                       // 323
  // eslint-disable-next-line max-statements                                                                           // 324
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {                                                           // 325
    CLAMPED = !!CLAMPED;                                                                                               // 326
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';                                                             // 327
    var GETTER = 'get' + KEY;                                                                                          // 328
    var SETTER = 'set' + KEY;                                                                                          // 329
    var TypedArray = global[NAME];                                                                                     // 330
    var Base = TypedArray || {};                                                                                       // 331
    var TAC = TypedArray && getPrototypeOf(TypedArray);                                                                // 332
    var FORCED = !TypedArray || !$typed.ABV;                                                                           // 333
    var O = {};                                                                                                        // 334
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];                                                     // 335
    var getter = function (that, index) {                                                                              // 336
      var data = that._d;                                                                                              // 337
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);                                                    // 338
    };                                                                                                                 // 339
    var setter = function (that, index, value) {                                                                       // 340
      var data = that._d;                                                                                              // 341
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;                   // 342
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);                                                    // 343
    };                                                                                                                 // 344
    var addElement = function (that, index) {                                                                          // 345
      dP(that, index, {                                                                                                // 346
        get: function () {                                                                                             // 347
          return getter(this, index);                                                                                  // 348
        },                                                                                                             // 349
        set: function (value) {                                                                                        // 350
          return setter(this, index, value);                                                                           // 351
        },                                                                                                             // 352
        enumerable: true                                                                                               // 353
      });                                                                                                              // 354
    };                                                                                                                 // 355
    if (FORCED) {                                                                                                      // 356
      TypedArray = wrapper(function (that, data, $offset, $length) {                                                   // 357
        anInstance(that, TypedArray, NAME, '_d');                                                                      // 358
        var index = 0;                                                                                                 // 359
        var offset = 0;                                                                                                // 360
        var buffer, byteLength, length, klass;                                                                         // 361
        if (!isObject(data)) {                                                                                         // 362
          length = toIndex(data);                                                                                      // 363
          byteLength = length * BYTES;                                                                                 // 364
          buffer = new $ArrayBuffer(byteLength);                                                                       // 365
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;                                                                                               // 367
          offset = toOffset($offset, BYTES);                                                                           // 368
          var $len = data.byteLength;                                                                                  // 369
          if ($length === undefined) {                                                                                 // 370
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);                                                          // 371
            byteLength = $len - offset;                                                                                // 372
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);                                                        // 373
          } else {                                                                                                     // 374
            byteLength = toLength($length) * BYTES;                                                                    // 375
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);                                            // 376
          }                                                                                                            // 377
          length = byteLength / BYTES;                                                                                 // 378
        } else if (TYPED_ARRAY in data) {                                                                              // 379
          return fromList(TypedArray, data);                                                                           // 380
        } else {                                                                                                       // 381
          return $from.call(TypedArray, data);                                                                         // 382
        }                                                                                                              // 383
        hide(that, '_d', {                                                                                             // 384
          b: buffer,                                                                                                   // 385
          o: offset,                                                                                                   // 386
          l: byteLength,                                                                                               // 387
          e: length,                                                                                                   // 388
          v: new $DataView(buffer)                                                                                     // 389
        });                                                                                                            // 390
        while (index < length) addElement(that, index++);                                                              // 391
      });                                                                                                              // 392
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);                                     // 393
      hide(TypedArrayPrototype, 'constructor', TypedArray);                                                            // 394
    } else if (!fails(function () {                                                                                    // 395
      TypedArray(1);                                                                                                   // 396
    }) || !fails(function () {                                                                                         // 397
      new TypedArray(-1); // eslint-disable-line no-new                                                                // 398
    }) || !$iterDetect(function (iter) {                                                                               // 399
      new TypedArray(); // eslint-disable-line no-new                                                                  // 400
      new TypedArray(null); // eslint-disable-line no-new                                                              // 401
      new TypedArray(1.5); // eslint-disable-line no-new                                                               // 402
      new TypedArray(iter); // eslint-disable-line no-new                                                              // 403
    }, true)) {                                                                                                        // 404
      TypedArray = wrapper(function (that, data, $offset, $length) {                                                   // 405
        anInstance(that, TypedArray, NAME);                                                                            // 406
        var klass;                                                                                                     // 407
        // `ws` module bug, temporarily remove validation length for Uint8Array                                        // 408
        // https://github.com/websockets/ws/pull/645                                                                   // 409
        if (!isObject(data)) return new Base(toIndex(data));                                                           // 410
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {       // 411
          return $length !== undefined                                                                                 // 412
            ? new Base(data, toOffset($offset, BYTES), $length)                                                        // 413
            : $offset !== undefined                                                                                    // 414
              ? new Base(data, toOffset($offset, BYTES))                                                               // 415
              : new Base(data);                                                                                        // 416
        }                                                                                                              // 417
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);                                                    // 418
        return $from.call(TypedArray, data);                                                                           // 419
      });                                                                                                              // 420
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {            // 421
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);                                                    // 422
      });                                                                                                              // 423
      TypedArray[PROTOTYPE] = TypedArrayPrototype;                                                                     // 424
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;                                                      // 425
    }                                                                                                                  // 426
    var $nativeIterator = TypedArrayPrototype[ITERATOR];                                                               // 427
    var CORRECT_ITER_NAME = !!$nativeIterator                                                                          // 428
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);                                      // 429
    var $iterator = $iterators.values;                                                                                 // 430
    hide(TypedArray, TYPED_CONSTRUCTOR, true);                                                                         // 431
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);                                                                      // 432
    hide(TypedArrayPrototype, VIEW, true);                                                                             // 433
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);                                                            // 434
                                                                                                                       // 435
    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {                                    // 436
      dP(TypedArrayPrototype, TAG, {                                                                                   // 437
        get: function () { return NAME; }                                                                              // 438
      });                                                                                                              // 439
    }                                                                                                                  // 440
                                                                                                                       // 441
    O[NAME] = TypedArray;                                                                                              // 442
                                                                                                                       // 443
    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);                                              // 444
                                                                                                                       // 445
    $export($export.S, NAME, {                                                                                         // 446
      BYTES_PER_ELEMENT: BYTES                                                                                         // 447
    });                                                                                                                // 448
                                                                                                                       // 449
    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {                       // 450
      from: $from,                                                                                                     // 451
      of: $of                                                                                                          // 452
    });                                                                                                                // 453
                                                                                                                       // 454
    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);              // 455
                                                                                                                       // 456
    $export($export.P, NAME, proto);                                                                                   // 457
                                                                                                                       // 458
    setSpecies(NAME);                                                                                                  // 459
                                                                                                                       // 460
    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });                                                  // 461
                                                                                                                       // 462
    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);                                             // 463
                                                                                                                       // 464
    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;       // 465
                                                                                                                       // 466
    $export($export.P + $export.F * fails(function () {                                                                // 467
      new TypedArray(1).slice();                                                                                       // 468
    }), NAME, { slice: $slice });                                                                                      // 469
                                                                                                                       // 470
    $export($export.P + $export.F * (fails(function () {                                                               // 471
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();                                       // 472
    }) || !fails(function () {                                                                                         // 473
      TypedArrayPrototype.toLocaleString.call([1, 2]);                                                                 // 474
    })), NAME, { toLocaleString: $toLocaleString });                                                                   // 475
                                                                                                                       // 476
    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;                                                 // 477
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);                                // 478
  };                                                                                                                   // 479
} else module.exports = function () { /* empty */ };                                                                   // 480
                                                                                                                       // 481
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_typed.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_typed.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var global = require('./_global');                                                                                     // 1
var hide = require('./_hide');                                                                                         // 2
var uid = require('./_uid');                                                                                           // 3
var TYPED = uid('typed_array');                                                                                        // 4
var VIEW = uid('view');                                                                                                // 5
var ABV = !!(global.ArrayBuffer && global.DataView);                                                                   // 6
var CONSTR = ABV;                                                                                                      // 7
var i = 0;                                                                                                             // 8
var l = 9;                                                                                                             // 9
var Typed;                                                                                                             // 10
                                                                                                                       // 11
var TypedArrayConstructors = (                                                                                         // 12
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'     // 13
).split(',');                                                                                                          // 14
                                                                                                                       // 15
while (i < l) {                                                                                                        // 16
  if (Typed = global[TypedArrayConstructors[i++]]) {                                                                   // 17
    hide(Typed.prototype, TYPED, true);                                                                                // 18
    hide(Typed.prototype, VIEW, true);                                                                                 // 19
  } else CONSTR = false;                                                                                               // 20
}                                                                                                                      // 21
                                                                                                                       // 22
module.exports = {                                                                                                     // 23
  ABV: ABV,                                                                                                            // 24
  CONSTR: CONSTR,                                                                                                      // 25
  TYPED: TYPED,                                                                                                        // 26
  VIEW: VIEW                                                                                                           // 27
};                                                                                                                     // 28
                                                                                                                       // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_typed-buffer.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_typed-buffer.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
'use strict';                                                                                                          // 1
var global = require('./_global');                                                                                     // 2
var DESCRIPTORS = require('./_descriptors');                                                                           // 3
var LIBRARY = require('./_library');                                                                                   // 4
var $typed = require('./_typed');                                                                                      // 5
var hide = require('./_hide');                                                                                         // 6
var redefineAll = require('./_redefine-all');                                                                          // 7
var fails = require('./_fails');                                                                                       // 8
var anInstance = require('./_an-instance');                                                                            // 9
var toInteger = require('./_to-integer');                                                                              // 10
var toLength = require('./_to-length');                                                                                // 11
var toIndex = require('./_to-index');                                                                                  // 12
var gOPN = require('./_object-gopn').f;                                                                                // 13
var dP = require('./_object-dp').f;                                                                                    // 14
var arrayFill = require('./_array-fill');                                                                              // 15
var setToStringTag = require('./_set-to-string-tag');                                                                  // 16
var ARRAY_BUFFER = 'ArrayBuffer';                                                                                      // 17
var DATA_VIEW = 'DataView';                                                                                            // 18
var PROTOTYPE = 'prototype';                                                                                           // 19
var WRONG_LENGTH = 'Wrong length!';                                                                                    // 20
var WRONG_INDEX = 'Wrong index!';                                                                                      // 21
var $ArrayBuffer = global[ARRAY_BUFFER];                                                                               // 22
var $DataView = global[DATA_VIEW];                                                                                     // 23
var Math = global.Math;                                                                                                // 24
var RangeError = global.RangeError;                                                                                    // 25
// eslint-disable-next-line no-shadow-restricted-names                                                                 // 26
var Infinity = global.Infinity;                                                                                        // 27
var BaseBuffer = $ArrayBuffer;                                                                                         // 28
var abs = Math.abs;                                                                                                    // 29
var pow = Math.pow;                                                                                                    // 30
var floor = Math.floor;                                                                                                // 31
var log = Math.log;                                                                                                    // 32
var LN2 = Math.LN2;                                                                                                    // 33
var BUFFER = 'buffer';                                                                                                 // 34
var BYTE_LENGTH = 'byteLength';                                                                                        // 35
var BYTE_OFFSET = 'byteOffset';                                                                                        // 36
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;                                                                             // 37
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;                                                                        // 38
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;                                                                        // 39
                                                                                                                       // 40
// IEEE754 conversions based on https://github.com/feross/ieee754                                                      // 41
function packIEEE754(value, mLen, nBytes) {                                                                            // 42
  var buffer = new Array(nBytes);                                                                                      // 43
  var eLen = nBytes * 8 - mLen - 1;                                                                                    // 44
  var eMax = (1 << eLen) - 1;                                                                                          // 45
  var eBias = eMax >> 1;                                                                                               // 46
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;                                                                // 47
  var i = 0;                                                                                                           // 48
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;                                                           // 49
  var e, m, c;                                                                                                         // 50
  value = abs(value);                                                                                                  // 51
  // eslint-disable-next-line no-self-compare                                                                          // 52
  if (value != value || value === Infinity) {                                                                          // 53
    // eslint-disable-next-line no-self-compare                                                                        // 54
    m = value != value ? 1 : 0;                                                                                        // 55
    e = eMax;                                                                                                          // 56
  } else {                                                                                                             // 57
    e = floor(log(value) / LN2);                                                                                       // 58
    if (value * (c = pow(2, -e)) < 1) {                                                                                // 59
      e--;                                                                                                             // 60
      c *= 2;                                                                                                          // 61
    }                                                                                                                  // 62
    if (e + eBias >= 1) {                                                                                              // 63
      value += rt / c;                                                                                                 // 64
    } else {                                                                                                           // 65
      value += rt * pow(2, 1 - eBias);                                                                                 // 66
    }                                                                                                                  // 67
    if (value * c >= 2) {                                                                                              // 68
      e++;                                                                                                             // 69
      c /= 2;                                                                                                          // 70
    }                                                                                                                  // 71
    if (e + eBias >= eMax) {                                                                                           // 72
      m = 0;                                                                                                           // 73
      e = eMax;                                                                                                        // 74
    } else if (e + eBias >= 1) {                                                                                       // 75
      m = (value * c - 1) * pow(2, mLen);                                                                              // 76
      e = e + eBias;                                                                                                   // 77
    } else {                                                                                                           // 78
      m = value * pow(2, eBias - 1) * pow(2, mLen);                                                                    // 79
      e = 0;                                                                                                           // 80
    }                                                                                                                  // 81
  }                                                                                                                    // 82
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);                                                       // 83
  e = e << mLen | m;                                                                                                   // 84
  eLen += mLen;                                                                                                        // 85
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);                                                        // 86
  buffer[--i] |= s * 128;                                                                                              // 87
  return buffer;                                                                                                       // 88
}                                                                                                                      // 89
function unpackIEEE754(buffer, mLen, nBytes) {                                                                         // 90
  var eLen = nBytes * 8 - mLen - 1;                                                                                    // 91
  var eMax = (1 << eLen) - 1;                                                                                          // 92
  var eBias = eMax >> 1;                                                                                               // 93
  var nBits = eLen - 7;                                                                                                // 94
  var i = nBytes - 1;                                                                                                  // 95
  var s = buffer[i--];                                                                                                 // 96
  var e = s & 127;                                                                                                     // 97
  var m;                                                                                                               // 98
  s >>= 7;                                                                                                             // 99
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);                                                         // 100
  m = e & (1 << -nBits) - 1;                                                                                           // 101
  e >>= -nBits;                                                                                                        // 102
  nBits += mLen;                                                                                                       // 103
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);                                                         // 104
  if (e === 0) {                                                                                                       // 105
    e = 1 - eBias;                                                                                                     // 106
  } else if (e === eMax) {                                                                                             // 107
    return m ? NaN : s ? -Infinity : Infinity;                                                                         // 108
  } else {                                                                                                             // 109
    m = m + pow(2, mLen);                                                                                              // 110
    e = e - eBias;                                                                                                     // 111
  } return (s ? -1 : 1) * m * pow(2, e - mLen);                                                                        // 112
}                                                                                                                      // 113
                                                                                                                       // 114
function unpackI32(bytes) {                                                                                            // 115
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];                                                   // 116
}                                                                                                                      // 117
function packI8(it) {                                                                                                  // 118
  return [it & 0xff];                                                                                                  // 119
}                                                                                                                      // 120
function packI16(it) {                                                                                                 // 121
  return [it & 0xff, it >> 8 & 0xff];                                                                                  // 122
}                                                                                                                      // 123
function packI32(it) {                                                                                                 // 124
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];                                                // 125
}                                                                                                                      // 126
function packF64(it) {                                                                                                 // 127
  return packIEEE754(it, 52, 8);                                                                                       // 128
}                                                                                                                      // 129
function packF32(it) {                                                                                                 // 130
  return packIEEE754(it, 23, 4);                                                                                       // 131
}                                                                                                                      // 132
                                                                                                                       // 133
function addGetter(C, key, internal) {                                                                                 // 134
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });                                              // 135
}                                                                                                                      // 136
                                                                                                                       // 137
function get(view, bytes, index, isLittleEndian) {                                                                     // 138
  var numIndex = +index;                                                                                               // 139
  var intIndex = toIndex(numIndex);                                                                                    // 140
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);                                                 // 141
  var store = view[$BUFFER]._b;                                                                                        // 142
  var start = intIndex + view[$OFFSET];                                                                                // 143
  var pack = store.slice(start, start + bytes);                                                                        // 144
  return isLittleEndian ? pack : pack.reverse();                                                                       // 145
}                                                                                                                      // 146
function set(view, bytes, index, conversion, value, isLittleEndian) {                                                  // 147
  var numIndex = +index;                                                                                               // 148
  var intIndex = toIndex(numIndex);                                                                                    // 149
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);                                                 // 150
  var store = view[$BUFFER]._b;                                                                                        // 151
  var start = intIndex + view[$OFFSET];                                                                                // 152
  var pack = conversion(+value);                                                                                       // 153
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];                         // 154
}                                                                                                                      // 155
                                                                                                                       // 156
if (!$typed.ABV) {                                                                                                     // 157
  $ArrayBuffer = function ArrayBuffer(length) {                                                                        // 158
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);                                                                      // 159
    var byteLength = toIndex(length);                                                                                  // 160
    this._b = arrayFill.call(new Array(byteLength), 0);                                                                // 161
    this[$LENGTH] = byteLength;                                                                                        // 162
  };                                                                                                                   // 163
                                                                                                                       // 164
  $DataView = function DataView(buffer, byteOffset, byteLength) {                                                      // 165
    anInstance(this, $DataView, DATA_VIEW);                                                                            // 166
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);                                                                       // 167
    var bufferLength = buffer[$LENGTH];                                                                                // 168
    var offset = toInteger(byteOffset);                                                                                // 169
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');                                        // 170
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);                              // 171
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);                                            // 172
    this[$BUFFER] = buffer;                                                                                            // 173
    this[$OFFSET] = offset;                                                                                            // 174
    this[$LENGTH] = byteLength;                                                                                        // 175
  };                                                                                                                   // 176
                                                                                                                       // 177
  if (DESCRIPTORS) {                                                                                                   // 178
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');                                                                        // 179
    addGetter($DataView, BUFFER, '_b');                                                                                // 180
    addGetter($DataView, BYTE_LENGTH, '_l');                                                                           // 181
    addGetter($DataView, BYTE_OFFSET, '_o');                                                                           // 182
  }                                                                                                                    // 183
                                                                                                                       // 184
  redefineAll($DataView[PROTOTYPE], {                                                                                  // 185
    getInt8: function getInt8(byteOffset) {                                                                            // 186
      return get(this, 1, byteOffset)[0] << 24 >> 24;                                                                  // 187
    },                                                                                                                 // 188
    getUint8: function getUint8(byteOffset) {                                                                          // 189
      return get(this, 1, byteOffset)[0];                                                                              // 190
    },                                                                                                                 // 191
    getInt16: function getInt16(byteOffset /* , littleEndian */) {                                                     // 192
      var bytes = get(this, 2, byteOffset, arguments[1]);                                                              // 193
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;                                                                   // 194
    },                                                                                                                 // 195
    getUint16: function getUint16(byteOffset /* , littleEndian */) {                                                   // 196
      var bytes = get(this, 2, byteOffset, arguments[1]);                                                              // 197
      return bytes[1] << 8 | bytes[0];                                                                                 // 198
    },                                                                                                                 // 199
    getInt32: function getInt32(byteOffset /* , littleEndian */) {                                                     // 200
      return unpackI32(get(this, 4, byteOffset, arguments[1]));                                                        // 201
    },                                                                                                                 // 202
    getUint32: function getUint32(byteOffset /* , littleEndian */) {                                                   // 203
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;                                                  // 204
    },                                                                                                                 // 205
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {                                                 // 206
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);                                             // 207
    },                                                                                                                 // 208
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {                                                 // 209
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);                                             // 210
    },                                                                                                                 // 211
    setInt8: function setInt8(byteOffset, value) {                                                                     // 212
      set(this, 1, byteOffset, packI8, value);                                                                         // 213
    },                                                                                                                 // 214
    setUint8: function setUint8(byteOffset, value) {                                                                   // 215
      set(this, 1, byteOffset, packI8, value);                                                                         // 216
    },                                                                                                                 // 217
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {                                              // 218
      set(this, 2, byteOffset, packI16, value, arguments[2]);                                                          // 219
    },                                                                                                                 // 220
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {                                            // 221
      set(this, 2, byteOffset, packI16, value, arguments[2]);                                                          // 222
    },                                                                                                                 // 223
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {                                              // 224
      set(this, 4, byteOffset, packI32, value, arguments[2]);                                                          // 225
    },                                                                                                                 // 226
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {                                            // 227
      set(this, 4, byteOffset, packI32, value, arguments[2]);                                                          // 228
    },                                                                                                                 // 229
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {                                          // 230
      set(this, 4, byteOffset, packF32, value, arguments[2]);                                                          // 231
    },                                                                                                                 // 232
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {                                          // 233
      set(this, 8, byteOffset, packF64, value, arguments[2]);                                                          // 234
    }                                                                                                                  // 235
  });                                                                                                                  // 236
} else {                                                                                                               // 237
  if (!fails(function () {                                                                                             // 238
    $ArrayBuffer(1);                                                                                                   // 239
  }) || !fails(function () {                                                                                           // 240
    new $ArrayBuffer(-1); // eslint-disable-line no-new                                                                // 241
  }) || fails(function () {                                                                                            // 242
    new $ArrayBuffer(); // eslint-disable-line no-new                                                                  // 243
    new $ArrayBuffer(1.5); // eslint-disable-line no-new                                                               // 244
    new $ArrayBuffer(NaN); // eslint-disable-line no-new                                                               // 245
    return $ArrayBuffer.name != ARRAY_BUFFER;                                                                          // 246
  })) {                                                                                                                // 247
    $ArrayBuffer = function ArrayBuffer(length) {                                                                      // 248
      anInstance(this, $ArrayBuffer);                                                                                  // 249
      return new BaseBuffer(toIndex(length));                                                                          // 250
    };                                                                                                                 // 251
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];                                            // 252
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {                                                  // 253
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);                              // 254
    }                                                                                                                  // 255
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;                                                         // 256
  }                                                                                                                    // 257
  // iOS Safari 7.x bug                                                                                                // 258
  var view = new $DataView(new $ArrayBuffer(2));                                                                       // 259
  var $setInt8 = $DataView[PROTOTYPE].setInt8;                                                                         // 260
  view.setInt8(0, 2147483648);                                                                                         // 261
  view.setInt8(1, 2147483649);                                                                                         // 262
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {                                         // 263
    setInt8: function setInt8(byteOffset, value) {                                                                     // 264
      $setInt8.call(this, byteOffset, value << 24 >> 24);                                                              // 265
    },                                                                                                                 // 266
    setUint8: function setUint8(byteOffset, value) {                                                                   // 267
      $setInt8.call(this, byteOffset, value << 24 >> 24);                                                              // 268
    }                                                                                                                  // 269
  }, true);                                                                                                            // 270
}                                                                                                                      // 271
setToStringTag($ArrayBuffer, ARRAY_BUFFER);                                                                            // 272
setToStringTag($DataView, DATA_VIEW);                                                                                  // 273
hide($DataView[PROTOTYPE], $typed.VIEW, true);                                                                         // 274
exports[ARRAY_BUFFER] = $ArrayBuffer;                                                                                  // 275
exports[DATA_VIEW] = $DataView;                                                                                        // 276
                                                                                                                       // 277
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_to-index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_to-index.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// https://tc39.github.io/ecma262/#sec-toindex                                                                         // 1
var toInteger = require('./_to-integer');                                                                              // 2
var toLength = require('./_to-length');                                                                                // 3
module.exports = function (it) {                                                                                       // 4
  if (it === undefined) return 0;                                                                                      // 5
  var number = toInteger(it);                                                                                          // 6
  var length = toLength(number);                                                                                       // 7
  if (number !== length) throw RangeError('Wrong length!');                                                            // 8
  return length;                                                                                                       // 9
};                                                                                                                     // 10
                                                                                                                       // 11
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_species-constructor.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/_species-constructor.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// 7.3.20 SpeciesConstructor(O, defaultConstructor)                                                                    // 1
var anObject = require('./_an-object');                                                                                // 2
var aFunction = require('./_a-function');                                                                              // 3
var SPECIES = require('./_wks')('species');                                                                            // 4
module.exports = function (O, D) {                                                                                     // 5
  var C = anObject(O).constructor;                                                                                     // 6
  var S;                                                                                                               // 7
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);                                // 8
};                                                                                                                     // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"es6.typed.uint32-array.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/modules/es6.typed.uint32-array.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('./_typed-array')('Uint32', 4, function (init) {                                                               // 1
  return function Uint32Array(data, byteOffset, length) {                                                              // 2
    return init(this, data, byteOffset, length);                                                                       // 3
  };                                                                                                                   // 4
});                                                                                                                    // 5
                                                                                                                       // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"es6":{"array.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/es6/array.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es6.string.iterator');                                                                             // 1
require('../modules/es6.array.is-array');                                                                              // 2
require('../modules/es6.array.from');                                                                                  // 3
require('../modules/es6.array.of');                                                                                    // 4
require('../modules/es6.array.join');                                                                                  // 5
require('../modules/es6.array.slice');                                                                                 // 6
require('../modules/es6.array.sort');                                                                                  // 7
require('../modules/es6.array.for-each');                                                                              // 8
require('../modules/es6.array.map');                                                                                   // 9
require('../modules/es6.array.filter');                                                                                // 10
require('../modules/es6.array.some');                                                                                  // 11
require('../modules/es6.array.every');                                                                                 // 12
require('../modules/es6.array.reduce');                                                                                // 13
require('../modules/es6.array.reduce-right');                                                                          // 14
require('../modules/es6.array.index-of');                                                                              // 15
require('../modules/es6.array.last-index-of');                                                                         // 16
require('../modules/es6.array.copy-within');                                                                           // 17
require('../modules/es6.array.fill');                                                                                  // 18
require('../modules/es6.array.find');                                                                                  // 19
require('../modules/es6.array.find-index');                                                                            // 20
require('../modules/es6.array.species');                                                                               // 21
require('../modules/es6.array.iterator');                                                                              // 22
module.exports = require('../modules/_core').Array;                                                                    // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"function.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/es6/function.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es6.function.bind');                                                                               // 1
require('../modules/es6.function.name');                                                                               // 2
require('../modules/es6.function.has-instance');                                                                       // 3
module.exports = require('../modules/_core').Function;                                                                 // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"math.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/es6/math.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es6.math.acosh');                                                                                  // 1
require('../modules/es6.math.asinh');                                                                                  // 2
require('../modules/es6.math.atanh');                                                                                  // 3
require('../modules/es6.math.cbrt');                                                                                   // 4
require('../modules/es6.math.clz32');                                                                                  // 5
require('../modules/es6.math.cosh');                                                                                   // 6
require('../modules/es6.math.expm1');                                                                                  // 7
require('../modules/es6.math.fround');                                                                                 // 8
require('../modules/es6.math.hypot');                                                                                  // 9
require('../modules/es6.math.imul');                                                                                   // 10
require('../modules/es6.math.log10');                                                                                  // 11
require('../modules/es6.math.log1p');                                                                                  // 12
require('../modules/es6.math.log2');                                                                                   // 13
require('../modules/es6.math.sign');                                                                                   // 14
require('../modules/es6.math.sinh');                                                                                   // 15
require('../modules/es6.math.tanh');                                                                                   // 16
require('../modules/es6.math.trunc');                                                                                  // 17
module.exports = require('../modules/_core').Math;                                                                     // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"object.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/es6/object.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es6.symbol');                                                                                      // 1
require('../modules/es6.object.create');                                                                               // 2
require('../modules/es6.object.define-property');                                                                      // 3
require('../modules/es6.object.define-properties');                                                                    // 4
require('../modules/es6.object.get-own-property-descriptor');                                                          // 5
require('../modules/es6.object.get-prototype-of');                                                                     // 6
require('../modules/es6.object.keys');                                                                                 // 7
require('../modules/es6.object.get-own-property-names');                                                               // 8
require('../modules/es6.object.freeze');                                                                               // 9
require('../modules/es6.object.seal');                                                                                 // 10
require('../modules/es6.object.prevent-extensions');                                                                   // 11
require('../modules/es6.object.is-frozen');                                                                            // 12
require('../modules/es6.object.is-sealed');                                                                            // 13
require('../modules/es6.object.is-extensible');                                                                        // 14
require('../modules/es6.object.assign');                                                                               // 15
require('../modules/es6.object.is');                                                                                   // 16
require('../modules/es6.object.set-prototype-of');                                                                     // 17
require('../modules/es6.object.to-string');                                                                            // 18
                                                                                                                       // 19
module.exports = require('../modules/_core').Object;                                                                   // 20
                                                                                                                       // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"regexp.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/es6/regexp.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es6.regexp.constructor');                                                                          // 1
require('../modules/es6.regexp.to-string');                                                                            // 2
require('../modules/es6.regexp.flags');                                                                                // 3
require('../modules/es6.regexp.match');                                                                                // 4
require('../modules/es6.regexp.replace');                                                                              // 5
require('../modules/es6.regexp.search');                                                                               // 6
require('../modules/es6.regexp.split');                                                                                // 7
module.exports = require('../modules/_core').RegExp;                                                                   // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"string.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/es6/string.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es6.string.from-code-point');                                                                      // 1
require('../modules/es6.string.raw');                                                                                  // 2
require('../modules/es6.string.trim');                                                                                 // 3
require('../modules/es6.string.iterator');                                                                             // 4
require('../modules/es6.string.code-point-at');                                                                        // 5
require('../modules/es6.string.ends-with');                                                                            // 6
require('../modules/es6.string.includes');                                                                             // 7
require('../modules/es6.string.repeat');                                                                               // 8
require('../modules/es6.string.starts-with');                                                                          // 9
require('../modules/es6.string.anchor');                                                                               // 10
require('../modules/es6.string.big');                                                                                  // 11
require('../modules/es6.string.blink');                                                                                // 12
require('../modules/es6.string.bold');                                                                                 // 13
require('../modules/es6.string.fixed');                                                                                // 14
require('../modules/es6.string.fontcolor');                                                                            // 15
require('../modules/es6.string.fontsize');                                                                             // 16
require('../modules/es6.string.italics');                                                                              // 17
require('../modules/es6.string.link');                                                                                 // 18
require('../modules/es6.string.small');                                                                                // 19
require('../modules/es6.string.strike');                                                                               // 20
require('../modules/es6.string.sub');                                                                                  // 21
require('../modules/es6.string.sup');                                                                                  // 22
require('../modules/es6.regexp.match');                                                                                // 23
require('../modules/es6.regexp.replace');                                                                              // 24
require('../modules/es6.regexp.search');                                                                               // 25
require('../modules/es6.regexp.split');                                                                                // 26
module.exports = require('../modules/_core').String;                                                                   // 27
                                                                                                                       // 28
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"weak-map.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/es6/weak-map.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es6.object.to-string');                                                                            // 1
require('../modules/es6.array.iterator');                                                                              // 2
require('../modules/es6.weak-map');                                                                                    // 3
module.exports = require('../modules/_core').WeakMap;                                                                  // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"weak-set.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/es6/weak-set.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es6.object.to-string');                                                                            // 1
require('../modules/web.dom.iterable');                                                                                // 2
require('../modules/es6.weak-set');                                                                                    // 3
module.exports = require('../modules/_core').WeakSet;                                                                  // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"es7":{"array.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/es7/array.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es7.array.includes');                                                                              // 1
require('../modules/es7.array.flat-map');                                                                              // 2
require('../modules/es7.array.flatten');                                                                               // 3
module.exports = require('../modules/_core').Array;                                                                    // 4
                                                                                                                       // 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"object.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/core-js/es7/object.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require('../modules/es7.object.get-own-property-descriptors');                                                         // 1
require('../modules/es7.object.values');                                                                               // 2
require('../modules/es7.object.entries');                                                                              // 3
require('../modules/es7.object.define-getter');                                                                        // 4
require('../modules/es7.object.define-setter');                                                                        // 5
require('../modules/es7.object.lookup-getter');                                                                        // 6
require('../modules/es7.object.lookup-setter');                                                                        // 7
module.exports = require('../modules/_core').Object;                                                                   // 8
                                                                                                                       // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"meteor-node-stubs":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/package.json                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "meteor-node-stubs";                                                                                    // 1
exports.version = "0.3.2";                                                                                             // 2
exports.main = "index.js";                                                                                             // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/index.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var map = require("./map.json");                                                                                       // 1
var meteorAliases = {};                                                                                                // 2
                                                                                                                       // 3
Object.keys(map).forEach(function (id) {                                                                               // 4
  if (typeof map[id] === "string") {                                                                                   // 5
    var aliasParts = module.id.split("/");                                                                             // 6
    aliasParts.pop();                                                                                                  // 7
    aliasParts.push("node_modules", map[id]);                                                                          // 8
    exports[id] = meteorAliases[id + ".js"] =                                                                          // 9
      aliasParts.join("/");                                                                                            // 10
  } else {                                                                                                             // 11
    exports[id] = map[id];                                                                                             // 12
    meteorAliases[id + ".js"] = function(){};                                                                          // 13
  }                                                                                                                    // 14
});                                                                                                                    // 15
                                                                                                                       // 16
if (typeof meteorInstall === "function") {                                                                             // 17
  meteorInstall({                                                                                                      // 18
    // Install the aliases into a node_modules directory one level up from                                             // 19
    // the root directory, so that they do not clutter the namespace                                                   // 20
    // available to apps and packages.                                                                                 // 21
    "..": {                                                                                                            // 22
      node_modules: meteorAliases                                                                                      // 23
    }                                                                                                                  // 24
  });                                                                                                                  // 25
}                                                                                                                      // 26
                                                                                                                       // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"map.json":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/map.json                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = {                                                                                                     // 1
  "assert": "assert/",                                                                                                 // 2
  "buffer": "buffer/",                                                                                                 // 3
  "child_process": null,                                                                                               // 4
  "cluster": null,                                                                                                     // 5
  "console": "console-browserify",                                                                                     // 6
  "constants": "constants-browserify",                                                                                 // 7
  "crypto": "../wrappers/crypto.js",                                                                                   // 8
  "dgram": null,                                                                                                       // 9
  "dns": null,                                                                                                         // 10
  "domain": "domain-browser",                                                                                          // 11
  "events": "events/",                                                                                                 // 12
  "fs": null,                                                                                                          // 13
  "http": "http-browserify",                                                                                           // 14
  "https": "https-browserify",                                                                                         // 15
  "module": "../wrappers/module.js",                                                                                   // 16
  "net": null,                                                                                                         // 17
  "os": "os-browserify/browser.js",                                                                                    // 18
  "path": "path-browserify",                                                                                           // 19
  "process": "process/browser.js",                                                                                     // 20
  "punycode": "punycode/",                                                                                             // 21
  "querystring": "querystring-es3/",                                                                                   // 22
  "readline": null,                                                                                                    // 23
  "repl": null,                                                                                                        // 24
  "stream": "stream-browserify",                                                                                       // 25
  "_stream_duplex": "readable-stream/duplex.js",                                                                       // 26
  "_stream_passthrough": "readable-stream/passthrough.js",                                                             // 27
  "_stream_readable": "readable-stream/readable.js",                                                                   // 28
  "_stream_transform": "readable-stream/transform.js",                                                                 // 29
  "_stream_writable": "readable-stream/writable.js",                                                                   // 30
  "string_decoder": "string_decoder/",                                                                                 // 31
  "sys": "util/util.js",                                                                                               // 32
  "timers": "timers-browserify",                                                                                       // 33
  "tls": null,                                                                                                         // 34
  "tty": "tty-browserify",                                                                                             // 35
  "url": "url/",                                                                                                       // 36
  "util": "util/util.js",                                                                                              // 37
  "vm": "vm-browserify",                                                                                               // 38
  "zlib": "browserify-zlib"                                                                                            // 39
};                                                                                                                     // 40
                                                                                                                       // 41
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deps":{"process.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/deps/process.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("process/browser.js");                                                                                         // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"domain.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/deps/domain.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
require("domain-browser");                                                                                             // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"node_modules":{"process":{"browser.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/process/browser.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// shim for using process in browser                                                                                   // 1
var process = module.exports = {};                                                                                     // 2
                                                                                                                       // 3
// cached from whatever global is present so that test runners that stub it                                            // 4
// don't break things.  But we need to wrap it in a try catch in case it is                                            // 5
// wrapped in strict mode code which doesn't define any globals.  It's inside a                                        // 6
// function because try/catches deoptimize in certain engines.                                                         // 7
                                                                                                                       // 8
var cachedSetTimeout;                                                                                                  // 9
var cachedClearTimeout;                                                                                                // 10
                                                                                                                       // 11
function defaultSetTimout() {                                                                                          // 12
    throw new Error('setTimeout has not been defined');                                                                // 13
}                                                                                                                      // 14
function defaultClearTimeout () {                                                                                      // 15
    throw new Error('clearTimeout has not been defined');                                                              // 16
}                                                                                                                      // 17
(function () {                                                                                                         // 18
    try {                                                                                                              // 19
        if (typeof setTimeout === 'function') {                                                                        // 20
            cachedSetTimeout = setTimeout;                                                                             // 21
        } else {                                                                                                       // 22
            cachedSetTimeout = defaultSetTimout;                                                                       // 23
        }                                                                                                              // 24
    } catch (e) {                                                                                                      // 25
        cachedSetTimeout = defaultSetTimout;                                                                           // 26
    }                                                                                                                  // 27
    try {                                                                                                              // 28
        if (typeof clearTimeout === 'function') {                                                                      // 29
            cachedClearTimeout = clearTimeout;                                                                         // 30
        } else {                                                                                                       // 31
            cachedClearTimeout = defaultClearTimeout;                                                                  // 32
        }                                                                                                              // 33
    } catch (e) {                                                                                                      // 34
        cachedClearTimeout = defaultClearTimeout;                                                                      // 35
    }                                                                                                                  // 36
} ())                                                                                                                  // 37
function runTimeout(fun) {                                                                                             // 38
    if (cachedSetTimeout === setTimeout) {                                                                             // 39
        //normal enviroments in sane situations                                                                        // 40
        return setTimeout(fun, 0);                                                                                     // 41
    }                                                                                                                  // 42
    // if setTimeout wasn't available but was latter defined                                                           // 43
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {                                  // 44
        cachedSetTimeout = setTimeout;                                                                                 // 45
        return setTimeout(fun, 0);                                                                                     // 46
    }                                                                                                                  // 47
    try {                                                                                                              // 48
        // when when somebody has screwed with setTimeout but no I.E. maddness                                         // 49
        return cachedSetTimeout(fun, 0);                                                                               // 50
    } catch(e){                                                                                                        // 51
        try {                                                                                                          // 52
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);                                                                // 54
        } catch(e){                                                                                                    // 55
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);                                                                // 57
        }                                                                                                              // 58
    }                                                                                                                  // 59
                                                                                                                       // 60
                                                                                                                       // 61
}                                                                                                                      // 62
function runClearTimeout(marker) {                                                                                     // 63
    if (cachedClearTimeout === clearTimeout) {                                                                         // 64
        //normal enviroments in sane situations                                                                        // 65
        return clearTimeout(marker);                                                                                   // 66
    }                                                                                                                  // 67
    // if clearTimeout wasn't available but was latter defined                                                         // 68
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {                         // 69
        cachedClearTimeout = clearTimeout;                                                                             // 70
        return clearTimeout(marker);                                                                                   // 71
    }                                                                                                                  // 72
    try {                                                                                                              // 73
        // when when somebody has screwed with setTimeout but no I.E. maddness                                         // 74
        return cachedClearTimeout(marker);                                                                             // 75
    } catch (e){                                                                                                       // 76
        try {                                                                                                          // 77
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);                                                              // 79
        } catch (e){                                                                                                   // 80
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout                               // 82
            return cachedClearTimeout.call(this, marker);                                                              // 83
        }                                                                                                              // 84
    }                                                                                                                  // 85
                                                                                                                       // 86
                                                                                                                       // 87
                                                                                                                       // 88
}                                                                                                                      // 89
var queue = [];                                                                                                        // 90
var draining = false;                                                                                                  // 91
var currentQueue;                                                                                                      // 92
var queueIndex = -1;                                                                                                   // 93
                                                                                                                       // 94
function cleanUpNextTick() {                                                                                           // 95
    if (!draining || !currentQueue) {                                                                                  // 96
        return;                                                                                                        // 97
    }                                                                                                                  // 98
    draining = false;                                                                                                  // 99
    if (currentQueue.length) {                                                                                         // 100
        queue = currentQueue.concat(queue);                                                                            // 101
    } else {                                                                                                           // 102
        queueIndex = -1;                                                                                               // 103
    }                                                                                                                  // 104
    if (queue.length) {                                                                                                // 105
        drainQueue();                                                                                                  // 106
    }                                                                                                                  // 107
}                                                                                                                      // 108
                                                                                                                       // 109
function drainQueue() {                                                                                                // 110
    if (draining) {                                                                                                    // 111
        return;                                                                                                        // 112
    }                                                                                                                  // 113
    var timeout = runTimeout(cleanUpNextTick);                                                                         // 114
    draining = true;                                                                                                   // 115
                                                                                                                       // 116
    var len = queue.length;                                                                                            // 117
    while(len) {                                                                                                       // 118
        currentQueue = queue;                                                                                          // 119
        queue = [];                                                                                                    // 120
        while (++queueIndex < len) {                                                                                   // 121
            if (currentQueue) {                                                                                        // 122
                currentQueue[queueIndex].run();                                                                        // 123
            }                                                                                                          // 124
        }                                                                                                              // 125
        queueIndex = -1;                                                                                               // 126
        len = queue.length;                                                                                            // 127
    }                                                                                                                  // 128
    currentQueue = null;                                                                                               // 129
    draining = false;                                                                                                  // 130
    runClearTimeout(timeout);                                                                                          // 131
}                                                                                                                      // 132
                                                                                                                       // 133
process.nextTick = function (fun) {                                                                                    // 134
    var args = new Array(arguments.length - 1);                                                                        // 135
    if (arguments.length > 1) {                                                                                        // 136
        for (var i = 1; i < arguments.length; i++) {                                                                   // 137
            args[i - 1] = arguments[i];                                                                                // 138
        }                                                                                                              // 139
    }                                                                                                                  // 140
    queue.push(new Item(fun, args));                                                                                   // 141
    if (queue.length === 1 && !draining) {                                                                             // 142
        runTimeout(drainQueue);                                                                                        // 143
    }                                                                                                                  // 144
};                                                                                                                     // 145
                                                                                                                       // 146
// v8 likes predictible objects                                                                                        // 147
function Item(fun, array) {                                                                                            // 148
    this.fun = fun;                                                                                                    // 149
    this.array = array;                                                                                                // 150
}                                                                                                                      // 151
Item.prototype.run = function () {                                                                                     // 152
    this.fun.apply(null, this.array);                                                                                  // 153
};                                                                                                                     // 154
process.title = 'browser';                                                                                             // 155
process.browser = true;                                                                                                // 156
process.env = {};                                                                                                      // 157
process.argv = [];                                                                                                     // 158
process.version = ''; // empty string to avoid regexp issues                                                           // 159
process.versions = {};                                                                                                 // 160
                                                                                                                       // 161
function noop() {}                                                                                                     // 162
                                                                                                                       // 163
process.on = noop;                                                                                                     // 164
process.addListener = noop;                                                                                            // 165
process.once = noop;                                                                                                   // 166
process.off = noop;                                                                                                    // 167
process.removeListener = noop;                                                                                         // 168
process.removeAllListeners = noop;                                                                                     // 169
process.emit = noop;                                                                                                   // 170
process.prependListener = noop;                                                                                        // 171
process.prependOnceListener = noop;                                                                                    // 172
                                                                                                                       // 173
process.listeners = function (name) { return [] }                                                                      // 174
                                                                                                                       // 175
process.binding = function (name) {                                                                                    // 176
    throw new Error('process.binding is not supported');                                                               // 177
};                                                                                                                     // 178
                                                                                                                       // 179
process.cwd = function () { return '/' };                                                                              // 180
process.chdir = function (dir) {                                                                                       // 181
    throw new Error('process.chdir is not supported');                                                                 // 182
};                                                                                                                     // 183
process.umask = function() { return 0; };                                                                              // 184
                                                                                                                       // 185
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"domain-browser":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/domain-browser/package.json                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "domain-browser";                                                                                       // 1
exports.version = "1.1.7";                                                                                             // 2
exports.main = "./index.js";                                                                                           // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/domain-browser/index.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// This file should be ES5 compatible                                                                                  // 1
/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */                                           // 2
'use strict'                                                                                                           // 3
module.exports = (function () {                                                                                        // 4
	// Import Events                                                                                                      // 5
	var events = require('events')                                                                                        // 6
                                                                                                                       // 7
	// Export Domain                                                                                                      // 8
	var domain = {}                                                                                                       // 9
	domain.createDomain = domain.create = function () {                                                                   // 10
		var d = new events.EventEmitter()                                                                                    // 11
                                                                                                                       // 12
		function emitError (e) {                                                                                             // 13
			d.emit('error', e)                                                                                                  // 14
		}                                                                                                                    // 15
                                                                                                                       // 16
		d.add = function (emitter) {                                                                                         // 17
			emitter.on('error', emitError)                                                                                      // 18
		}                                                                                                                    // 19
		d.remove = function (emitter) {                                                                                      // 20
			emitter.removeListener('error', emitError)                                                                          // 21
		}                                                                                                                    // 22
		d.bind = function (fn) {                                                                                             // 23
			return function () {                                                                                                // 24
				var args = Array.prototype.slice.call(arguments)                                                                   // 25
				try {                                                                                                              // 26
					fn.apply(null, args)                                                                                              // 27
				}                                                                                                                  // 28
				catch (err) {                                                                                                      // 29
					emitError(err)                                                                                                    // 30
				}                                                                                                                  // 31
			}                                                                                                                   // 32
		}                                                                                                                    // 33
		d.intercept = function (fn) {                                                                                        // 34
			return function (err) {                                                                                             // 35
				if ( err ) {                                                                                                       // 36
					emitError(err)                                                                                                    // 37
				}                                                                                                                  // 38
				else {                                                                                                             // 39
					var args = Array.prototype.slice.call(arguments, 1)                                                               // 40
					try {                                                                                                             // 41
						fn.apply(null, args)                                                                                             // 42
					}                                                                                                                 // 43
					catch (err) {                                                                                                     // 44
						emitError(err)                                                                                                   // 45
					}                                                                                                                 // 46
				}                                                                                                                  // 47
			}                                                                                                                   // 48
		}                                                                                                                    // 49
		d.run = function (fn) {                                                                                              // 50
			try {                                                                                                               // 51
				fn()                                                                                                               // 52
			}                                                                                                                   // 53
			catch (err) {                                                                                                       // 54
				emitError(err)                                                                                                     // 55
			}                                                                                                                   // 56
			return this                                                                                                         // 57
		}                                                                                                                    // 58
		d.dispose = function () {                                                                                            // 59
			this.removeAllListeners()                                                                                           // 60
			return this                                                                                                         // 61
		}                                                                                                                    // 62
		d.enter = d.exit = function () {                                                                                     // 63
			return this                                                                                                         // 64
		}                                                                                                                    // 65
		return d                                                                                                             // 66
	}                                                                                                                     // 67
	return domain                                                                                                         // 68
}).call(this)                                                                                                          // 69
                                                                                                                       // 70
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"events":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/events/package.json                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "events";                                                                                               // 1
exports.version = "1.1.1";                                                                                             // 2
exports.main = "./events.js";                                                                                          // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"events.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor-node-stubs/node_modules/events/events.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Copyright Joyent, Inc. and other Node contributors.                                                                 // 1
//                                                                                                                     // 2
// Permission is hereby granted, free of charge, to any person obtaining a                                             // 3
// copy of this software and associated documentation files (the                                                       // 4
// "Software"), to deal in the Software without restriction, including                                                 // 5
// without limitation the rights to use, copy, modify, merge, publish,                                                 // 6
// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 7
// persons to whom the Software is furnished to do so, subject to the                                                  // 8
// following conditions:                                                                                               // 9
//                                                                                                                     // 10
// The above copyright notice and this permission notice shall be included                                             // 11
// in all copies or substantial portions of the Software.                                                              // 12
//                                                                                                                     // 13
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 14
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 15
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 16
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 17
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 18
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 19
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 20
                                                                                                                       // 21
function EventEmitter() {                                                                                              // 22
  this._events = this._events || {};                                                                                   // 23
  this._maxListeners = this._maxListeners || undefined;                                                                // 24
}                                                                                                                      // 25
module.exports = EventEmitter;                                                                                         // 26
                                                                                                                       // 27
// Backwards-compat with node 0.10.x                                                                                   // 28
EventEmitter.EventEmitter = EventEmitter;                                                                              // 29
                                                                                                                       // 30
EventEmitter.prototype._events = undefined;                                                                            // 31
EventEmitter.prototype._maxListeners = undefined;                                                                      // 32
                                                                                                                       // 33
// By default EventEmitters will print a warning if more than 10 listeners are                                         // 34
// added to it. This is a useful default which helps finding memory leaks.                                             // 35
EventEmitter.defaultMaxListeners = 10;                                                                                 // 36
                                                                                                                       // 37
// Obviously not all Emitters should be limited to 10. This function allows                                            // 38
// that to be increased. Set to zero for unlimited.                                                                    // 39
EventEmitter.prototype.setMaxListeners = function(n) {                                                                 // 40
  if (!isNumber(n) || n < 0 || isNaN(n))                                                                               // 41
    throw TypeError('n must be a positive number');                                                                    // 42
  this._maxListeners = n;                                                                                              // 43
  return this;                                                                                                         // 44
};                                                                                                                     // 45
                                                                                                                       // 46
EventEmitter.prototype.emit = function(type) {                                                                         // 47
  var er, handler, len, args, i, listeners;                                                                            // 48
                                                                                                                       // 49
  if (!this._events)                                                                                                   // 50
    this._events = {};                                                                                                 // 51
                                                                                                                       // 52
  // If there is no 'error' event listener then throw.                                                                 // 53
  if (type === 'error') {                                                                                              // 54
    if (!this._events.error ||                                                                                         // 55
        (isObject(this._events.error) && !this._events.error.length)) {                                                // 56
      er = arguments[1];                                                                                               // 57
      if (er instanceof Error) {                                                                                       // 58
        throw er; // Unhandled 'error' event                                                                           // 59
      } else {                                                                                                         // 60
        // At least give some kind of context to the user                                                              // 61
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');                                      // 62
        err.context = er;                                                                                              // 63
        throw err;                                                                                                     // 64
      }                                                                                                                // 65
    }                                                                                                                  // 66
  }                                                                                                                    // 67
                                                                                                                       // 68
  handler = this._events[type];                                                                                        // 69
                                                                                                                       // 70
  if (isUndefined(handler))                                                                                            // 71
    return false;                                                                                                      // 72
                                                                                                                       // 73
  if (isFunction(handler)) {                                                                                           // 74
    switch (arguments.length) {                                                                                        // 75
      // fast cases                                                                                                    // 76
      case 1:                                                                                                          // 77
        handler.call(this);                                                                                            // 78
        break;                                                                                                         // 79
      case 2:                                                                                                          // 80
        handler.call(this, arguments[1]);                                                                              // 81
        break;                                                                                                         // 82
      case 3:                                                                                                          // 83
        handler.call(this, arguments[1], arguments[2]);                                                                // 84
        break;                                                                                                         // 85
      // slower                                                                                                        // 86
      default:                                                                                                         // 87
        args = Array.prototype.slice.call(arguments, 1);                                                               // 88
        handler.apply(this, args);                                                                                     // 89
    }                                                                                                                  // 90
  } else if (isObject(handler)) {                                                                                      // 91
    args = Array.prototype.slice.call(arguments, 1);                                                                   // 92
    listeners = handler.slice();                                                                                       // 93
    len = listeners.length;                                                                                            // 94
    for (i = 0; i < len; i++)                                                                                          // 95
      listeners[i].apply(this, args);                                                                                  // 96
  }                                                                                                                    // 97
                                                                                                                       // 98
  return true;                                                                                                         // 99
};                                                                                                                     // 100
                                                                                                                       // 101
EventEmitter.prototype.addListener = function(type, listener) {                                                        // 102
  var m;                                                                                                               // 103
                                                                                                                       // 104
  if (!isFunction(listener))                                                                                           // 105
    throw TypeError('listener must be a function');                                                                    // 106
                                                                                                                       // 107
  if (!this._events)                                                                                                   // 108
    this._events = {};                                                                                                 // 109
                                                                                                                       // 110
  // To avoid recursion in the case that type === "newListener"! Before                                                // 111
  // adding it to the listeners, first emit "newListener".                                                             // 112
  if (this._events.newListener)                                                                                        // 113
    this.emit('newListener', type,                                                                                     // 114
              isFunction(listener.listener) ?                                                                          // 115
              listener.listener : listener);                                                                           // 116
                                                                                                                       // 117
  if (!this._events[type])                                                                                             // 118
    // Optimize the case of one listener. Don't need the extra array object.                                           // 119
    this._events[type] = listener;                                                                                     // 120
  else if (isObject(this._events[type]))                                                                               // 121
    // If we've already got an array, just append.                                                                     // 122
    this._events[type].push(listener);                                                                                 // 123
  else                                                                                                                 // 124
    // Adding the second element, need to change to array.                                                             // 125
    this._events[type] = [this._events[type], listener];                                                               // 126
                                                                                                                       // 127
  // Check for listener leak                                                                                           // 128
  if (isObject(this._events[type]) && !this._events[type].warned) {                                                    // 129
    if (!isUndefined(this._maxListeners)) {                                                                            // 130
      m = this._maxListeners;                                                                                          // 131
    } else {                                                                                                           // 132
      m = EventEmitter.defaultMaxListeners;                                                                            // 133
    }                                                                                                                  // 134
                                                                                                                       // 135
    if (m && m > 0 && this._events[type].length > m) {                                                                 // 136
      this._events[type].warned = true;                                                                                // 137
      console.error('(node) warning: possible EventEmitter memory ' +                                                  // 138
                    'leak detected. %d listeners added. ' +                                                            // 139
                    'Use emitter.setMaxListeners() to increase limit.',                                                // 140
                    this._events[type].length);                                                                        // 141
      if (typeof console.trace === 'function') {                                                                       // 142
        // not supported in IE 10                                                                                      // 143
        console.trace();                                                                                               // 144
      }                                                                                                                // 145
    }                                                                                                                  // 146
  }                                                                                                                    // 147
                                                                                                                       // 148
  return this;                                                                                                         // 149
};                                                                                                                     // 150
                                                                                                                       // 151
EventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                        // 152
                                                                                                                       // 153
EventEmitter.prototype.once = function(type, listener) {                                                               // 154
  if (!isFunction(listener))                                                                                           // 155
    throw TypeError('listener must be a function');                                                                    // 156
                                                                                                                       // 157
  var fired = false;                                                                                                   // 158
                                                                                                                       // 159
  function g() {                                                                                                       // 160
    this.removeListener(type, g);                                                                                      // 161
                                                                                                                       // 162
    if (!fired) {                                                                                                      // 163
      fired = true;                                                                                                    // 164
      listener.apply(this, arguments);                                                                                 // 165
    }                                                                                                                  // 166
  }                                                                                                                    // 167
                                                                                                                       // 168
  g.listener = listener;                                                                                               // 169
  this.on(type, g);                                                                                                    // 170
                                                                                                                       // 171
  return this;                                                                                                         // 172
};                                                                                                                     // 173
                                                                                                                       // 174
// emits a 'removeListener' event iff the listener was removed                                                         // 175
EventEmitter.prototype.removeListener = function(type, listener) {                                                     // 176
  var list, position, length, i;                                                                                       // 177
                                                                                                                       // 178
  if (!isFunction(listener))                                                                                           // 179
    throw TypeError('listener must be a function');                                                                    // 180
                                                                                                                       // 181
  if (!this._events || !this._events[type])                                                                            // 182
    return this;                                                                                                       // 183
                                                                                                                       // 184
  list = this._events[type];                                                                                           // 185
  length = list.length;                                                                                                // 186
  position = -1;                                                                                                       // 187
                                                                                                                       // 188
  if (list === listener ||                                                                                             // 189
      (isFunction(list.listener) && list.listener === listener)) {                                                     // 190
    delete this._events[type];                                                                                         // 191
    if (this._events.removeListener)                                                                                   // 192
      this.emit('removeListener', type, listener);                                                                     // 193
                                                                                                                       // 194
  } else if (isObject(list)) {                                                                                         // 195
    for (i = length; i-- > 0;) {                                                                                       // 196
      if (list[i] === listener ||                                                                                      // 197
          (list[i].listener && list[i].listener === listener)) {                                                       // 198
        position = i;                                                                                                  // 199
        break;                                                                                                         // 200
      }                                                                                                                // 201
    }                                                                                                                  // 202
                                                                                                                       // 203
    if (position < 0)                                                                                                  // 204
      return this;                                                                                                     // 205
                                                                                                                       // 206
    if (list.length === 1) {                                                                                           // 207
      list.length = 0;                                                                                                 // 208
      delete this._events[type];                                                                                       // 209
    } else {                                                                                                           // 210
      list.splice(position, 1);                                                                                        // 211
    }                                                                                                                  // 212
                                                                                                                       // 213
    if (this._events.removeListener)                                                                                   // 214
      this.emit('removeListener', type, listener);                                                                     // 215
  }                                                                                                                    // 216
                                                                                                                       // 217
  return this;                                                                                                         // 218
};                                                                                                                     // 219
                                                                                                                       // 220
EventEmitter.prototype.removeAllListeners = function(type) {                                                           // 221
  var key, listeners;                                                                                                  // 222
                                                                                                                       // 223
  if (!this._events)                                                                                                   // 224
    return this;                                                                                                       // 225
                                                                                                                       // 226
  // not listening for removeListener, no need to emit                                                                 // 227
  if (!this._events.removeListener) {                                                                                  // 228
    if (arguments.length === 0)                                                                                        // 229
      this._events = {};                                                                                               // 230
    else if (this._events[type])                                                                                       // 231
      delete this._events[type];                                                                                       // 232
    return this;                                                                                                       // 233
  }                                                                                                                    // 234
                                                                                                                       // 235
  // emit removeListener for all listeners on all events                                                               // 236
  if (arguments.length === 0) {                                                                                        // 237
    for (key in this._events) {                                                                                        // 238
      if (key === 'removeListener') continue;                                                                          // 239
      this.removeAllListeners(key);                                                                                    // 240
    }                                                                                                                  // 241
    this.removeAllListeners('removeListener');                                                                         // 242
    this._events = {};                                                                                                 // 243
    return this;                                                                                                       // 244
  }                                                                                                                    // 245
                                                                                                                       // 246
  listeners = this._events[type];                                                                                      // 247
                                                                                                                       // 248
  if (isFunction(listeners)) {                                                                                         // 249
    this.removeListener(type, listeners);                                                                              // 250
  } else if (listeners) {                                                                                              // 251
    // LIFO order                                                                                                      // 252
    while (listeners.length)                                                                                           // 253
      this.removeListener(type, listeners[listeners.length - 1]);                                                      // 254
  }                                                                                                                    // 255
  delete this._events[type];                                                                                           // 256
                                                                                                                       // 257
  return this;                                                                                                         // 258
};                                                                                                                     // 259
                                                                                                                       // 260
EventEmitter.prototype.listeners = function(type) {                                                                    // 261
  var ret;                                                                                                             // 262
  if (!this._events || !this._events[type])                                                                            // 263
    ret = [];                                                                                                          // 264
  else if (isFunction(this._events[type]))                                                                             // 265
    ret = [this._events[type]];                                                                                        // 266
  else                                                                                                                 // 267
    ret = this._events[type].slice();                                                                                  // 268
  return ret;                                                                                                          // 269
};                                                                                                                     // 270
                                                                                                                       // 271
EventEmitter.prototype.listenerCount = function(type) {                                                                // 272
  if (this._events) {                                                                                                  // 273
    var evlistener = this._events[type];                                                                               // 274
                                                                                                                       // 275
    if (isFunction(evlistener))                                                                                        // 276
      return 1;                                                                                                        // 277
    else if (evlistener)                                                                                               // 278
      return evlistener.length;                                                                                        // 279
  }                                                                                                                    // 280
  return 0;                                                                                                            // 281
};                                                                                                                     // 282
                                                                                                                       // 283
EventEmitter.listenerCount = function(emitter, type) {                                                                 // 284
  return emitter.listenerCount(type);                                                                                  // 285
};                                                                                                                     // 286
                                                                                                                       // 287
function isFunction(arg) {                                                                                             // 288
  return typeof arg === 'function';                                                                                    // 289
}                                                                                                                      // 290
                                                                                                                       // 291
function isNumber(arg) {                                                                                               // 292
  return typeof arg === 'number';                                                                                      // 293
}                                                                                                                      // 294
                                                                                                                       // 295
function isObject(arg) {                                                                                               // 296
  return typeof arg === 'object' && arg !== null;                                                                      // 297
}                                                                                                                      // 298
                                                                                                                       // 299
function isUndefined(arg) {                                                                                            // 300
  return arg === void 0;                                                                                               // 301
}                                                                                                                      // 302
                                                                                                                       // 303
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"regenerator-runtime":{"package.json":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/regenerator-runtime/package.json                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "regenerator-runtime";                                                                                  // 1
exports.version = "0.11.1";                                                                                            // 2
exports.main = "runtime-module.js";                                                                                    // 3
                                                                                                                       // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"runtime-module.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/regenerator-runtime/runtime-module.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2014-present, Facebook, Inc.                                                                          // 2
 *                                                                                                                     // 3
 * This source code is licensed under the MIT license found in the                                                     // 4
 * LICENSE file in the root directory of this source tree.                                                             // 5
 */                                                                                                                    // 6
                                                                                                                       // 7
// This method of obtaining a reference to the global object needs to be                                               // 8
// kept identical to the way it is obtained in runtime.js                                                              // 9
var g = (function() { return this })() || Function("return this")();                                                   // 10
                                                                                                                       // 11
// Use `getOwnPropertyNames` because not all browsers support calling                                                  // 12
// `hasOwnProperty` on the global `self` object in a worker. See #183.                                                 // 13
var hadRuntime = g.regeneratorRuntime &&                                                                               // 14
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;                                                    // 15
                                                                                                                       // 16
// Save the old regeneratorRuntime in case it needs to be restored later.                                              // 17
var oldRuntime = hadRuntime && g.regeneratorRuntime;                                                                   // 18
                                                                                                                       // 19
// Force reevalutation of runtime.js.                                                                                  // 20
g.regeneratorRuntime = undefined;                                                                                      // 21
                                                                                                                       // 22
module.exports = require("./runtime");                                                                                 // 23
                                                                                                                       // 24
if (hadRuntime) {                                                                                                      // 25
  // Restore the original runtime.                                                                                     // 26
  g.regeneratorRuntime = oldRuntime;                                                                                   // 27
} else {                                                                                                               // 28
  // Remove the global property added by runtime.js.                                                                   // 29
  try {                                                                                                                // 30
    delete g.regeneratorRuntime;                                                                                       // 31
  } catch(e) {                                                                                                         // 32
    g.regeneratorRuntime = undefined;                                                                                  // 33
  }                                                                                                                    // 34
}                                                                                                                      // 35
                                                                                                                       // 36
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"runtime.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/regenerator-runtime/runtime.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * Copyright (c) 2014-present, Facebook, Inc.                                                                          // 2
 *                                                                                                                     // 3
 * This source code is licensed under the MIT license found in the                                                     // 4
 * LICENSE file in the root directory of this source tree.                                                             // 5
 */                                                                                                                    // 6
                                                                                                                       // 7
!(function(global) {                                                                                                   // 8
  "use strict";                                                                                                        // 9
                                                                                                                       // 10
  var Op = Object.prototype;                                                                                           // 11
  var hasOwn = Op.hasOwnProperty;                                                                                      // 12
  var undefined; // More compressible than void 0.                                                                     // 13
  var $Symbol = typeof Symbol === "function" ? Symbol : {};                                                            // 14
  var iteratorSymbol = $Symbol.iterator || "@@iterator";                                                               // 15
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";                                                // 16
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";                                                      // 17
                                                                                                                       // 18
  var inModule = typeof module === "object";                                                                           // 19
  var runtime = global.regeneratorRuntime;                                                                             // 20
  if (runtime) {                                                                                                       // 21
    if (inModule) {                                                                                                    // 22
      // If regeneratorRuntime is defined globally and we're in a module,                                              // 23
      // make the exports object identical to regeneratorRuntime.                                                      // 24
      module.exports = runtime;                                                                                        // 25
    }                                                                                                                  // 26
    // Don't bother evaluating the rest of this file if the runtime was                                                // 27
    // already defined globally.                                                                                       // 28
    return;                                                                                                            // 29
  }                                                                                                                    // 30
                                                                                                                       // 31
  // Define the runtime globally (as expected by generated code) as either                                             // 32
  // module.exports (if we're in a module) or a new, empty object.                                                     // 33
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};                                                // 34
                                                                                                                       // 35
  function wrap(innerFn, outerFn, self, tryLocsList) {                                                                 // 36
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.          // 37
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;                      // 38
    var generator = Object.create(protoGenerator.prototype);                                                           // 39
    var context = new Context(tryLocsList || []);                                                                      // 40
                                                                                                                       // 41
    // The ._invoke method unifies the implementations of the .next,                                                   // 42
    // .throw, and .return methods.                                                                                    // 43
    generator._invoke = makeInvokeMethod(innerFn, self, context);                                                      // 44
                                                                                                                       // 45
    return generator;                                                                                                  // 46
  }                                                                                                                    // 47
  runtime.wrap = wrap;                                                                                                 // 48
                                                                                                                       // 49
  // Try/catch helper to minimize deoptimizations. Returns a completion                                                // 50
  // record like context.tryEntries[i].completion. This interface could                                                // 51
  // have been (and was previously) designed to take a closure to be                                                   // 52
  // invoked without arguments, but in all the cases we care about we                                                  // 53
  // already have an existing method we want to call, so there's no need                                               // 54
  // to create a new function object. We can even get away with assuming                                               // 55
  // the method takes exactly one argument, since that happens to be true                                              // 56
  // in every case, so we don't have to touch the arguments object. The                                                // 57
  // only additional allocation required is the completion record, which                                               // 58
  // has a stable shape and so hopefully should be cheap to allocate.                                                  // 59
  function tryCatch(fn, obj, arg) {                                                                                    // 60
    try {                                                                                                              // 61
      return { type: "normal", arg: fn.call(obj, arg) };                                                               // 62
    } catch (err) {                                                                                                    // 63
      return { type: "throw", arg: err };                                                                              // 64
    }                                                                                                                  // 65
  }                                                                                                                    // 66
                                                                                                                       // 67
  var GenStateSuspendedStart = "suspendedStart";                                                                       // 68
  var GenStateSuspendedYield = "suspendedYield";                                                                       // 69
  var GenStateExecuting = "executing";                                                                                 // 70
  var GenStateCompleted = "completed";                                                                                 // 71
                                                                                                                       // 72
  // Returning this object from the innerFn has the same effect as                                                     // 73
  // breaking out of the dispatch switch statement.                                                                    // 74
  var ContinueSentinel = {};                                                                                           // 75
                                                                                                                       // 76
  // Dummy constructor functions that we use as the .constructor and                                                   // 77
  // .constructor.prototype properties for functions that return Generator                                             // 78
  // objects. For full spec compliance, you may wish to configure your                                                 // 79
  // minifier not to mangle the names of these two functions.                                                          // 80
  function Generator() {}                                                                                              // 81
  function GeneratorFunction() {}                                                                                      // 82
  function GeneratorFunctionPrototype() {}                                                                             // 83
                                                                                                                       // 84
  // This is a polyfill for %IteratorPrototype% for environments that                                                  // 85
  // don't natively support it.                                                                                        // 86
  var IteratorPrototype = {};                                                                                          // 87
  IteratorPrototype[iteratorSymbol] = function () {                                                                    // 88
    return this;                                                                                                       // 89
  };                                                                                                                   // 90
                                                                                                                       // 91
  var getProto = Object.getPrototypeOf;                                                                                // 92
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));                                            // 93
  if (NativeIteratorPrototype &&                                                                                       // 94
      NativeIteratorPrototype !== Op &&                                                                                // 95
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {                                                          // 96
    // This environment has a native %IteratorPrototype%; use it instead                                               // 97
    // of the polyfill.                                                                                                // 98
    IteratorPrototype = NativeIteratorPrototype;                                                                       // 99
  }                                                                                                                    // 100
                                                                                                                       // 101
  var Gp = GeneratorFunctionPrototype.prototype =                                                                      // 102
    Generator.prototype = Object.create(IteratorPrototype);                                                            // 103
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;                                           // 104
  GeneratorFunctionPrototype.constructor = GeneratorFunction;                                                          // 105
  GeneratorFunctionPrototype[toStringTagSymbol] =                                                                      // 106
    GeneratorFunction.displayName = "GeneratorFunction";                                                               // 107
                                                                                                                       // 108
  // Helper for defining the .next, .throw, and .return methods of the                                                 // 109
  // Iterator interface in terms of a single ._invoke method.                                                          // 110
  function defineIteratorMethods(prototype) {                                                                          // 111
    ["next", "throw", "return"].forEach(function(method) {                                                             // 112
      prototype[method] = function(arg) {                                                                              // 113
        return this._invoke(method, arg);                                                                              // 114
      };                                                                                                               // 115
    });                                                                                                                // 116
  }                                                                                                                    // 117
                                                                                                                       // 118
  runtime.isGeneratorFunction = function(genFun) {                                                                     // 119
    var ctor = typeof genFun === "function" && genFun.constructor;                                                     // 120
    return ctor                                                                                                        // 121
      ? ctor === GeneratorFunction ||                                                                                  // 122
        // For the native GeneratorFunction constructor, the best we can                                               // 123
        // do is to check its .name property.                                                                          // 124
        (ctor.displayName || ctor.name) === "GeneratorFunction"                                                        // 125
      : false;                                                                                                         // 126
  };                                                                                                                   // 127
                                                                                                                       // 128
  runtime.mark = function(genFun) {                                                                                    // 129
    if (Object.setPrototypeOf) {                                                                                       // 130
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);                                                       // 131
    } else {                                                                                                           // 132
      genFun.__proto__ = GeneratorFunctionPrototype;                                                                   // 133
      if (!(toStringTagSymbol in genFun)) {                                                                            // 134
        genFun[toStringTagSymbol] = "GeneratorFunction";                                                               // 135
      }                                                                                                                // 136
    }                                                                                                                  // 137
    genFun.prototype = Object.create(Gp);                                                                              // 138
    return genFun;                                                                                                     // 139
  };                                                                                                                   // 140
                                                                                                                       // 141
  // Within the body of any async function, `await x` is transformed to                                                // 142
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test                                                 // 143
  // `hasOwn.call(value, "__await")` to determine if the yielded value is                                              // 144
  // meant to be awaited.                                                                                              // 145
  runtime.awrap = function(arg) {                                                                                      // 146
    return { __await: arg };                                                                                           // 147
  };                                                                                                                   // 148
                                                                                                                       // 149
  function AsyncIterator(generator) {                                                                                  // 150
    function invoke(method, arg, resolve, reject) {                                                                    // 151
      var record = tryCatch(generator[method], generator, arg);                                                        // 152
      if (record.type === "throw") {                                                                                   // 153
        reject(record.arg);                                                                                            // 154
      } else {                                                                                                         // 155
        var result = record.arg;                                                                                       // 156
        var value = result.value;                                                                                      // 157
        if (value &&                                                                                                   // 158
            typeof value === "object" &&                                                                               // 159
            hasOwn.call(value, "__await")) {                                                                           // 160
          return Promise.resolve(value.__await).then(function(value) {                                                 // 161
            invoke("next", value, resolve, reject);                                                                    // 162
          }, function(err) {                                                                                           // 163
            invoke("throw", err, resolve, reject);                                                                     // 164
          });                                                                                                          // 165
        }                                                                                                              // 166
                                                                                                                       // 167
        return Promise.resolve(value).then(function(unwrapped) {                                                       // 168
          // When a yielded Promise is resolved, its final value becomes                                               // 169
          // the .value of the Promise<{value,done}> result for the                                                    // 170
          // current iteration. If the Promise is rejected, however, the                                               // 171
          // result for this iteration will be rejected with the same                                                  // 172
          // reason. Note that rejections of yielded Promises are not                                                  // 173
          // thrown back into the generator function, as is the case                                                   // 174
          // when an awaited Promise is rejected. This difference in                                                   // 175
          // behavior between yield and await is important, because it                                                 // 176
          // allows the consumer to decide what to do with the yielded                                                 // 177
          // rejection (swallow it and continue, manually .throw it back                                               // 178
          // into the generator, abandon iteration, whatever). With                                                    // 179
          // await, by contrast, there is no opportunity to examine the                                                // 180
          // rejection reason outside the generator function, so the                                                   // 181
          // only option is to throw it from the await expression, and                                                 // 182
          // let the generator function handle the exception.                                                          // 183
          result.value = unwrapped;                                                                                    // 184
          resolve(result);                                                                                             // 185
        }, reject);                                                                                                    // 186
      }                                                                                                                // 187
    }                                                                                                                  // 188
                                                                                                                       // 189
    var previousPromise;                                                                                               // 190
                                                                                                                       // 191
    function enqueue(method, arg) {                                                                                    // 192
      function callInvokeWithMethodAndArg() {                                                                          // 193
        return new Promise(function(resolve, reject) {                                                                 // 194
          invoke(method, arg, resolve, reject);                                                                        // 195
        });                                                                                                            // 196
      }                                                                                                                // 197
                                                                                                                       // 198
      return previousPromise =                                                                                         // 199
        // If enqueue has been called before, then we want to wait until                                               // 200
        // all previous Promises have been resolved before calling invoke,                                             // 201
        // so that results are always delivered in the correct order. If                                               // 202
        // enqueue has not been called before, then it is important to                                                 // 203
        // call invoke immediately, without waiting on a callback to fire,                                             // 204
        // so that the async generator function has the opportunity to do                                              // 205
        // any necessary setup in a predictable way. This predictability                                               // 206
        // is why the Promise constructor synchronously invokes its                                                    // 207
        // executor callback, and why async functions synchronously                                                    // 208
        // execute code before the first await. Since we implement simple                                              // 209
        // async functions in terms of async generators, it is especially                                              // 210
        // important to get this right, even though it requires care.                                                  // 211
        previousPromise ? previousPromise.then(                                                                        // 212
          callInvokeWithMethodAndArg,                                                                                  // 213
          // Avoid propagating failures to Promises returned by later                                                  // 214
          // invocations of the iterator.                                                                              // 215
          callInvokeWithMethodAndArg                                                                                   // 216
        ) : callInvokeWithMethodAndArg();                                                                              // 217
    }                                                                                                                  // 218
                                                                                                                       // 219
    // Define the unified helper method that is used to implement .next,                                               // 220
    // .throw, and .return (see defineIteratorMethods).                                                                // 221
    this._invoke = enqueue;                                                                                            // 222
  }                                                                                                                    // 223
                                                                                                                       // 224
  defineIteratorMethods(AsyncIterator.prototype);                                                                      // 225
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {                                                         // 226
    return this;                                                                                                       // 227
  };                                                                                                                   // 228
  runtime.AsyncIterator = AsyncIterator;                                                                               // 229
                                                                                                                       // 230
  // Note that simple async functions are implemented on top of                                                        // 231
  // AsyncIterator objects; they just return a Promise for the value of                                                // 232
  // the final result produced by the iterator.                                                                        // 233
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {                                                      // 234
    var iter = new AsyncIterator(                                                                                      // 235
      wrap(innerFn, outerFn, self, tryLocsList)                                                                        // 236
    );                                                                                                                 // 237
                                                                                                                       // 238
    return runtime.isGeneratorFunction(outerFn)                                                                        // 239
      ? iter // If outerFn is a generator, return the full iterator.                                                   // 240
      : iter.next().then(function(result) {                                                                            // 241
          return result.done ? result.value : iter.next();                                                             // 242
        });                                                                                                            // 243
  };                                                                                                                   // 244
                                                                                                                       // 245
  function makeInvokeMethod(innerFn, self, context) {                                                                  // 246
    var state = GenStateSuspendedStart;                                                                                // 247
                                                                                                                       // 248
    return function invoke(method, arg) {                                                                              // 249
      if (state === GenStateExecuting) {                                                                               // 250
        throw new Error("Generator is already running");                                                               // 251
      }                                                                                                                // 252
                                                                                                                       // 253
      if (state === GenStateCompleted) {                                                                               // 254
        if (method === "throw") {                                                                                      // 255
          throw arg;                                                                                                   // 256
        }                                                                                                              // 257
                                                                                                                       // 258
        // Be forgiving, per 25.3.3.3.3 of the spec:                                                                   // 259
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume                                   // 260
        return doneResult();                                                                                           // 261
      }                                                                                                                // 262
                                                                                                                       // 263
      context.method = method;                                                                                         // 264
      context.arg = arg;                                                                                               // 265
                                                                                                                       // 266
      while (true) {                                                                                                   // 267
        var delegate = context.delegate;                                                                               // 268
        if (delegate) {                                                                                                // 269
          var delegateResult = maybeInvokeDelegate(delegate, context);                                                 // 270
          if (delegateResult) {                                                                                        // 271
            if (delegateResult === ContinueSentinel) continue;                                                         // 272
            return delegateResult;                                                                                     // 273
          }                                                                                                            // 274
        }                                                                                                              // 275
                                                                                                                       // 276
        if (context.method === "next") {                                                                               // 277
          // Setting context._sent for legacy support of Babel's                                                       // 278
          // function.sent implementation.                                                                             // 279
          context.sent = context._sent = context.arg;                                                                  // 280
                                                                                                                       // 281
        } else if (context.method === "throw") {                                                                       // 282
          if (state === GenStateSuspendedStart) {                                                                      // 283
            state = GenStateCompleted;                                                                                 // 284
            throw context.arg;                                                                                         // 285
          }                                                                                                            // 286
                                                                                                                       // 287
          context.dispatchException(context.arg);                                                                      // 288
                                                                                                                       // 289
        } else if (context.method === "return") {                                                                      // 290
          context.abrupt("return", context.arg);                                                                       // 291
        }                                                                                                              // 292
                                                                                                                       // 293
        state = GenStateExecuting;                                                                                     // 294
                                                                                                                       // 295
        var record = tryCatch(innerFn, self, context);                                                                 // 296
        if (record.type === "normal") {                                                                                // 297
          // If an exception is thrown from innerFn, we leave state ===                                                // 298
          // GenStateExecuting and loop back for another invocation.                                                   // 299
          state = context.done                                                                                         // 300
            ? GenStateCompleted                                                                                        // 301
            : GenStateSuspendedYield;                                                                                  // 302
                                                                                                                       // 303
          if (record.arg === ContinueSentinel) {                                                                       // 304
            continue;                                                                                                  // 305
          }                                                                                                            // 306
                                                                                                                       // 307
          return {                                                                                                     // 308
            value: record.arg,                                                                                         // 309
            done: context.done                                                                                         // 310
          };                                                                                                           // 311
                                                                                                                       // 312
        } else if (record.type === "throw") {                                                                          // 313
          state = GenStateCompleted;                                                                                   // 314
          // Dispatch the exception by looping back around to the                                                      // 315
          // context.dispatchException(context.arg) call above.                                                        // 316
          context.method = "throw";                                                                                    // 317
          context.arg = record.arg;                                                                                    // 318
        }                                                                                                              // 319
      }                                                                                                                // 320
    };                                                                                                                 // 321
  }                                                                                                                    // 322
                                                                                                                       // 323
  // Call delegate.iterator[context.method](context.arg) and handle the                                                // 324
  // result, either by returning a { value, done } result from the                                                     // 325
  // delegate iterator, or by modifying context.method and context.arg,                                                // 326
  // setting context.delegate to null, and returning the ContinueSentinel.                                             // 327
  function maybeInvokeDelegate(delegate, context) {                                                                    // 328
    var method = delegate.iterator[context.method];                                                                    // 329
    if (method === undefined) {                                                                                        // 330
      // A .throw or .return when the delegate iterator has no .throw                                                  // 331
      // method always terminates the yield* loop.                                                                     // 332
      context.delegate = null;                                                                                         // 333
                                                                                                                       // 334
      if (context.method === "throw") {                                                                                // 335
        if (delegate.iterator.return) {                                                                                // 336
          // If the delegate iterator has a return method, give it a                                                   // 337
          // chance to clean up.                                                                                       // 338
          context.method = "return";                                                                                   // 339
          context.arg = undefined;                                                                                     // 340
          maybeInvokeDelegate(delegate, context);                                                                      // 341
                                                                                                                       // 342
          if (context.method === "throw") {                                                                            // 343
            // If maybeInvokeDelegate(context) changed context.method from                                             // 344
            // "return" to "throw", let that override the TypeError below.                                             // 345
            return ContinueSentinel;                                                                                   // 346
          }                                                                                                            // 347
        }                                                                                                              // 348
                                                                                                                       // 349
        context.method = "throw";                                                                                      // 350
        context.arg = new TypeError(                                                                                   // 351
          "The iterator does not provide a 'throw' method");                                                           // 352
      }                                                                                                                // 353
                                                                                                                       // 354
      return ContinueSentinel;                                                                                         // 355
    }                                                                                                                  // 356
                                                                                                                       // 357
    var record = tryCatch(method, delegate.iterator, context.arg);                                                     // 358
                                                                                                                       // 359
    if (record.type === "throw") {                                                                                     // 360
      context.method = "throw";                                                                                        // 361
      context.arg = record.arg;                                                                                        // 362
      context.delegate = null;                                                                                         // 363
      return ContinueSentinel;                                                                                         // 364
    }                                                                                                                  // 365
                                                                                                                       // 366
    var info = record.arg;                                                                                             // 367
                                                                                                                       // 368
    if (! info) {                                                                                                      // 369
      context.method = "throw";                                                                                        // 370
      context.arg = new TypeError("iterator result is not an object");                                                 // 371
      context.delegate = null;                                                                                         // 372
      return ContinueSentinel;                                                                                         // 373
    }                                                                                                                  // 374
                                                                                                                       // 375
    if (info.done) {                                                                                                   // 376
      // Assign the result of the finished delegate to the temporary                                                   // 377
      // variable specified by delegate.resultName (see delegateYield).                                                // 378
      context[delegate.resultName] = info.value;                                                                       // 379
                                                                                                                       // 380
      // Resume execution at the desired location (see delegateYield).                                                 // 381
      context.next = delegate.nextLoc;                                                                                 // 382
                                                                                                                       // 383
      // If context.method was "throw" but the delegate handled the                                                    // 384
      // exception, let the outer generator proceed normally. If                                                       // 385
      // context.method was "next", forget context.arg since it has been                                               // 386
      // "consumed" by the delegate iterator. If context.method was                                                    // 387
      // "return", allow the original .return call to continue in the                                                  // 388
      // outer generator.                                                                                              // 389
      if (context.method !== "return") {                                                                               // 390
        context.method = "next";                                                                                       // 391
        context.arg = undefined;                                                                                       // 392
      }                                                                                                                // 393
                                                                                                                       // 394
    } else {                                                                                                           // 395
      // Re-yield the result returned by the delegate method.                                                          // 396
      return info;                                                                                                     // 397
    }                                                                                                                  // 398
                                                                                                                       // 399
    // The delegate iterator is finished, so forget it and continue with                                               // 400
    // the outer generator.                                                                                            // 401
    context.delegate = null;                                                                                           // 402
    return ContinueSentinel;                                                                                           // 403
  }                                                                                                                    // 404
                                                                                                                       // 405
  // Define Generator.prototype.{next,throw,return} in terms of the                                                    // 406
  // unified ._invoke helper method.                                                                                   // 407
  defineIteratorMethods(Gp);                                                                                           // 408
                                                                                                                       // 409
  Gp[toStringTagSymbol] = "Generator";                                                                                 // 410
                                                                                                                       // 411
  // A Generator should always return itself as the iterator object when the                                           // 412
  // @@iterator function is called on it. Some browsers' implementations of the                                        // 413
  // iterator prototype chain incorrectly implement this, causing the Generator                                        // 414
  // object to not be returned from this call. This ensures that doesn't happen.                                       // 415
  // See https://github.com/facebook/regenerator/issues/274 for more details.                                          // 416
  Gp[iteratorSymbol] = function() {                                                                                    // 417
    return this;                                                                                                       // 418
  };                                                                                                                   // 419
                                                                                                                       // 420
  Gp.toString = function() {                                                                                           // 421
    return "[object Generator]";                                                                                       // 422
  };                                                                                                                   // 423
                                                                                                                       // 424
  function pushTryEntry(locs) {                                                                                        // 425
    var entry = { tryLoc: locs[0] };                                                                                   // 426
                                                                                                                       // 427
    if (1 in locs) {                                                                                                   // 428
      entry.catchLoc = locs[1];                                                                                        // 429
    }                                                                                                                  // 430
                                                                                                                       // 431
    if (2 in locs) {                                                                                                   // 432
      entry.finallyLoc = locs[2];                                                                                      // 433
      entry.afterLoc = locs[3];                                                                                        // 434
    }                                                                                                                  // 435
                                                                                                                       // 436
    this.tryEntries.push(entry);                                                                                       // 437
  }                                                                                                                    // 438
                                                                                                                       // 439
  function resetTryEntry(entry) {                                                                                      // 440
    var record = entry.completion || {};                                                                               // 441
    record.type = "normal";                                                                                            // 442
    delete record.arg;                                                                                                 // 443
    entry.completion = record;                                                                                         // 444
  }                                                                                                                    // 445
                                                                                                                       // 446
  function Context(tryLocsList) {                                                                                      // 447
    // The root entry object (effectively a try statement without a catch                                              // 448
    // or a finally block) gives us a place to store values thrown from                                                // 449
    // locations where there is no enclosing try statement.                                                            // 450
    this.tryEntries = [{ tryLoc: "root" }];                                                                            // 451
    tryLocsList.forEach(pushTryEntry, this);                                                                           // 452
    this.reset(true);                                                                                                  // 453
  }                                                                                                                    // 454
                                                                                                                       // 455
  runtime.keys = function(object) {                                                                                    // 456
    var keys = [];                                                                                                     // 457
    for (var key in object) {                                                                                          // 458
      keys.push(key);                                                                                                  // 459
    }                                                                                                                  // 460
    keys.reverse();                                                                                                    // 461
                                                                                                                       // 462
    // Rather than returning an object with a next method, we keep                                                     // 463
    // things simple and return the next function itself.                                                              // 464
    return function next() {                                                                                           // 465
      while (keys.length) {                                                                                            // 466
        var key = keys.pop();                                                                                          // 467
        if (key in object) {                                                                                           // 468
          next.value = key;                                                                                            // 469
          next.done = false;                                                                                           // 470
          return next;                                                                                                 // 471
        }                                                                                                              // 472
      }                                                                                                                // 473
                                                                                                                       // 474
      // To avoid creating an additional object, we just hang the .value                                               // 475
      // and .done properties off the next function object itself. This                                                // 476
      // also ensures that the minifier will not anonymize the function.                                               // 477
      next.done = true;                                                                                                // 478
      return next;                                                                                                     // 479
    };                                                                                                                 // 480
  };                                                                                                                   // 481
                                                                                                                       // 482
  function values(iterable) {                                                                                          // 483
    if (iterable) {                                                                                                    // 484
      var iteratorMethod = iterable[iteratorSymbol];                                                                   // 485
      if (iteratorMethod) {                                                                                            // 486
        return iteratorMethod.call(iterable);                                                                          // 487
      }                                                                                                                // 488
                                                                                                                       // 489
      if (typeof iterable.next === "function") {                                                                       // 490
        return iterable;                                                                                               // 491
      }                                                                                                                // 492
                                                                                                                       // 493
      if (!isNaN(iterable.length)) {                                                                                   // 494
        var i = -1, next = function next() {                                                                           // 495
          while (++i < iterable.length) {                                                                              // 496
            if (hasOwn.call(iterable, i)) {                                                                            // 497
              next.value = iterable[i];                                                                                // 498
              next.done = false;                                                                                       // 499
              return next;                                                                                             // 500
            }                                                                                                          // 501
          }                                                                                                            // 502
                                                                                                                       // 503
          next.value = undefined;                                                                                      // 504
          next.done = true;                                                                                            // 505
                                                                                                                       // 506
          return next;                                                                                                 // 507
        };                                                                                                             // 508
                                                                                                                       // 509
        return next.next = next;                                                                                       // 510
      }                                                                                                                // 511
    }                                                                                                                  // 512
                                                                                                                       // 513
    // Return an iterator with no values.                                                                              // 514
    return { next: doneResult };                                                                                       // 515
  }                                                                                                                    // 516
  runtime.values = values;                                                                                             // 517
                                                                                                                       // 518
  function doneResult() {                                                                                              // 519
    return { value: undefined, done: true };                                                                           // 520
  }                                                                                                                    // 521
                                                                                                                       // 522
  Context.prototype = {                                                                                                // 523
    constructor: Context,                                                                                              // 524
                                                                                                                       // 525
    reset: function(skipTempReset) {                                                                                   // 526
      this.prev = 0;                                                                                                   // 527
      this.next = 0;                                                                                                   // 528
      // Resetting context._sent for legacy support of Babel's                                                         // 529
      // function.sent implementation.                                                                                 // 530
      this.sent = this._sent = undefined;                                                                              // 531
      this.done = false;                                                                                               // 532
      this.delegate = null;                                                                                            // 533
                                                                                                                       // 534
      this.method = "next";                                                                                            // 535
      this.arg = undefined;                                                                                            // 536
                                                                                                                       // 537
      this.tryEntries.forEach(resetTryEntry);                                                                          // 538
                                                                                                                       // 539
      if (!skipTempReset) {                                                                                            // 540
        for (var name in this) {                                                                                       // 541
          // Not sure about the optimal order of these conditions:                                                     // 542
          if (name.charAt(0) === "t" &&                                                                                // 543
              hasOwn.call(this, name) &&                                                                               // 544
              !isNaN(+name.slice(1))) {                                                                                // 545
            this[name] = undefined;                                                                                    // 546
          }                                                                                                            // 547
        }                                                                                                              // 548
      }                                                                                                                // 549
    },                                                                                                                 // 550
                                                                                                                       // 551
    stop: function() {                                                                                                 // 552
      this.done = true;                                                                                                // 553
                                                                                                                       // 554
      var rootEntry = this.tryEntries[0];                                                                              // 555
      var rootRecord = rootEntry.completion;                                                                           // 556
      if (rootRecord.type === "throw") {                                                                               // 557
        throw rootRecord.arg;                                                                                          // 558
      }                                                                                                                // 559
                                                                                                                       // 560
      return this.rval;                                                                                                // 561
    },                                                                                                                 // 562
                                                                                                                       // 563
    dispatchException: function(exception) {                                                                           // 564
      if (this.done) {                                                                                                 // 565
        throw exception;                                                                                               // 566
      }                                                                                                                // 567
                                                                                                                       // 568
      var context = this;                                                                                              // 569
      function handle(loc, caught) {                                                                                   // 570
        record.type = "throw";                                                                                         // 571
        record.arg = exception;                                                                                        // 572
        context.next = loc;                                                                                            // 573
                                                                                                                       // 574
        if (caught) {                                                                                                  // 575
          // If the dispatched exception was caught by a catch block,                                                  // 576
          // then let that catch block handle the exception normally.                                                  // 577
          context.method = "next";                                                                                     // 578
          context.arg = undefined;                                                                                     // 579
        }                                                                                                              // 580
                                                                                                                       // 581
        return !! caught;                                                                                              // 582
      }                                                                                                                // 583
                                                                                                                       // 584
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 585
        var entry = this.tryEntries[i];                                                                                // 586
        var record = entry.completion;                                                                                 // 587
                                                                                                                       // 588
        if (entry.tryLoc === "root") {                                                                                 // 589
          // Exception thrown outside of any try block that could handle                                               // 590
          // it, so set the completion value of the entire function to                                                 // 591
          // throw the exception.                                                                                      // 592
          return handle("end");                                                                                        // 593
        }                                                                                                              // 594
                                                                                                                       // 595
        if (entry.tryLoc <= this.prev) {                                                                               // 596
          var hasCatch = hasOwn.call(entry, "catchLoc");                                                               // 597
          var hasFinally = hasOwn.call(entry, "finallyLoc");                                                           // 598
                                                                                                                       // 599
          if (hasCatch && hasFinally) {                                                                                // 600
            if (this.prev < entry.catchLoc) {                                                                          // 601
              return handle(entry.catchLoc, true);                                                                     // 602
            } else if (this.prev < entry.finallyLoc) {                                                                 // 603
              return handle(entry.finallyLoc);                                                                         // 604
            }                                                                                                          // 605
                                                                                                                       // 606
          } else if (hasCatch) {                                                                                       // 607
            if (this.prev < entry.catchLoc) {                                                                          // 608
              return handle(entry.catchLoc, true);                                                                     // 609
            }                                                                                                          // 610
                                                                                                                       // 611
          } else if (hasFinally) {                                                                                     // 612
            if (this.prev < entry.finallyLoc) {                                                                        // 613
              return handle(entry.finallyLoc);                                                                         // 614
            }                                                                                                          // 615
                                                                                                                       // 616
          } else {                                                                                                     // 617
            throw new Error("try statement without catch or finally");                                                 // 618
          }                                                                                                            // 619
        }                                                                                                              // 620
      }                                                                                                                // 621
    },                                                                                                                 // 622
                                                                                                                       // 623
    abrupt: function(type, arg) {                                                                                      // 624
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 625
        var entry = this.tryEntries[i];                                                                                // 626
        if (entry.tryLoc <= this.prev &&                                                                               // 627
            hasOwn.call(entry, "finallyLoc") &&                                                                        // 628
            this.prev < entry.finallyLoc) {                                                                            // 629
          var finallyEntry = entry;                                                                                    // 630
          break;                                                                                                       // 631
        }                                                                                                              // 632
      }                                                                                                                // 633
                                                                                                                       // 634
      if (finallyEntry &&                                                                                              // 635
          (type === "break" ||                                                                                         // 636
           type === "continue") &&                                                                                     // 637
          finallyEntry.tryLoc <= arg &&                                                                                // 638
          arg <= finallyEntry.finallyLoc) {                                                                            // 639
        // Ignore the finally entry if control is not jumping to a                                                     // 640
        // location outside the try/catch block.                                                                       // 641
        finallyEntry = null;                                                                                           // 642
      }                                                                                                                // 643
                                                                                                                       // 644
      var record = finallyEntry ? finallyEntry.completion : {};                                                        // 645
      record.type = type;                                                                                              // 646
      record.arg = arg;                                                                                                // 647
                                                                                                                       // 648
      if (finallyEntry) {                                                                                              // 649
        this.method = "next";                                                                                          // 650
        this.next = finallyEntry.finallyLoc;                                                                           // 651
        return ContinueSentinel;                                                                                       // 652
      }                                                                                                                // 653
                                                                                                                       // 654
      return this.complete(record);                                                                                    // 655
    },                                                                                                                 // 656
                                                                                                                       // 657
    complete: function(record, afterLoc) {                                                                             // 658
      if (record.type === "throw") {                                                                                   // 659
        throw record.arg;                                                                                              // 660
      }                                                                                                                // 661
                                                                                                                       // 662
      if (record.type === "break" ||                                                                                   // 663
          record.type === "continue") {                                                                                // 664
        this.next = record.arg;                                                                                        // 665
      } else if (record.type === "return") {                                                                           // 666
        this.rval = this.arg = record.arg;                                                                             // 667
        this.method = "return";                                                                                        // 668
        this.next = "end";                                                                                             // 669
      } else if (record.type === "normal" && afterLoc) {                                                               // 670
        this.next = afterLoc;                                                                                          // 671
      }                                                                                                                // 672
                                                                                                                       // 673
      return ContinueSentinel;                                                                                         // 674
    },                                                                                                                 // 675
                                                                                                                       // 676
    finish: function(finallyLoc) {                                                                                     // 677
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 678
        var entry = this.tryEntries[i];                                                                                // 679
        if (entry.finallyLoc === finallyLoc) {                                                                         // 680
          this.complete(entry.completion, entry.afterLoc);                                                             // 681
          resetTryEntry(entry);                                                                                        // 682
          return ContinueSentinel;                                                                                     // 683
        }                                                                                                              // 684
      }                                                                                                                // 685
    },                                                                                                                 // 686
                                                                                                                       // 687
    "catch": function(tryLoc) {                                                                                        // 688
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 689
        var entry = this.tryEntries[i];                                                                                // 690
        if (entry.tryLoc === tryLoc) {                                                                                 // 691
          var record = entry.completion;                                                                               // 692
          if (record.type === "throw") {                                                                               // 693
            var thrown = record.arg;                                                                                   // 694
            resetTryEntry(entry);                                                                                      // 695
          }                                                                                                            // 696
          return thrown;                                                                                               // 697
        }                                                                                                              // 698
      }                                                                                                                // 699
                                                                                                                       // 700
      // The context.catch method must only be called with a location                                                  // 701
      // argument that corresponds to a known catch block.                                                             // 702
      throw new Error("illegal catch attempt");                                                                        // 703
    },                                                                                                                 // 704
                                                                                                                       // 705
    delegateYield: function(iterable, resultName, nextLoc) {                                                           // 706
      this.delegate = {                                                                                                // 707
        iterator: values(iterable),                                                                                    // 708
        resultName: resultName,                                                                                        // 709
        nextLoc: nextLoc                                                                                               // 710
      };                                                                                                               // 711
                                                                                                                       // 712
      if (this.method === "next") {                                                                                    // 713
        // Deliberately forget the last sent value so that we don't                                                    // 714
        // accidentally pass it on to the delegate.                                                                    // 715
        this.arg = undefined;                                                                                          // 716
      }                                                                                                                // 717
                                                                                                                       // 718
      return ContinueSentinel;                                                                                         // 719
    }                                                                                                                  // 720
  };                                                                                                                   // 721
})(                                                                                                                    // 722
  // In sloppy mode, unbound `this` refers to the global object, fallback to                                           // 723
  // Function constructor if we're in global strict mode. That is sadly a form                                         // 724
  // of indirect eval which violates Content Security Policy.                                                          // 725
  (function() { return this })() || Function("return this")()                                                          // 726
);                                                                                                                     // 727
                                                                                                                       // 728
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},{
  "extensions": [
    ".js",
    ".json"
  ]
});
var exports = require("./node_modules/meteor/modules/client.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.modules = exports, {
  meteorInstall: meteorInstall
});

})();
