[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar Showdown;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/markdown/showdown.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//                                                                                                                     // 1\n// showdown.js -- A javascript port of Markdown.                                                                       // 2\n//                                                                                                                     // 3\n// Copyright (c) 2007 John Fraser.                                                                                     // 4\n//                                                                                                                     // 5\n// Original Markdown Copyright (c) 2004-2005 John Gruber                                                               // 6\n//   <http://daringfireball.net/projects/markdown/>                                                                    // 7\n//                                                                                                                     // 8\n// Redistributable under a BSD-style open source license.                                                              // 9\n// See license.txt for more information.                                                                               // 10\n//                                                                                                                     // 11\n// The full source distribution is at:                                                                                 // 12\n//                                                                                                                     // 13\n//\t\t\t\tA A L                                                                                                            // 14\n//\t\t\t\tT C A                                                                                                            // 15\n//\t\t\t\tT K B                                                                                                            // 16\n//                                                                                                                     // 17\n//   <http://www.attacklab.net/>                                                                                       // 18\n//                                                                                                                     // 19\n                                                                                                                       // 20\n//                                                                                                                     // 21\n// Wherever possible, Showdown is a straight, line-by-line port                                                        // 22\n// of the Perl version of Markdown.                                                                                    // 23\n//                                                                                                                     // 24\n// This is not a normal parser design; it's basically just a                                                           // 25\n// series of string substitutions.  It's hard to read and                                                              // 26\n// maintain this way,  but keeping Showdown close to the original                                                      // 27\n// design makes it easier to port new features.                                                                        // 28\n//                                                                                                                     // 29\n// More importantly, Showdown behaves like markdown.pl in most                                                         // 30\n// edge cases.  So web applications can do client-side preview                                                         // 31\n// in Javascript, and then build identical HTML on the server.                                                         // 32\n//                                                                                                                     // 33\n// This port needs the new RegExp functionality of ECMA 262,                                                           // 34\n// 3rd Edition (i.e. Javascript 1.5).  Most modern web browsers                                                        // 35\n// should do fine.  Even with the new regular expression features,                                                     // 36\n// We do a lot of work to emulate Perl's regex functionality.                                                          // 37\n// The tricky changes in this file mostly have the \"attacklab:\"                                                        // 38\n// label.  Major or self-explanatory changes don't.                                                                    // 39\n//                                                                                                                     // 40\n// Smart diff tools like Araxis Merge will be able to match up                                                         // 41\n// this file with markdown.pl in a useful way.  A little tweaking                                                      // 42\n// helps: in a copy of markdown.pl, replace \"#\" with \"//\" and                                                          // 43\n// replace \"$text\" with \"text\".  Be sure to ignore whitespace                                                          // 44\n// and line endings.                                                                                                   // 45\n//                                                                                                                     // 46\n                                                                                                                       // 47\n                                                                                                                       // 48\n//                                                                                                                     // 49\n// Showdown usage:                                                                                                     // 50\n//                                                                                                                     // 51\n//   var text = \"Markdown *rocks*.\";                                                                                   // 52\n//                                                                                                                     // 53\n//   var converter = new Showdown.converter();                                                                         // 54\n//   var html = converter.makeHtml(text);                                                                              // 55\n//                                                                                                                     // 56\n//   alert(html);                                                                                                      // 57\n//                                                                                                                     // 58\n// Note: move the sample code to the bottom of this                                                                    // 59\n// file before uncommenting it.                                                                                        // 60\n//                                                                                                                     // 61\n                                                                                                                       // 62\n                                                                                                                       // 63\n//                                                                                                                     // 64\n// Showdown namespace                                                                                                  // 65\n//                                                                                                                     // 66\n// METEOR CHANGE: remove \"var\" so that this isn't file-local.                                                          // 67\nShowdown = { extensions: {} };                                                                                         // 68\n                                                                                                                       // 69\n//                                                                                                                     // 70\n// forEach                                                                                                             // 71\n//                                                                                                                     // 72\nvar forEach = Showdown.forEach = function(obj, callback) {                                                             // 73\n\tif (typeof obj.forEach === 'function') {                                                                              // 74\n\t\tobj.forEach(callback);                                                                                               // 75\n\t} else {                                                                                                              // 76\n\t\tvar i, len = obj.length;                                                                                             // 77\n\t\tfor (i = 0; i < len; i++) {                                                                                          // 78\n\t\t\tcallback(obj[i], i, obj);                                                                                           // 79\n\t\t}                                                                                                                    // 80\n\t}                                                                                                                     // 81\n};                                                                                                                     // 82\n                                                                                                                       // 83\n//                                                                                                                     // 84\n// Standard extension naming                                                                                           // 85\n//                                                                                                                     // 86\nvar stdExtName = function(s) {                                                                                         // 87\n\treturn s.replace(/[_-]||\\s/g, '').toLowerCase();                                                                      // 88\n};                                                                                                                     // 89\n                                                                                                                       // 90\n//                                                                                                                     // 91\n// converter                                                                                                           // 92\n//                                                                                                                     // 93\n// Wraps all \"globals\" so that the only thing                                                                          // 94\n// exposed is makeHtml().                                                                                              // 95\n//                                                                                                                     // 96\nShowdown.converter = function(converter_options) {                                                                     // 97\n                                                                                                                       // 98\n//                                                                                                                     // 99\n// Globals:                                                                                                            // 100\n//                                                                                                                     // 101\n                                                                                                                       // 102\n// Global hashes, used by various utility routines                                                                     // 103\nvar g_urls;                                                                                                            // 104\nvar g_titles;                                                                                                          // 105\nvar g_html_blocks;                                                                                                     // 106\n                                                                                                                       // 107\n// Used to track when we're inside an ordered or unordered list                                                        // 108\n// (see _ProcessListItems() for details):                                                                              // 109\nvar g_list_level = 0;                                                                                                  // 110\n                                                                                                                       // 111\n// Global extensions                                                                                                   // 112\nvar g_lang_extensions = [];                                                                                            // 113\nvar g_output_modifiers = [];                                                                                           // 114\n                                                                                                                       // 115\n                                                                                                                       // 116\n//                                                                                                                     // 117\n// Automatic Extension Loading (node only):                                                                            // 118\n//                                                                                                                     // 119\n                                                                                                                       // 120\nif (typeof module !== 'undefind' && typeof exports !== 'undefined' && typeof require !== 'undefind') {                 // 121\n\tvar fs = require('fs');                                                                                               // 122\n                                                                                                                       // 123\n\tif (fs) {                                                                                                             // 124\n\t\t// Search extensions folder                                                                                          // 125\n\t\tvar extensions = fs.readdirSync((__dirname || '.')+'/extensions').filter(function(file){                             // 126\n\t\t\treturn ~file.indexOf('.js');                                                                                        // 127\n\t\t}).map(function(file){                                                                                               // 128\n\t\t\treturn file.replace(/\\.js$/, '');                                                                                   // 129\n\t\t});                                                                                                                  // 130\n\t\t// Load extensions into Showdown namespace                                                                           // 131\n\t\tShowdown.forEach(extensions, function(ext){                                                                          // 132\n\t\t\tvar name = stdExtName(ext);                                                                                         // 133\n\t\t\tShowdown.extensions[name] = require('./extensions/' + ext);                                                         // 134\n\t\t});                                                                                                                  // 135\n\t}                                                                                                                     // 136\n}                                                                                                                      // 137\n                                                                                                                       // 138\nthis.makeHtml = function(text) {                                                                                       // 139\n//                                                                                                                     // 140\n// Main function. The order in which other subs are called here is                                                     // 141\n// essential. Link and image substitutions need to happen before                                                       // 142\n// _EscapeSpecialCharsWithinTagAttributes(), so that any *'s or _'s in the <a>                                         // 143\n// and <img> tags get encoded.                                                                                         // 144\n//                                                                                                                     // 145\n                                                                                                                       // 146\n\t// Clear the global hashes. If we don't clear these, you get conflicts                                                // 147\n\t// from other articles when generating a page which contains more than                                                // 148\n\t// one article (e.g. an index page that shows the N most recent                                                       // 149\n\t// articles):                                                                                                         // 150\n\tg_urls = {};                                                                                                          // 151\n\tg_titles = {};                                                                                                        // 152\n\tg_html_blocks = [];                                                                                                   // 153\n                                                                                                                       // 154\n\t// attacklab: Replace ~ with ~T                                                                                       // 155\n\t// This lets us use tilde as an escape char to avoid md5 hashes                                                       // 156\n\t// The choice of character is arbitray; anything that isn't                                                           // 157\n\t// magic in Markdown will work.                                                                                       // 158\n\ttext = text.replace(/~/g,\"~T\");                                                                                       // 159\n                                                                                                                       // 160\n\t// attacklab: Replace $ with ~D                                                                                       // 161\n\t// RegExp interprets $ as a special character                                                                         // 162\n\t// when it's in a replacement string                                                                                  // 163\n\ttext = text.replace(/\\$/g,\"~D\");                                                                                      // 164\n                                                                                                                       // 165\n\t// Standardize line endings                                                                                           // 166\n\ttext = text.replace(/\\r\\n/g,\"\\n\"); // DOS to Unix                                                                     // 167\n\ttext = text.replace(/\\r/g,\"\\n\"); // Mac to Unix                                                                       // 168\n                                                                                                                       // 169\n\t// Make sure text begins and ends with a couple of newlines:                                                          // 170\n\ttext = \"\\n\\n\" + text + \"\\n\\n\";                                                                                        // 171\n                                                                                                                       // 172\n\t// Convert all tabs to spaces.                                                                                        // 173\n\ttext = _Detab(text);                                                                                                  // 174\n                                                                                                                       // 175\n\t// Strip any lines consisting only of spaces and tabs.                                                                // 176\n\t// This makes subsequent regexen easier to write, because we can                                                      // 177\n\t// match consecutive blank lines with /\\n+/ instead of something                                                      // 178\n\t// contorted like /[ \\t]*\\n+/ .                                                                                       // 179\n\ttext = text.replace(/^[ \\t]+$/mg,\"\");                                                                                 // 180\n                                                                                                                       // 181\n\t// Run language extensions                                                                                            // 182\n\tShowdown.forEach(g_lang_extensions, function(x){                                                                      // 183\n\t\ttext = _ExecuteExtension(x, text);                                                                                   // 184\n\t});                                                                                                                   // 185\n                                                                                                                       // 186\n\t// Handle github codeblocks prior to running HashHTML so that                                                         // 187\n\t// HTML contained within the codeblock gets escaped propertly                                                         // 188\n\ttext = _DoGithubCodeBlocks(text);                                                                                     // 189\n                                                                                                                       // 190\n\t// Turn block-level HTML blocks into hash entries                                                                     // 191\n\ttext = _HashHTMLBlocks(text);                                                                                         // 192\n                                                                                                                       // 193\n\t// Strip link definitions, store in hashes.                                                                           // 194\n\ttext = _StripLinkDefinitions(text);                                                                                   // 195\n                                                                                                                       // 196\n\ttext = _RunBlockGamut(text);                                                                                          // 197\n                                                                                                                       // 198\n\ttext = _UnescapeSpecialChars(text);                                                                                   // 199\n                                                                                                                       // 200\n\t// attacklab: Restore dollar signs                                                                                    // 201\n\ttext = text.replace(/~D/g,\"$$\");                                                                                      // 202\n                                                                                                                       // 203\n\t// attacklab: Restore tildes                                                                                          // 204\n\ttext = text.replace(/~T/g,\"~\");                                                                                       // 205\n                                                                                                                       // 206\n\t// Run output modifiers                                                                                               // 207\n\tShowdown.forEach(g_output_modifiers, function(x){                                                                     // 208\n\t\ttext = _ExecuteExtension(x, text);                                                                                   // 209\n\t});                                                                                                                   // 210\n                                                                                                                       // 211\n\treturn text;                                                                                                          // 212\n};                                                                                                                     // 213\n//                                                                                                                     // 214\n// Options:                                                                                                            // 215\n//                                                                                                                     // 216\n                                                                                                                       // 217\n// Parse extensions options into separate arrays                                                                       // 218\nif (converter_options && converter_options.extensions) {                                                               // 219\n                                                                                                                       // 220\n  var self = this;                                                                                                     // 221\n                                                                                                                       // 222\n\t// Iterate over each plugin                                                                                           // 223\n\tShowdown.forEach(converter_options.extensions, function(plugin){                                                      // 224\n                                                                                                                       // 225\n\t\t// Assume it's a bundled plugin if a string is given                                                                 // 226\n\t\tif (typeof plugin === 'string') {                                                                                    // 227\n\t\t\tplugin = Showdown.extensions[stdExtName(plugin)];                                                                   // 228\n\t\t}                                                                                                                    // 229\n                                                                                                                       // 230\n\t\tif (typeof plugin === 'function') {                                                                                  // 231\n\t\t\t// Iterate over each extension within that plugin                                                                   // 232\n\t\t\tShowdown.forEach(plugin(self), function(ext){                                                                       // 233\n\t\t\t\t// Sort extensions by type                                                                                         // 234\n\t\t\t\tif (ext.type) {                                                                                                    // 235\n\t\t\t\t\tif (ext.type === 'language' || ext.type === 'lang') {                                                             // 236\n\t\t\t\t\t\tg_lang_extensions.push(ext);                                                                                     // 237\n\t\t\t\t\t} else if (ext.type === 'output' || ext.type === 'html') {                                                        // 238\n\t\t\t\t\t\tg_output_modifiers.push(ext);                                                                                    // 239\n\t\t\t\t\t}                                                                                                                 // 240\n\t\t\t\t} else {                                                                                                           // 241\n\t\t\t\t\t// Assume language extension                                                                                      // 242\n\t\t\t\t\tg_output_modifiers.push(ext);                                                                                     // 243\n\t\t\t\t}                                                                                                                  // 244\n\t\t\t});                                                                                                                 // 245\n\t\t} else {                                                                                                             // 246\n\t\t\tthrow \"Extension '\" + plugin + \"' could not be loaded.  It was either not found or is not a valid extension.\";      // 247\n\t\t}                                                                                                                    // 248\n\t});                                                                                                                   // 249\n}                                                                                                                      // 250\n                                                                                                                       // 251\n                                                                                                                       // 252\nvar _ExecuteExtension = function(ext, text) {                                                                          // 253\n\tif (ext.regex) {                                                                                                      // 254\n\t\tvar re = new RegExp(ext.regex, 'g');                                                                                 // 255\n\t\treturn text.replace(re, ext.replace);                                                                                // 256\n\t} else if (ext.filter) {                                                                                              // 257\n\t\treturn ext.filter(text);                                                                                             // 258\n\t}                                                                                                                     // 259\n};                                                                                                                     // 260\n                                                                                                                       // 261\nvar _StripLinkDefinitions = function(text) {                                                                           // 262\n//                                                                                                                     // 263\n// Strips link definitions from text, stores the URLs and titles in                                                    // 264\n// hash references.                                                                                                    // 265\n//                                                                                                                     // 266\n                                                                                                                       // 267\n\t// Link defs are in the form: ^[id]: url \"optional title\"                                                             // 268\n                                                                                                                       // 269\n\t/*                                                                                                                    // 270\n\t\tvar text = text.replace(/                                                                                            // 271\n\t\t\t\t^[ ]{0,3}\\[(.+)\\]:  // id = $1  attacklab: g_tab_width - 1                                                         // 272\n\t\t\t\t  [ \\t]*                                                                                                           // 273\n\t\t\t\t  \\n?\t\t\t\t// maybe *one* newline                                                                                    // 274\n\t\t\t\t  [ \\t]*                                                                                                           // 275\n\t\t\t\t<?(\\S+?)>?\t\t\t// url = $2                                                                                           // 276\n\t\t\t\t  [ \\t]*                                                                                                           // 277\n\t\t\t\t  \\n?\t\t\t\t// maybe one newline                                                                                      // 278\n\t\t\t\t  [ \\t]*                                                                                                           // 279\n\t\t\t\t(?:                                                                                                                // 280\n\t\t\t\t  (\\n*)\t\t\t\t// any lines skipped = $3 attacklab: lookbehind removed                                                 // 281\n\t\t\t\t  [\"(]                                                                                                             // 282\n\t\t\t\t  (.+?)\t\t\t\t// title = $4                                                                                           // 283\n\t\t\t\t  [\")]                                                                                                             // 284\n\t\t\t\t  [ \\t]*                                                                                                           // 285\n\t\t\t\t)?\t\t\t\t\t// title is optional                                                                                        // 286\n\t\t\t\t(?:\\n+|$)                                                                                                          // 287\n\t\t\t  /gm,                                                                                                              // 288\n\t\t\t  function(){...});                                                                                                 // 289\n\t*/                                                                                                                    // 290\n                                                                                                                       // 291\n\t// attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug                                            // 292\n\ttext += \"~0\";                                                                                                         // 293\n                                                                                                                       // 294\n\ttext = text.replace(/^[ ]{0,3}\\[(.+)\\]:[ \\t]*\\n?[ \\t]*<?(\\S+?)>?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"(](.+?)[\")][ \\t]*)?(?:\\n+|(?=~0))/gm,\n\t\tfunction (wholeMatch,m1,m2,m3,m4) {                                                                                  // 296\n\t\t\tm1 = m1.toLowerCase();                                                                                              // 297\n\t\t\tg_urls[m1] = _EncodeAmpsAndAngles(m2);  // Link IDs are case-insensitive                                            // 298\n\t\t\tif (m3) {                                                                                                           // 299\n\t\t\t\t// Oops, found blank lines, so it's not a title.                                                                   // 300\n\t\t\t\t// Put back the parenthetical statement we stole.                                                                  // 301\n\t\t\t\treturn m3+m4;                                                                                                      // 302\n\t\t\t} else if (m4) {                                                                                                    // 303\n\t\t\t\tg_titles[m1] = m4.replace(/\"/g,\"&quot;\");                                                                          // 304\n\t\t\t}                                                                                                                   // 305\n                                                                                                                       // 306\n\t\t\t// Completely remove the definition from the text                                                                   // 307\n\t\t\treturn \"\";                                                                                                          // 308\n\t\t}                                                                                                                    // 309\n\t);                                                                                                                    // 310\n                                                                                                                       // 311\n\t// attacklab: strip sentinel                                                                                          // 312\n\ttext = text.replace(/~0/,\"\");                                                                                         // 313\n                                                                                                                       // 314\n\treturn text;                                                                                                          // 315\n}                                                                                                                      // 316\n                                                                                                                       // 317\n                                                                                                                       // 318\nvar _HashHTMLBlocks = function(text) {                                                                                 // 319\n\t// attacklab: Double up blank lines to reduce lookaround                                                              // 320\n\ttext = text.replace(/\\n/g,\"\\n\\n\");                                                                                    // 321\n                                                                                                                       // 322\n\t// Hashify HTML blocks:                                                                                               // 323\n\t// We only want to do this for block-level HTML tags, such as headers,                                                // 324\n\t// lists, and tables. That's because we still want to wrap <p>s around                                                // 325\n\t// \"paragraphs\" that are wrapped in non-block-level tags, such as anchors,                                            // 326\n\t// phrase emphasis, and spans. The list of tags we're looking for is                                                  // 327\n\t// hard-coded:                                                                                                        // 328\n\tvar block_tags_a = \"p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del|style|section|header|footer|nav|article|aside\";\n\tvar block_tags_b = \"p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|style|section|header|footer|nav|article|aside\";\n                                                                                                                       // 331\n\t// First, look for nested blocks, e.g.:                                                                               // 332\n\t//   <div>                                                                                                            // 333\n\t//     <div>                                                                                                          // 334\n\t//     tags for inner block must be indented.                                                                         // 335\n\t//     </div>                                                                                                         // 336\n\t//   </div>                                                                                                           // 337\n\t//                                                                                                                    // 338\n\t// The outermost tags must start at the left margin for this to match, and                                            // 339\n\t// the inner nested divs must be indented.                                                                            // 340\n\t// We need to do this before the next, more liberal match, because the next                                           // 341\n\t// match will start at the first `<div>` and stop at the first `</div>`.                                              // 342\n                                                                                                                       // 343\n\t// attacklab: This regex can be expensive when it fails.                                                              // 344\n\t/*                                                                                                                    // 345\n\t\tvar text = text.replace(/                                                                                            // 346\n\t\t(\t\t\t\t\t\t// save in $1                                                                                                 // 347\n\t\t\t^\t\t\t\t\t// start of line  (with /m)                                                                                   // 348\n\t\t\t<($block_tags_a)\t// start tag = $2                                                                                  // 349\n\t\t\t\\b\t\t\t\t\t// word break                                                                                                // 350\n\t\t\t\t\t\t\t\t// attacklab: hack around khtml/pcre bug...                                                                    // 351\n\t\t\t[^\\r]*?\\n\t\t\t// any number of lines, minimally matching                                                              // 352\n\t\t\t</\\2>\t\t\t\t// the matching end tag                                                                                    // 353\n\t\t\t[ \\t]*\t\t\t\t// trailing spaces/tabs                                                                                   // 354\n\t\t\t(?=\\n+)\t\t\t\t// followed by a newline                                                                                 // 355\n\t\t)\t\t\t\t\t\t// attacklab: there are sentinel newlines at end of document                                                  // 356\n\t\t/gm,function(){...}};                                                                                                // 357\n\t*/                                                                                                                    // 358\n\ttext = text.replace(/^(<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\\b[^\\r]*?\\n<\\/\\2>[ \\t]*(?=\\n+))/gm,hashElement);\n                                                                                                                       // 360\n\t//                                                                                                                    // 361\n\t// Now match more liberally, simply from `\\n<tag>` to `</tag>\\n`                                                      // 362\n\t//                                                                                                                    // 363\n                                                                                                                       // 364\n\t/*                                                                                                                    // 365\n\t\tvar text = text.replace(/                                                                                            // 366\n\t\t(\t\t\t\t\t\t// save in $1                                                                                                 // 367\n\t\t\t^\t\t\t\t\t// start of line  (with /m)                                                                                   // 368\n\t\t\t<($block_tags_b)\t// start tag = $2                                                                                  // 369\n\t\t\t\\b\t\t\t\t\t// word break                                                                                                // 370\n\t\t\t\t\t\t\t\t// attacklab: hack around khtml/pcre bug...                                                                    // 371\n\t\t\t[^\\r]*?\t\t\t\t// any number of lines, minimally matching                                                               // 372\n\t\t\t</\\2>\t\t\t\t// the matching end tag                                                                                    // 373\n\t\t\t[ \\t]*\t\t\t\t// trailing spaces/tabs                                                                                   // 374\n\t\t\t(?=\\n+)\t\t\t\t// followed by a newline                                                                                 // 375\n\t\t)\t\t\t\t\t\t// attacklab: there are sentinel newlines at end of document                                                  // 376\n\t\t/gm,function(){...}};                                                                                                // 377\n\t*/                                                                                                                    // 378\n\ttext = text.replace(/^(<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|style|section|header|footer|nav|article|aside)\\b[^\\r]*?<\\/\\2>[ \\t]*(?=\\n+)\\n)/gm,hashElement);\n                                                                                                                       // 380\n\t// Special case just for <hr />. It was easier to make a special case than                                            // 381\n\t// to make the other regex more complicated.                                                                          // 382\n                                                                                                                       // 383\n\t/*                                                                                                                    // 384\n\t\ttext = text.replace(/                                                                                                // 385\n\t\t(\t\t\t\t\t\t// save in $1                                                                                                 // 386\n\t\t\t\\n\\n\t\t\t\t// Starting after a blank line                                                                              // 387\n\t\t\t[ ]{0,3}                                                                                                            // 388\n\t\t\t(<(hr)\t\t\t\t// start tag = $2                                                                                         // 389\n\t\t\t\\b\t\t\t\t\t// word break                                                                                                // 390\n\t\t\t([^<>])*?\t\t\t//                                                                                                      // 391\n\t\t\t\\/?>)\t\t\t\t// the matching end tag                                                                                    // 392\n\t\t\t[ \\t]*                                                                                                              // 393\n\t\t\t(?=\\n{2,})\t\t\t// followed by a blank line                                                                            // 394\n\t\t)                                                                                                                    // 395\n\t\t/g,hashElement);                                                                                                     // 396\n\t*/                                                                                                                    // 397\n\ttext = text.replace(/(\\n[ ]{0,3}(<(hr)\\b([^<>])*?\\/?>)[ \\t]*(?=\\n{2,}))/g,hashElement);                               // 398\n                                                                                                                       // 399\n\t// Special case for standalone HTML comments:                                                                         // 400\n                                                                                                                       // 401\n\t/*                                                                                                                    // 402\n\t\ttext = text.replace(/                                                                                                // 403\n\t\t(\t\t\t\t\t\t// save in $1                                                                                                 // 404\n\t\t\t\\n\\n\t\t\t\t// Starting after a blank line                                                                              // 405\n\t\t\t[ ]{0,3}\t\t\t// attacklab: g_tab_width - 1                                                                            // 406\n\t\t\t<!                                                                                                                  // 407\n\t\t\t(--[^\\r]*?--\\s*)+                                                                                                   // 408\n\t\t\t>                                                                                                                   // 409\n\t\t\t[ \\t]*                                                                                                              // 410\n\t\t\t(?=\\n{2,})\t\t\t// followed by a blank line                                                                            // 411\n\t\t)                                                                                                                    // 412\n\t\t/g,hashElement);                                                                                                     // 413\n\t*/                                                                                                                    // 414\n\ttext = text.replace(/(\\n\\n[ ]{0,3}<!(--[^\\r]*?--\\s*)+>[ \\t]*(?=\\n{2,}))/g,hashElement);                               // 415\n                                                                                                                       // 416\n\t// PHP and ASP-style processor instructions (<?...?> and <%...%>)                                                     // 417\n                                                                                                                       // 418\n\t/*                                                                                                                    // 419\n\t\ttext = text.replace(/                                                                                                // 420\n\t\t(?:                                                                                                                  // 421\n\t\t\t\\n\\n\t\t\t\t// Starting after a blank line                                                                              // 422\n\t\t)                                                                                                                    // 423\n\t\t(\t\t\t\t\t\t// save in $1                                                                                                 // 424\n\t\t\t[ ]{0,3}\t\t\t// attacklab: g_tab_width - 1                                                                            // 425\n\t\t\t(?:                                                                                                                 // 426\n\t\t\t\t<([?%])\t\t\t// $2                                                                                                    // 427\n\t\t\t\t[^\\r]*?                                                                                                            // 428\n\t\t\t\t\\2>                                                                                                                // 429\n\t\t\t)                                                                                                                   // 430\n\t\t\t[ \\t]*                                                                                                              // 431\n\t\t\t(?=\\n{2,})\t\t\t// followed by a blank line                                                                            // 432\n\t\t)                                                                                                                    // 433\n\t\t/g,hashElement);                                                                                                     // 434\n\t*/                                                                                                                    // 435\n\ttext = text.replace(/(?:\\n\\n)([ ]{0,3}(?:<([?%])[^\\r]*?\\2>)[ \\t]*(?=\\n{2,}))/g,hashElement);                          // 436\n                                                                                                                       // 437\n\t// attacklab: Undo double lines (see comment at top of this function)                                                 // 438\n\ttext = text.replace(/\\n\\n/g,\"\\n\");                                                                                    // 439\n\treturn text;                                                                                                          // 440\n}                                                                                                                      // 441\n                                                                                                                       // 442\nvar hashElement = function(wholeMatch,m1) {                                                                            // 443\n\tvar blockText = m1;                                                                                                   // 444\n                                                                                                                       // 445\n\t// Undo double lines                                                                                                  // 446\n\tblockText = blockText.replace(/\\n\\n/g,\"\\n\");                                                                          // 447\n\tblockText = blockText.replace(/^\\n/,\"\");                                                                              // 448\n                                                                                                                       // 449\n\t// strip trailing blank lines                                                                                         // 450\n\tblockText = blockText.replace(/\\n+$/g,\"\");                                                                            // 451\n                                                                                                                       // 452\n\t// Replace the element text with a marker (\"~KxK\" where x is its key)                                                 // 453\n\tblockText = \"\\n\\n~K\" + (g_html_blocks.push(blockText)-1) + \"K\\n\\n\";                                                   // 454\n                                                                                                                       // 455\n\treturn blockText;                                                                                                     // 456\n};                                                                                                                     // 457\n                                                                                                                       // 458\nvar _RunBlockGamut = function(text) {                                                                                  // 459\n//                                                                                                                     // 460\n// These are all the transformations that form block-level                                                             // 461\n// tags like paragraphs, headers, and list items.                                                                      // 462\n//                                                                                                                     // 463\n\ttext = _DoHeaders(text);                                                                                              // 464\n                                                                                                                       // 465\n\t// Do Horizontal Rules:                                                                                               // 466\n\tvar key = hashBlock(\"<hr />\");                                                                                        // 467\n\ttext = text.replace(/^[ ]{0,2}([ ]?\\*[ ]?){3,}[ \\t]*$/gm,key);                                                        // 468\n\ttext = text.replace(/^[ ]{0,2}([ ]?\\-[ ]?){3,}[ \\t]*$/gm,key);                                                        // 469\n\ttext = text.replace(/^[ ]{0,2}([ ]?\\_[ ]?){3,}[ \\t]*$/gm,key);                                                        // 470\n                                                                                                                       // 471\n\ttext = _DoLists(text);                                                                                                // 472\n\ttext = _DoCodeBlocks(text);                                                                                           // 473\n\ttext = _DoBlockQuotes(text);                                                                                          // 474\n                                                                                                                       // 475\n\t// We already ran _HashHTMLBlocks() before, in Markdown(), but that                                                   // 476\n\t// was to escape raw HTML in the original Markdown source. This time,                                                 // 477\n\t// we're escaping the markup we've just created, so that we don't wrap                                                // 478\n\t// <p> tags around block-level tags.                                                                                  // 479\n\ttext = _HashHTMLBlocks(text);                                                                                         // 480\n\ttext = _FormParagraphs(text);                                                                                         // 481\n                                                                                                                       // 482\n\treturn text;                                                                                                          // 483\n};                                                                                                                     // 484\n                                                                                                                       // 485\n                                                                                                                       // 486\nvar _RunSpanGamut = function(text) {                                                                                   // 487\n//                                                                                                                     // 488\n// These are all the transformations that occur *within* block-level                                                   // 489\n// tags like paragraphs, headers, and list items.                                                                      // 490\n//                                                                                                                     // 491\n                                                                                                                       // 492\n\ttext = _DoCodeSpans(text);                                                                                            // 493\n\ttext = _EscapeSpecialCharsWithinTagAttributes(text);                                                                  // 494\n\ttext = _EncodeBackslashEscapes(text);                                                                                 // 495\n                                                                                                                       // 496\n\t// Process anchor and image tags. Images must come first,                                                             // 497\n\t// because ![foo][f] looks like an anchor.                                                                            // 498\n\ttext = _DoImages(text);                                                                                               // 499\n\ttext = _DoAnchors(text);                                                                                              // 500\n                                                                                                                       // 501\n\t// Make links out of things like `<http://example.com/>`                                                              // 502\n\t// Must come after _DoAnchors(), because you can use < and >                                                          // 503\n\t// delimiters in inline links like [this](<url>).                                                                     // 504\n\ttext = _DoAutoLinks(text);                                                                                            // 505\n\ttext = _EncodeAmpsAndAngles(text);                                                                                    // 506\n\ttext = _DoItalicsAndBold(text);                                                                                       // 507\n                                                                                                                       // 508\n\t// Do hard breaks:                                                                                                    // 509\n\ttext = text.replace(/  +\\n/g,\" <br />\\n\");                                                                            // 510\n                                                                                                                       // 511\n\treturn text;                                                                                                          // 512\n}                                                                                                                      // 513\n                                                                                                                       // 514\nvar _EscapeSpecialCharsWithinTagAttributes = function(text) {                                                          // 515\n//                                                                                                                     // 516\n// Within tags -- meaning between < and > -- encode [\\ ` * _] so they                                                  // 517\n// don't conflict with their use in Markdown for code, italics and strong.                                             // 518\n//                                                                                                                     // 519\n                                                                                                                       // 520\n\t// Build a regex to find HTML tags and comments.  See Friedl's                                                        // 521\n\t// \"Mastering Regular Expressions\", 2nd Ed., pp. 200-201.                                                             // 522\n\tvar regex = /(<[a-z\\/!$](\"[^\"]*\"|'[^']*'|[^'\">])*>|<!(--.*?--\\s*)+>)/gi;                                              // 523\n                                                                                                                       // 524\n\ttext = text.replace(regex, function(wholeMatch) {                                                                     // 525\n\t\tvar tag = wholeMatch.replace(/(.)<\\/?code>(?=.)/g,\"$1`\");                                                            // 526\n\t\ttag = escapeCharacters(tag,\"\\\\`*_\");                                                                                 // 527\n\t\treturn tag;                                                                                                          // 528\n\t});                                                                                                                   // 529\n                                                                                                                       // 530\n\treturn text;                                                                                                          // 531\n}                                                                                                                      // 532\n                                                                                                                       // 533\nvar _DoAnchors = function(text) {                                                                                      // 534\n//                                                                                                                     // 535\n// Turn Markdown link shortcuts into XHTML <a> tags.                                                                   // 536\n//                                                                                                                     // 537\n\t//                                                                                                                    // 538\n\t// First, handle reference-style links: [link text] [id]                                                              // 539\n\t//                                                                                                                    // 540\n                                                                                                                       // 541\n\t/*                                                                                                                    // 542\n\t\ttext = text.replace(/                                                                                                // 543\n\t\t(\t\t\t\t\t\t\t// wrap whole match in $1                                                                                    // 544\n\t\t\t\\[                                                                                                                  // 545\n\t\t\t(                                                                                                                   // 546\n\t\t\t\t(?:                                                                                                                // 547\n\t\t\t\t\t\\[[^\\]]*\\]\t\t// allow brackets nested one level                                                                    // 548\n\t\t\t\t\t|                                                                                                                 // 549\n\t\t\t\t\t[^\\[]\t\t\t// or anything else                                                                                       // 550\n\t\t\t\t)*                                                                                                                 // 551\n\t\t\t)                                                                                                                   // 552\n\t\t\t\\]                                                                                                                  // 553\n                                                                                                                       // 554\n\t\t\t[ ]?\t\t\t\t\t// one optional space                                                                                      // 555\n\t\t\t(?:\\n[ ]*)?\t\t\t\t// one optional newline followed by spaces                                                           // 556\n                                                                                                                       // 557\n\t\t\t\\[                                                                                                                  // 558\n\t\t\t(.*?)\t\t\t\t\t// id = $3                                                                                                // 559\n\t\t\t\\]                                                                                                                  // 560\n\t\t)()()()()\t\t\t\t\t// pad remaining backreferences                                                                        // 561\n\t\t/g,_DoAnchors_callback);                                                                                             // 562\n\t*/                                                                                                                    // 563\n\ttext = text.replace(/(\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\][ ]?(?:\\n[ ]*)?\\[(.*?)\\])()()()()/g,writeAnchorTag);               // 564\n                                                                                                                       // 565\n\t//                                                                                                                    // 566\n\t// Next, inline-style links: [link text](url \"optional title\")                                                        // 567\n\t//                                                                                                                    // 568\n                                                                                                                       // 569\n\t/*                                                                                                                    // 570\n\t\ttext = text.replace(/                                                                                                // 571\n\t\t\t(\t\t\t\t\t\t// wrap whole match in $1                                                                                    // 572\n\t\t\t\t\\[                                                                                                                 // 573\n\t\t\t\t(                                                                                                                  // 574\n\t\t\t\t\t(?:                                                                                                               // 575\n\t\t\t\t\t\t\\[[^\\]]*\\]\t// allow brackets nested one level                                                                    // 576\n\t\t\t\t\t|                                                                                                                 // 577\n\t\t\t\t\t[^\\[\\]]\t\t\t// or anything else                                                                                     // 578\n\t\t\t\t)                                                                                                                  // 579\n\t\t\t)                                                                                                                   // 580\n\t\t\t\\]                                                                                                                  // 581\n\t\t\t\\(\t\t\t\t\t\t// literal paren                                                                                            // 582\n\t\t\t[ \\t]*                                                                                                              // 583\n\t\t\t()\t\t\t\t\t\t// no id, so leave $3 empty                                                                                 // 584\n\t\t\t<?(.*?)>?\t\t\t\t// href = $4                                                                                           // 585\n\t\t\t[ \\t]*                                                                                                              // 586\n\t\t\t(\t\t\t\t\t\t// $5                                                                                                        // 587\n\t\t\t\t(['\"])\t\t\t\t// quote char = $6                                                                                       // 588\n\t\t\t\t(.*?)\t\t\t\t// Title = $7                                                                                             // 589\n\t\t\t\t\\6\t\t\t\t\t// matching quote                                                                                           // 590\n\t\t\t\t[ \\t]*\t\t\t\t// ignore any spaces/tabs between closing quote and )                                                    // 591\n\t\t\t)?\t\t\t\t\t\t// title is optional                                                                                        // 592\n\t\t\t\\)                                                                                                                  // 593\n\t\t)                                                                                                                    // 594\n\t\t/g,writeAnchorTag);                                                                                                  // 595\n\t*/                                                                                                                    // 596\n\ttext = text.replace(/(\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]\\([ \\t]*()<?(.*?(?:\\(.*?\\).*?)?)>?[ \\t]*((['\"])(.*?)\\6[ \\t]*)?\\))/g,writeAnchorTag);\n                                                                                                                       // 598\n\t//                                                                                                                    // 599\n\t// Last, handle reference-style shortcuts: [link text]                                                                // 600\n\t// These must come last in case you've also got [link test][1]                                                        // 601\n\t// or [link test](/foo)                                                                                               // 602\n\t//                                                                                                                    // 603\n                                                                                                                       // 604\n\t/*                                                                                                                    // 605\n\t\ttext = text.replace(/                                                                                                // 606\n\t\t(\t\t \t\t\t\t\t// wrap whole match in $1                                                                                   // 607\n\t\t\t\\[                                                                                                                  // 608\n\t\t\t([^\\[\\]]+)\t\t\t\t// link text = $2; can't contain '[' or ']'                                                           // 609\n\t\t\t\\]                                                                                                                  // 610\n\t\t)()()()()()\t\t\t\t\t// pad rest of backreferences                                                                        // 611\n\t\t/g, writeAnchorTag);                                                                                                 // 612\n\t*/                                                                                                                    // 613\n\ttext = text.replace(/(\\[([^\\[\\]]+)\\])()()()()()/g, writeAnchorTag);                                                   // 614\n                                                                                                                       // 615\n\treturn text;                                                                                                          // 616\n}                                                                                                                      // 617\n                                                                                                                       // 618\nvar writeAnchorTag = function(wholeMatch,m1,m2,m3,m4,m5,m6,m7) {                                                       // 619\n\tif (m7 == undefined) m7 = \"\";                                                                                         // 620\n\tvar whole_match = m1;                                                                                                 // 621\n\tvar link_text   = m2;                                                                                                 // 622\n\tvar link_id\t = m3.toLowerCase();                                                                                      // 623\n\tvar url\t\t= m4;                                                                                                        // 624\n\tvar title\t= m7;                                                                                                       // 625\n                                                                                                                       // 626\n\tif (url == \"\") {                                                                                                      // 627\n\t\tif (link_id == \"\") {                                                                                                 // 628\n\t\t\t// lower-case and turn embedded newlines into spaces                                                                // 629\n\t\t\tlink_id = link_text.toLowerCase().replace(/ ?\\n/g,\" \");                                                             // 630\n\t\t}                                                                                                                    // 631\n\t\turl = \"#\"+link_id;                                                                                                   // 632\n                                                                                                                       // 633\n\t\tif (g_urls[link_id] != undefined) {                                                                                  // 634\n\t\t\turl = g_urls[link_id];                                                                                              // 635\n\t\t\tif (g_titles[link_id] != undefined) {                                                                               // 636\n\t\t\t\ttitle = g_titles[link_id];                                                                                         // 637\n\t\t\t}                                                                                                                   // 638\n\t\t}                                                                                                                    // 639\n\t\telse {                                                                                                               // 640\n\t\t\tif (whole_match.search(/\\(\\s*\\)$/m)>-1) {                                                                           // 641\n\t\t\t\t// Special case for explicit empty url                                                                             // 642\n\t\t\t\turl = \"\";                                                                                                          // 643\n\t\t\t} else {                                                                                                            // 644\n\t\t\t\treturn whole_match;                                                                                                // 645\n\t\t\t}                                                                                                                   // 646\n\t\t}                                                                                                                    // 647\n\t}                                                                                                                     // 648\n                                                                                                                       // 649\n\turl = escapeCharacters(url,\"*_\");                                                                                     // 650\n\tvar result = \"<a href=\\\"\" + url + \"\\\"\";                                                                               // 651\n                                                                                                                       // 652\n\tif (title != \"\") {                                                                                                    // 653\n\t\ttitle = title.replace(/\"/g,\"&quot;\");                                                                                // 654\n\t\ttitle = escapeCharacters(title,\"*_\");                                                                                // 655\n\t\tresult +=  \" title=\\\"\" + title + \"\\\"\";                                                                               // 656\n\t}                                                                                                                     // 657\n                                                                                                                       // 658\n\tresult += \">\" + link_text + \"</a>\";                                                                                   // 659\n                                                                                                                       // 660\n\treturn result;                                                                                                        // 661\n}                                                                                                                      // 662\n                                                                                                                       // 663\n                                                                                                                       // 664\nvar _DoImages = function(text) {                                                                                       // 665\n//                                                                                                                     // 666\n// Turn Markdown image shortcuts into <img> tags.                                                                      // 667\n//                                                                                                                     // 668\n                                                                                                                       // 669\n\t//                                                                                                                    // 670\n\t// First, handle reference-style labeled images: ![alt text][id]                                                      // 671\n\t//                                                                                                                    // 672\n                                                                                                                       // 673\n\t/*                                                                                                                    // 674\n\t\ttext = text.replace(/                                                                                                // 675\n\t\t(\t\t\t\t\t\t// wrap whole match in $1                                                                                     // 676\n\t\t\t!\\[                                                                                                                 // 677\n\t\t\t(.*?)\t\t\t\t// alt text = $2                                                                                           // 678\n\t\t\t\\]                                                                                                                  // 679\n                                                                                                                       // 680\n\t\t\t[ ]?\t\t\t\t// one optional space                                                                                       // 681\n\t\t\t(?:\\n[ ]*)?\t\t\t// one optional newline followed by spaces                                                            // 682\n                                                                                                                       // 683\n\t\t\t\\[                                                                                                                  // 684\n\t\t\t(.*?)\t\t\t\t// id = $3                                                                                                 // 685\n\t\t\t\\]                                                                                                                  // 686\n\t\t)()()()()\t\t\t\t// pad rest of backreferences                                                                           // 687\n\t\t/g,writeImageTag);                                                                                                   // 688\n\t*/                                                                                                                    // 689\n\ttext = text.replace(/(!\\[(.*?)\\][ ]?(?:\\n[ ]*)?\\[(.*?)\\])()()()()/g,writeImageTag);                                   // 690\n                                                                                                                       // 691\n\t//                                                                                                                    // 692\n\t// Next, handle inline images:  ![alt text](url \"optional title\")                                                     // 693\n\t// Don't forget: encode * and _                                                                                       // 694\n                                                                                                                       // 695\n\t/*                                                                                                                    // 696\n\t\ttext = text.replace(/                                                                                                // 697\n\t\t(\t\t\t\t\t\t// wrap whole match in $1                                                                                     // 698\n\t\t\t!\\[                                                                                                                 // 699\n\t\t\t(.*?)\t\t\t\t// alt text = $2                                                                                           // 700\n\t\t\t\\]                                                                                                                  // 701\n\t\t\t\\s?\t\t\t\t\t// One optional whitespace character                                                                        // 702\n\t\t\t\\(\t\t\t\t\t// literal paren                                                                                             // 703\n\t\t\t[ \\t]*                                                                                                              // 704\n\t\t\t()\t\t\t\t\t// no id, so leave $3 empty                                                                                  // 705\n\t\t\t<?(\\S+?)>?\t\t\t// src url = $4                                                                                        // 706\n\t\t\t[ \\t]*                                                                                                              // 707\n\t\t\t(\t\t\t\t\t// $5                                                                                                         // 708\n\t\t\t\t(['\"])\t\t\t// quote char = $6                                                                                        // 709\n\t\t\t\t(.*?)\t\t\t// title = $7                                                                                              // 710\n\t\t\t\t\\6\t\t\t\t// matching quote                                                                                            // 711\n\t\t\t\t[ \\t]*                                                                                                             // 712\n\t\t\t)?\t\t\t\t\t// title is optional                                                                                         // 713\n\t\t\\)                                                                                                                   // 714\n\t\t)                                                                                                                    // 715\n\t\t/g,writeImageTag);                                                                                                   // 716\n\t*/                                                                                                                    // 717\n\ttext = text.replace(/(!\\[(.*?)\\]\\s?\\([ \\t]*()<?(\\S+?)>?[ \\t]*((['\"])(.*?)\\6[ \\t]*)?\\))/g,writeImageTag);              // 718\n                                                                                                                       // 719\n\treturn text;                                                                                                          // 720\n}                                                                                                                      // 721\n                                                                                                                       // 722\nvar writeImageTag = function(wholeMatch,m1,m2,m3,m4,m5,m6,m7) {                                                        // 723\n\tvar whole_match = m1;                                                                                                 // 724\n\tvar alt_text   = m2;                                                                                                  // 725\n\tvar link_id\t = m3.toLowerCase();                                                                                      // 726\n\tvar url\t\t= m4;                                                                                                        // 727\n\tvar title\t= m7;                                                                                                       // 728\n                                                                                                                       // 729\n\tif (!title) title = \"\";                                                                                               // 730\n                                                                                                                       // 731\n\tif (url == \"\") {                                                                                                      // 732\n\t\tif (link_id == \"\") {                                                                                                 // 733\n\t\t\t// lower-case and turn embedded newlines into spaces                                                                // 734\n\t\t\tlink_id = alt_text.toLowerCase().replace(/ ?\\n/g,\" \");                                                              // 735\n\t\t}                                                                                                                    // 736\n\t\turl = \"#\"+link_id;                                                                                                   // 737\n                                                                                                                       // 738\n\t\tif (g_urls[link_id] != undefined) {                                                                                  // 739\n\t\t\turl = g_urls[link_id];                                                                                              // 740\n\t\t\tif (g_titles[link_id] != undefined) {                                                                               // 741\n\t\t\t\ttitle = g_titles[link_id];                                                                                         // 742\n\t\t\t}                                                                                                                   // 743\n\t\t}                                                                                                                    // 744\n\t\telse {                                                                                                               // 745\n\t\t\treturn whole_match;                                                                                                 // 746\n\t\t}                                                                                                                    // 747\n\t}                                                                                                                     // 748\n                                                                                                                       // 749\n\talt_text = alt_text.replace(/\"/g,\"&quot;\");                                                                           // 750\n\turl = escapeCharacters(url,\"*_\");                                                                                     // 751\n\tvar result = \"<img src=\\\"\" + url + \"\\\" alt=\\\"\" + alt_text + \"\\\"\";                                                     // 752\n                                                                                                                       // 753\n\t// attacklab: Markdown.pl adds empty title attributes to images.                                                      // 754\n\t// Replicate this bug.                                                                                                // 755\n                                                                                                                       // 756\n\t//if (title != \"\") {                                                                                                  // 757\n\t\ttitle = title.replace(/\"/g,\"&quot;\");                                                                                // 758\n\t\ttitle = escapeCharacters(title,\"*_\");                                                                                // 759\n\t\tresult +=  \" title=\\\"\" + title + \"\\\"\";                                                                               // 760\n\t//}                                                                                                                   // 761\n                                                                                                                       // 762\n\tresult += \" />\";                                                                                                      // 763\n                                                                                                                       // 764\n\treturn result;                                                                                                        // 765\n}                                                                                                                      // 766\n                                                                                                                       // 767\n                                                                                                                       // 768\nvar _DoHeaders = function(text) {                                                                                      // 769\n                                                                                                                       // 770\n\t// Setext-style headers:                                                                                              // 771\n\t//\tHeader 1                                                                                                           // 772\n\t//\t========                                                                                                           // 773\n\t//                                                                                                                    // 774\n\t//\tHeader 2                                                                                                           // 775\n\t//\t--------                                                                                                           // 776\n\t//                                                                                                                    // 777\n\ttext = text.replace(/^(.+)[ \\t]*\\n=+[ \\t]*\\n+/gm,                                                                     // 778\n\t\tfunction(wholeMatch,m1){return hashBlock('<h1 id=\"' + headerId(m1) + '\">' + _RunSpanGamut(m1) + \"</h1>\");});         // 779\n                                                                                                                       // 780\n\ttext = text.replace(/^(.+)[ \\t]*\\n-+[ \\t]*\\n+/gm,                                                                     // 781\n\t\tfunction(matchFound,m1){return hashBlock('<h2 id=\"' + headerId(m1) + '\">' + _RunSpanGamut(m1) + \"</h2>\");});         // 782\n                                                                                                                       // 783\n\t// atx-style headers:                                                                                                 // 784\n\t//  # Header 1                                                                                                        // 785\n\t//  ## Header 2                                                                                                       // 786\n\t//  ## Header 2 with closing hashes ##                                                                                // 787\n\t//  ...                                                                                                               // 788\n\t//  ###### Header 6                                                                                                   // 789\n\t//                                                                                                                    // 790\n                                                                                                                       // 791\n\t/*                                                                                                                    // 792\n\t\ttext = text.replace(/                                                                                                // 793\n\t\t\t^(\\#{1,6})\t\t\t\t// $1 = string of #'s                                                                                 // 794\n\t\t\t[ \\t]*                                                                                                              // 795\n\t\t\t(.+?)\t\t\t\t\t// $2 = Header text                                                                                       // 796\n\t\t\t[ \\t]*                                                                                                              // 797\n\t\t\t\\#*\t\t\t\t\t\t// optional closing #'s (not counted)                                                                      // 798\n\t\t\t\\n+                                                                                                                 // 799\n\t\t/gm, function() {...});                                                                                              // 800\n\t*/                                                                                                                    // 801\n                                                                                                                       // 802\n\ttext = text.replace(/^(\\#{1,6})[ \\t]*(.+?)[ \\t]*\\#*\\n+/gm,                                                            // 803\n\t\tfunction(wholeMatch,m1,m2) {                                                                                         // 804\n\t\t\tvar h_level = m1.length;                                                                                            // 805\n\t\t\treturn hashBlock(\"<h\" + h_level + ' id=\"' + headerId(m2) + '\">' + _RunSpanGamut(m2) + \"</h\" + h_level + \">\");       // 806\n\t\t});                                                                                                                  // 807\n                                                                                                                       // 808\n\tfunction headerId(m) {                                                                                                // 809\n\t\treturn m.replace(/[^\\w]/g, '').toLowerCase();                                                                        // 810\n\t}                                                                                                                     // 811\n\treturn text;                                                                                                          // 812\n}                                                                                                                      // 813\n                                                                                                                       // 814\n// This declaration keeps Dojo compressor from outputting garbage:                                                     // 815\nvar _ProcessListItems;                                                                                                 // 816\n                                                                                                                       // 817\nvar _DoLists = function(text) {                                                                                        // 818\n//                                                                                                                     // 819\n// Form HTML ordered (numbered) and unordered (bulleted) lists.                                                        // 820\n//                                                                                                                     // 821\n                                                                                                                       // 822\n\t// attacklab: add sentinel to hack around khtml/safari bug:                                                           // 823\n\t// http://bugs.webkit.org/show_bug.cgi?id=11231                                                                       // 824\n\ttext += \"~0\";                                                                                                         // 825\n                                                                                                                       // 826\n\t// Re-usable pattern to match any entirel ul or ol list:                                                              // 827\n                                                                                                                       // 828\n\t/*                                                                                                                    // 829\n\t\tvar whole_list = /                                                                                                   // 830\n\t\t(\t\t\t\t\t\t\t\t\t// $1 = whole list                                                                                         // 831\n\t\t\t(\t\t\t\t\t\t\t\t// $2                                                                                                      // 832\n\t\t\t\t[ ]{0,3}\t\t\t\t\t// attacklab: g_tab_width - 1                                                                         // 833\n\t\t\t\t([*+-]|\\d+[.])\t\t\t\t// $3 = first list item marker                                                                   // 834\n\t\t\t\t[ \\t]+                                                                                                             // 835\n\t\t\t)                                                                                                                   // 836\n\t\t\t[^\\r]+?                                                                                                             // 837\n\t\t\t(\t\t\t\t\t\t\t\t// $4                                                                                                      // 838\n\t\t\t\t~0\t\t\t\t\t\t\t// sentinel for workaround; should be $                                                                   // 839\n\t\t\t|                                                                                                                   // 840\n\t\t\t\t\\n{2,}                                                                                                             // 841\n\t\t\t\t(?=\\S)                                                                                                             // 842\n\t\t\t\t(?!\t\t\t\t\t\t\t// Negative lookahead for another list item marker                                                       // 843\n\t\t\t\t\t[ \\t]*                                                                                                            // 844\n\t\t\t\t\t(?:[*+-]|\\d+[.])[ \\t]+                                                                                            // 845\n\t\t\t\t)                                                                                                                  // 846\n\t\t\t)                                                                                                                   // 847\n\t\t)/g                                                                                                                  // 848\n\t*/                                                                                                                    // 849\n\tvar whole_list = /^(([ ]{0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(~0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm;       // 850\n                                                                                                                       // 851\n\tif (g_list_level) {                                                                                                   // 852\n\t\ttext = text.replace(whole_list,function(wholeMatch,m1,m2) {                                                          // 853\n\t\t\tvar list = m1;                                                                                                      // 854\n\t\t\tvar list_type = (m2.search(/[*+-]/g)>-1) ? \"ul\" : \"ol\";                                                             // 855\n                                                                                                                       // 856\n\t\t\t// Turn double returns into triple returns, so that we can make a                                                   // 857\n\t\t\t// paragraph for the last item in a list, if necessary:                                                             // 858\n\t\t\tlist = list.replace(/\\n{2,}/g,\"\\n\\n\\n\");;                                                                           // 859\n\t\t\tvar result = _ProcessListItems(list);                                                                               // 860\n                                                                                                                       // 861\n\t\t\t// Trim any trailing whitespace, to put the closing `</$list_type>`                                                 // 862\n\t\t\t// up on the preceding line, to get it past the current stupid                                                      // 863\n\t\t\t// HTML block parser. This is a hack to work around the terrible                                                    // 864\n\t\t\t// hack that is the HTML block parser.                                                                              // 865\n\t\t\tresult = result.replace(/\\s+$/,\"\");                                                                                 // 866\n\t\t\tresult = \"<\"+list_type+\">\" + result + \"</\"+list_type+\">\\n\";                                                         // 867\n\t\t\treturn result;                                                                                                      // 868\n\t\t});                                                                                                                  // 869\n\t} else {                                                                                                              // 870\n\t\twhole_list = /(\\n\\n|^\\n?)(([ ]{0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(~0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/g;\n\t\ttext = text.replace(whole_list,function(wholeMatch,m1,m2,m3) {                                                       // 872\n\t\t\tvar runup = m1;                                                                                                     // 873\n\t\t\tvar list = m2;                                                                                                      // 874\n                                                                                                                       // 875\n\t\t\tvar list_type = (m3.search(/[*+-]/g)>-1) ? \"ul\" : \"ol\";                                                             // 876\n\t\t\t// Turn double returns into triple returns, so that we can make a                                                   // 877\n\t\t\t// paragraph for the last item in a list, if necessary:                                                             // 878\n\t\t\tvar list = list.replace(/\\n{2,}/g,\"\\n\\n\\n\");;                                                                       // 879\n\t\t\tvar result = _ProcessListItems(list);                                                                               // 880\n\t\t\tresult = runup + \"<\"+list_type+\">\\n\" + result + \"</\"+list_type+\">\\n\";                                               // 881\n\t\t\treturn result;                                                                                                      // 882\n\t\t});                                                                                                                  // 883\n\t}                                                                                                                     // 884\n                                                                                                                       // 885\n\t// attacklab: strip sentinel                                                                                          // 886\n\ttext = text.replace(/~0/,\"\");                                                                                         // 887\n                                                                                                                       // 888\n\treturn text;                                                                                                          // 889\n}                                                                                                                      // 890\n                                                                                                                       // 891\n_ProcessListItems = function(list_str) {                                                                               // 892\n//                                                                                                                     // 893\n//  Process the contents of a single ordered or unordered list, splitting it                                           // 894\n//  into individual list items.                                                                                        // 895\n//                                                                                                                     // 896\n\t// The $g_list_level global keeps track of when we're inside a list.                                                  // 897\n\t// Each time we enter a list, we increment it; when we leave a list,                                                  // 898\n\t// we decrement. If it's zero, we're not in a list anymore.                                                           // 899\n\t//                                                                                                                    // 900\n\t// We do this because when we're not inside a list, we want to treat                                                  // 901\n\t// something like this:                                                                                               // 902\n\t//                                                                                                                    // 903\n\t//    I recommend upgrading to version                                                                                // 904\n\t//    8. Oops, now this line is treated                                                                               // 905\n\t//    as a sub-list.                                                                                                  // 906\n\t//                                                                                                                    // 907\n\t// As a single paragraph, despite the fact that the second line starts                                                // 908\n\t// with a digit-period-space sequence.                                                                                // 909\n\t//                                                                                                                    // 910\n\t// Whereas when we're inside a list (or sub-list), that line will be                                                  // 911\n\t// treated as the start of a sub-list. What a kludge, huh? This is                                                    // 912\n\t// an aspect of Markdown's syntax that's hard to parse perfectly                                                      // 913\n\t// without resorting to mind-reading. Perhaps the solution is to                                                      // 914\n\t// change the syntax rules such that sub-lists must start with a                                                      // 915\n\t// starting cardinal number; e.g. \"1.\" or \"a.\".                                                                       // 916\n                                                                                                                       // 917\n\tg_list_level++;                                                                                                       // 918\n                                                                                                                       // 919\n\t// trim trailing blank lines:                                                                                         // 920\n\tlist_str = list_str.replace(/\\n{2,}$/,\"\\n\");                                                                          // 921\n                                                                                                                       // 922\n\t// attacklab: add sentinel to emulate \\z                                                                              // 923\n\tlist_str += \"~0\";                                                                                                     // 924\n                                                                                                                       // 925\n\t/*                                                                                                                    // 926\n\t\tlist_str = list_str.replace(/                                                                                        // 927\n\t\t\t(\\n)?\t\t\t\t\t\t\t// leading line = $1                                                                                    // 928\n\t\t\t(^[ \\t]*)\t\t\t\t\t\t// leading whitespace = $2                                                                           // 929\n\t\t\t([*+-]|\\d+[.]) [ \\t]+\t\t\t// list marker = $3                                                                         // 930\n\t\t\t([^\\r]+?\t\t\t\t\t\t// list item text   = $4                                                                              // 931\n\t\t\t(\\n{1,2}))                                                                                                          // 932\n\t\t\t(?= \\n* (~0 | \\2 ([*+-]|\\d+[.]) [ \\t]+))                                                                            // 933\n\t\t/gm, function(){...});                                                                                               // 934\n\t*/                                                                                                                    // 935\n\tlist_str = list_str.replace(/(\\n)?(^[ \\t]*)([*+-]|\\d+[.])[ \\t]+([^\\r]+?(\\n{1,2}))(?=\\n*(~0|\\2([*+-]|\\d+[.])[ \\t]+))/gm,\n\t\tfunction(wholeMatch,m1,m2,m3,m4){                                                                                    // 937\n\t\t\tvar item = m4;                                                                                                      // 938\n\t\t\tvar leading_line = m1;                                                                                              // 939\n\t\t\tvar leading_space = m2;                                                                                             // 940\n                                                                                                                       // 941\n\t\t\tif (leading_line || (item.search(/\\n{2,}/)>-1)) {                                                                   // 942\n\t\t\t\titem = _RunBlockGamut(_Outdent(item));                                                                             // 943\n\t\t\t}                                                                                                                   // 944\n\t\t\telse {                                                                                                              // 945\n\t\t\t\t// Recursion for sub-lists:                                                                                        // 946\n\t\t\t\titem = _DoLists(_Outdent(item));                                                                                   // 947\n\t\t\t\titem = item.replace(/\\n$/,\"\"); // chomp(item)                                                                      // 948\n\t\t\t\titem = _RunSpanGamut(item);                                                                                        // 949\n\t\t\t}                                                                                                                   // 950\n                                                                                                                       // 951\n\t\t\treturn  \"<li>\" + item + \"</li>\\n\";                                                                                  // 952\n\t\t}                                                                                                                    // 953\n\t);                                                                                                                    // 954\n                                                                                                                       // 955\n\t// attacklab: strip sentinel                                                                                          // 956\n\tlist_str = list_str.replace(/~0/g,\"\");                                                                                // 957\n                                                                                                                       // 958\n\tg_list_level--;                                                                                                       // 959\n\treturn list_str;                                                                                                      // 960\n}                                                                                                                      // 961\n                                                                                                                       // 962\n                                                                                                                       // 963\nvar _DoCodeBlocks = function(text) {                                                                                   // 964\n//                                                                                                                     // 965\n//  Process Markdown `<pre><code>` blocks.                                                                             // 966\n//                                                                                                                     // 967\n                                                                                                                       // 968\n\t/*                                                                                                                    // 969\n\t\ttext = text.replace(text,                                                                                            // 970\n\t\t\t/(?:\\n\\n|^)                                                                                                         // 971\n\t\t\t(\t\t\t\t\t\t\t\t// $1 = the code block -- one or more lines, starting with a space/tab                                     // 972\n\t\t\t\t(?:                                                                                                                // 973\n\t\t\t\t\t(?:[ ]{4}|\\t)\t\t\t// Lines must start with a tab or a tab-width of spaces - attacklab: g_tab_width                  // 974\n\t\t\t\t\t.*\\n+                                                                                                             // 975\n\t\t\t\t)+                                                                                                                 // 976\n\t\t\t)                                                                                                                   // 977\n\t\t\t(\\n*[ ]{0,3}[^ \\t\\n]|(?=~0))\t// attacklab: g_tab_width                                                              // 978\n\t\t/g,function(){...});                                                                                                 // 979\n\t*/                                                                                                                    // 980\n                                                                                                                       // 981\n\t// attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug                                            // 982\n\ttext += \"~0\";                                                                                                         // 983\n                                                                                                                       // 984\n\ttext = text.replace(/(?:\\n\\n|^)((?:(?:[ ]{4}|\\t).*\\n+)+)(\\n*[ ]{0,3}[^ \\t\\n]|(?=~0))/g,                               // 985\n\t\tfunction(wholeMatch,m1,m2) {                                                                                         // 986\n\t\t\tvar codeblock = m1;                                                                                                 // 987\n\t\t\tvar nextChar = m2;                                                                                                  // 988\n                                                                                                                       // 989\n\t\t\tcodeblock = _EncodeCode( _Outdent(codeblock));                                                                      // 990\n\t\t\tcodeblock = _Detab(codeblock);                                                                                      // 991\n\t\t\tcodeblock = codeblock.replace(/^\\n+/g,\"\"); // trim leading newlines                                                 // 992\n\t\t\tcodeblock = codeblock.replace(/\\n+$/g,\"\"); // trim trailing whitespace                                              // 993\n                                                                                                                       // 994\n\t\t\tcodeblock = \"<pre><code>\" + codeblock + \"\\n</code></pre>\";                                                          // 995\n                                                                                                                       // 996\n\t\t\treturn hashBlock(codeblock) + nextChar;                                                                             // 997\n\t\t}                                                                                                                    // 998\n\t);                                                                                                                    // 999\n                                                                                                                       // 1000\n\t// attacklab: strip sentinel                                                                                          // 1001\n\ttext = text.replace(/~0/,\"\");                                                                                         // 1002\n                                                                                                                       // 1003\n\treturn text;                                                                                                          // 1004\n};                                                                                                                     // 1005\n                                                                                                                       // 1006\nvar _DoGithubCodeBlocks = function(text) {                                                                             // 1007\n//                                                                                                                     // 1008\n//  Process Github-style code blocks                                                                                   // 1009\n//  Example:                                                                                                           // 1010\n//  ```ruby                                                                                                            // 1011\n//  def hello_world(x)                                                                                                 // 1012\n//    puts \"Hello, #{x}\"                                                                                               // 1013\n//  end                                                                                                                // 1014\n//  ```                                                                                                                // 1015\n//                                                                                                                     // 1016\n                                                                                                                       // 1017\n                                                                                                                       // 1018\n\t// attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug                                            // 1019\n\ttext += \"~0\";                                                                                                         // 1020\n                                                                                                                       // 1021\n\ttext = text.replace(/(?:^|\\n)```(.*)\\n([\\s\\S]*?)\\n```/g,                                                              // 1022\n\t\tfunction(wholeMatch,m1,m2) {                                                                                         // 1023\n\t\t\tvar language = m1;                                                                                                  // 1024\n\t\t\tvar codeblock = m2;                                                                                                 // 1025\n                                                                                                                       // 1026\n\t\t\tcodeblock = _EncodeCode(codeblock);                                                                                 // 1027\n\t\t\tcodeblock = _Detab(codeblock);                                                                                      // 1028\n\t\t\tcodeblock = codeblock.replace(/^\\n+/g,\"\"); // trim leading newlines                                                 // 1029\n\t\t\tcodeblock = codeblock.replace(/\\n+$/g,\"\"); // trim trailing whitespace                                              // 1030\n                                                                                                                       // 1031\n\t\t\tcodeblock = \"<pre><code\" + (language ? \" class=\\\"\" + language + '\"' : \"\") + \">\" + codeblock + \"\\n</code></pre>\";    // 1032\n                                                                                                                       // 1033\n\t\t\treturn hashBlock(codeblock);                                                                                        // 1034\n\t\t}                                                                                                                    // 1035\n\t);                                                                                                                    // 1036\n                                                                                                                       // 1037\n\t// attacklab: strip sentinel                                                                                          // 1038\n\ttext = text.replace(/~0/,\"\");                                                                                         // 1039\n                                                                                                                       // 1040\n\treturn text;                                                                                                          // 1041\n}                                                                                                                      // 1042\n                                                                                                                       // 1043\nvar hashBlock = function(text) {                                                                                       // 1044\n\ttext = text.replace(/(^\\n+|\\n+$)/g,\"\");                                                                               // 1045\n\treturn \"\\n\\n~K\" + (g_html_blocks.push(text)-1) + \"K\\n\\n\";                                                             // 1046\n}                                                                                                                      // 1047\n                                                                                                                       // 1048\nvar _DoCodeSpans = function(text) {                                                                                    // 1049\n//                                                                                                                     // 1050\n//   *  Backtick quotes are used for <code></code> spans.                                                              // 1051\n//                                                                                                                     // 1052\n//   *  You can use multiple backticks as the delimiters if you want to                                                // 1053\n//\t include literal backticks in the code span. So, this input:                                                        // 1054\n//                                                                                                                     // 1055\n//\t\t Just type ``foo `bar` baz`` at the prompt.                                                                        // 1056\n//                                                                                                                     // 1057\n//\t   Will translate to:                                                                                               // 1058\n//                                                                                                                     // 1059\n//\t\t <p>Just type <code>foo `bar` baz</code> at the prompt.</p>                                                        // 1060\n//                                                                                                                     // 1061\n//\tThere's no arbitrary limit to the number of backticks you                                                           // 1062\n//\tcan use as delimters. If you need three consecutive backticks                                                       // 1063\n//\tin your code, use four for delimiters, etc.                                                                         // 1064\n//                                                                                                                     // 1065\n//  *  You can use spaces to get literal backticks at the edges:                                                       // 1066\n//                                                                                                                     // 1067\n//\t\t ... type `` `bar` `` ...                                                                                          // 1068\n//                                                                                                                     // 1069\n//\t   Turns to:                                                                                                        // 1070\n//                                                                                                                     // 1071\n//\t\t ... type <code>`bar`</code> ...                                                                                   // 1072\n//                                                                                                                     // 1073\n                                                                                                                       // 1074\n\t/*                                                                                                                    // 1075\n\t\ttext = text.replace(/                                                                                                // 1076\n\t\t\t(^|[^\\\\])\t\t\t\t\t// Character before opening ` can't be a backslash                                                    // 1077\n\t\t\t(`+)\t\t\t\t\t\t// $2 = Opening run of `                                                                                  // 1078\n\t\t\t(\t\t\t\t\t\t\t// $3 = The code block                                                                                      // 1079\n\t\t\t\t[^\\r]*?                                                                                                            // 1080\n\t\t\t\t[^`]\t\t\t\t\t// attacklab: work around lack of lookbehind                                                              // 1081\n\t\t\t)                                                                                                                   // 1082\n\t\t\t\\2\t\t\t\t\t\t\t// Matching closer                                                                                         // 1083\n\t\t\t(?!`)                                                                                                               // 1084\n\t\t/gm, function(){...});                                                                                               // 1085\n\t*/                                                                                                                    // 1086\n                                                                                                                       // 1087\n\ttext = text.replace(/(^|[^\\\\])(`+)([^\\r]*?[^`])\\2(?!`)/gm,                                                            // 1088\n\t\tfunction(wholeMatch,m1,m2,m3,m4) {                                                                                   // 1089\n\t\t\tvar c = m3;                                                                                                         // 1090\n\t\t\tc = c.replace(/^([ \\t]*)/g,\"\");\t// leading whitespace                                                               // 1091\n\t\t\tc = c.replace(/[ \\t]*$/g,\"\");\t// trailing whitespace                                                                // 1092\n\t\t\tc = _EncodeCode(c);                                                                                                 // 1093\n\t\t\treturn m1+\"<code>\"+c+\"</code>\";                                                                                     // 1094\n\t\t});                                                                                                                  // 1095\n                                                                                                                       // 1096\n\treturn text;                                                                                                          // 1097\n}                                                                                                                      // 1098\n                                                                                                                       // 1099\nvar _EncodeCode = function(text) {                                                                                     // 1100\n//                                                                                                                     // 1101\n// Encode/escape certain characters inside Markdown code runs.                                                         // 1102\n// The point is that in code, these characters are literals,                                                           // 1103\n// and lose their special Markdown meanings.                                                                           // 1104\n//                                                                                                                     // 1105\n\t// Encode all ampersands; HTML entities are not                                                                       // 1106\n\t// entities within a Markdown code span.                                                                              // 1107\n\ttext = text.replace(/&/g,\"&amp;\");                                                                                    // 1108\n                                                                                                                       // 1109\n\t// Do the angle bracket song and dance:                                                                               // 1110\n\ttext = text.replace(/</g,\"&lt;\");                                                                                     // 1111\n\ttext = text.replace(/>/g,\"&gt;\");                                                                                     // 1112\n                                                                                                                       // 1113\n\t// Now, escape characters that are magic in Markdown:                                                                 // 1114\n\ttext = escapeCharacters(text,\"\\*_{}[]\\\\\",false);                                                                      // 1115\n                                                                                                                       // 1116\n// jj the line above breaks this:                                                                                      // 1117\n//---                                                                                                                  // 1118\n                                                                                                                       // 1119\n//* Item                                                                                                               // 1120\n                                                                                                                       // 1121\n//   1. Subitem                                                                                                        // 1122\n                                                                                                                       // 1123\n//            special char: *                                                                                          // 1124\n//---                                                                                                                  // 1125\n                                                                                                                       // 1126\n\treturn text;                                                                                                          // 1127\n}                                                                                                                      // 1128\n                                                                                                                       // 1129\n                                                                                                                       // 1130\nvar _DoItalicsAndBold = function(text) {                                                                               // 1131\n                                                                                                                       // 1132\n\t// <strong> must go first:                                                                                            // 1133\n\ttext = text.replace(/(\\*\\*|__)(?=\\S)([^\\r]*?\\S[*_]*)\\1/g,                                                             // 1134\n\t\t\"<strong>$2</strong>\");                                                                                              // 1135\n                                                                                                                       // 1136\n\ttext = text.replace(/(\\*|_)(?=\\S)([^\\r]*?\\S)\\1/g,                                                                     // 1137\n\t\t\"<em>$2</em>\");                                                                                                      // 1138\n                                                                                                                       // 1139\n\treturn text;                                                                                                          // 1140\n}                                                                                                                      // 1141\n                                                                                                                       // 1142\n                                                                                                                       // 1143\nvar _DoBlockQuotes = function(text) {                                                                                  // 1144\n                                                                                                                       // 1145\n\t/*                                                                                                                    // 1146\n\t\ttext = text.replace(/                                                                                                // 1147\n\t\t(\t\t\t\t\t\t\t\t// Wrap whole match in $1                                                                                   // 1148\n\t\t\t(                                                                                                                   // 1149\n\t\t\t\t^[ \\t]*>[ \\t]?\t\t\t// '>' at the start of a line                                                                     // 1150\n\t\t\t\t.+\\n\t\t\t\t\t// rest of the first line                                                                                 // 1151\n\t\t\t\t(.+\\n)*\t\t\t\t\t// subsequent consecutive lines                                                                        // 1152\n\t\t\t\t\\n*\t\t\t\t\t\t// blanks                                                                                                 // 1153\n\t\t\t)+                                                                                                                  // 1154\n\t\t)                                                                                                                    // 1155\n\t\t/gm, function(){...});                                                                                               // 1156\n\t*/                                                                                                                    // 1157\n                                                                                                                       // 1158\n\ttext = text.replace(/((^[ \\t]*>[ \\t]?.+\\n(.+\\n)*\\n*)+)/gm,                                                            // 1159\n\t\tfunction(wholeMatch,m1) {                                                                                            // 1160\n\t\t\tvar bq = m1;                                                                                                        // 1161\n                                                                                                                       // 1162\n\t\t\t// attacklab: hack around Konqueror 3.5.4 bug:                                                                      // 1163\n\t\t\t// \"----------bug\".replace(/^-/g,\"\") == \"bug\"                                                                       // 1164\n                                                                                                                       // 1165\n\t\t\tbq = bq.replace(/^[ \\t]*>[ \\t]?/gm,\"~0\");\t// trim one level of quoting                                              // 1166\n                                                                                                                       // 1167\n\t\t\t// attacklab: clean up hack                                                                                         // 1168\n\t\t\tbq = bq.replace(/~0/g,\"\");                                                                                          // 1169\n                                                                                                                       // 1170\n\t\t\tbq = bq.replace(/^[ \\t]+$/gm,\"\");\t\t// trim whitespace-only lines                                                    // 1171\n\t\t\tbq = _RunBlockGamut(bq);\t\t\t\t// recurse                                                                              // 1172\n                                                                                                                       // 1173\n\t\t\tbq = bq.replace(/(^|\\n)/g,\"$1  \");                                                                                  // 1174\n\t\t\t// These leading spaces screw with <pre> content, so we need to fix that:                                           // 1175\n\t\t\tbq = bq.replace(                                                                                                    // 1176\n\t\t\t\t\t/(\\s*<pre>[^\\r]+?<\\/pre>)/gm,                                                                                     // 1177\n\t\t\t\tfunction(wholeMatch,m1) {                                                                                          // 1178\n\t\t\t\t\tvar pre = m1;                                                                                                     // 1179\n\t\t\t\t\t// attacklab: hack around Konqueror 3.5.4 bug:                                                                    // 1180\n\t\t\t\t\tpre = pre.replace(/^  /mg,\"~0\");                                                                                  // 1181\n\t\t\t\t\tpre = pre.replace(/~0/g,\"\");                                                                                      // 1182\n\t\t\t\t\treturn pre;                                                                                                       // 1183\n\t\t\t\t});                                                                                                                // 1184\n                                                                                                                       // 1185\n\t\t\treturn hashBlock(\"<blockquote>\\n\" + bq + \"\\n</blockquote>\");                                                        // 1186\n\t\t});                                                                                                                  // 1187\n\treturn text;                                                                                                          // 1188\n}                                                                                                                      // 1189\n                                                                                                                       // 1190\n                                                                                                                       // 1191\nvar _FormParagraphs = function(text) {                                                                                 // 1192\n//                                                                                                                     // 1193\n//  Params:                                                                                                            // 1194\n//    $text - string to process with html <p> tags                                                                     // 1195\n//                                                                                                                     // 1196\n                                                                                                                       // 1197\n\t// Strip leading and trailing lines:                                                                                  // 1198\n\ttext = text.replace(/^\\n+/g,\"\");                                                                                      // 1199\n\ttext = text.replace(/\\n+$/g,\"\");                                                                                      // 1200\n                                                                                                                       // 1201\n\tvar grafs = text.split(/\\n{2,}/g);                                                                                    // 1202\n\tvar grafsOut = [];                                                                                                    // 1203\n                                                                                                                       // 1204\n\t//                                                                                                                    // 1205\n\t// Wrap <p> tags.                                                                                                     // 1206\n\t//                                                                                                                    // 1207\n\tvar end = grafs.length;                                                                                               // 1208\n\tfor (var i=0; i<end; i++) {                                                                                           // 1209\n\t\tvar str = grafs[i];                                                                                                  // 1210\n                                                                                                                       // 1211\n\t\t// if this is an HTML marker, copy it                                                                                // 1212\n\t\tif (str.search(/~K(\\d+)K/g) >= 0) {                                                                                  // 1213\n\t\t\tgrafsOut.push(str);                                                                                                 // 1214\n\t\t}                                                                                                                    // 1215\n\t\telse if (str.search(/\\S/) >= 0) {                                                                                    // 1216\n\t\t\tstr = _RunSpanGamut(str);                                                                                           // 1217\n\t\t\tstr = str.replace(/^([ \\t]*)/g,\"<p>\");                                                                              // 1218\n\t\t\tstr += \"</p>\"                                                                                                       // 1219\n\t\t\tgrafsOut.push(str);                                                                                                 // 1220\n\t\t}                                                                                                                    // 1221\n                                                                                                                       // 1222\n\t}                                                                                                                     // 1223\n                                                                                                                       // 1224\n\t//                                                                                                                    // 1225\n\t// Unhashify HTML blocks                                                                                              // 1226\n\t//                                                                                                                    // 1227\n\tend = grafsOut.length;                                                                                                // 1228\n\tfor (var i=0; i<end; i++) {                                                                                           // 1229\n\t\t// if this is a marker for an html block...                                                                          // 1230\n\t\twhile (grafsOut[i].search(/~K(\\d+)K/) >= 0) {                                                                        // 1231\n\t\t\tvar blockText = g_html_blocks[RegExp.$1];                                                                           // 1232\n\t\t\tblockText = blockText.replace(/\\$/g,\"$$$$\"); // Escape any dollar signs                                             // 1233\n\t\t\tgrafsOut[i] = grafsOut[i].replace(/~K\\d+K/,blockText);                                                              // 1234\n\t\t}                                                                                                                    // 1235\n\t}                                                                                                                     // 1236\n                                                                                                                       // 1237\n\treturn grafsOut.join(\"\\n\\n\");                                                                                         // 1238\n}                                                                                                                      // 1239\n                                                                                                                       // 1240\n                                                                                                                       // 1241\nvar _EncodeAmpsAndAngles = function(text) {                                                                            // 1242\n// Smart processing for ampersands and angle brackets that need to be encoded.                                         // 1243\n                                                                                                                       // 1244\n\t// Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:                                              // 1245\n\t//   http://bumppo.net/projects/amputator/                                                                            // 1246\n\ttext = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)/g,\"&amp;\");                                                    // 1247\n                                                                                                                       // 1248\n\t// Encode naked <'s                                                                                                   // 1249\n\ttext = text.replace(/<(?![a-z\\/?\\$!])/gi,\"&lt;\");                                                                     // 1250\n                                                                                                                       // 1251\n\treturn text;                                                                                                          // 1252\n}                                                                                                                      // 1253\n                                                                                                                       // 1254\n                                                                                                                       // 1255\nvar _EncodeBackslashEscapes = function(text) {                                                                         // 1256\n//                                                                                                                     // 1257\n//   Parameter:  String.                                                                                               // 1258\n//   Returns:\tThe string, with after processing the following backslash                                                // 1259\n//\t\t\t   escape sequences.                                                                                              // 1260\n//                                                                                                                     // 1261\n                                                                                                                       // 1262\n\t// attacklab: The polite way to do this is with the new                                                               // 1263\n\t// escapeCharacters() function:                                                                                       // 1264\n\t//                                                                                                                    // 1265\n\t// \ttext = escapeCharacters(text,\"\\\\\",true);                                                                          // 1266\n\t// \ttext = escapeCharacters(text,\"`*_{}[]()>#+-.!\",true);                                                             // 1267\n\t//                                                                                                                    // 1268\n\t// ...but we're sidestepping its use of the (slow) RegExp constructor                                                 // 1269\n\t// as an optimization for Firefox.  This function gets called a LOT.                                                  // 1270\n                                                                                                                       // 1271\n\ttext = text.replace(/\\\\(\\\\)/g,escapeCharacters_callback);                                                             // 1272\n\ttext = text.replace(/\\\\([`*_{}\\[\\]()>#+-.!])/g,escapeCharacters_callback);                                            // 1273\n\treturn text;                                                                                                          // 1274\n}                                                                                                                      // 1275\n                                                                                                                       // 1276\n                                                                                                                       // 1277\nvar _DoAutoLinks = function(text) {                                                                                    // 1278\n                                                                                                                       // 1279\n\ttext = text.replace(/<((https?|ftp|dict):[^'\">\\s]+)>/gi,\"<a href=\\\"$1\\\">$1</a>\");                                     // 1280\n                                                                                                                       // 1281\n\t// Email addresses: <address@domain.foo>                                                                              // 1282\n                                                                                                                       // 1283\n\t/*                                                                                                                    // 1284\n\t\ttext = text.replace(/                                                                                                // 1285\n\t\t\t<                                                                                                                   // 1286\n\t\t\t(?:mailto:)?                                                                                                        // 1287\n\t\t\t(                                                                                                                   // 1288\n\t\t\t\t[-.\\w]+                                                                                                            // 1289\n\t\t\t\t\\@                                                                                                                 // 1290\n\t\t\t\t[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+                                                                                  // 1291\n\t\t\t)                                                                                                                   // 1292\n\t\t\t>                                                                                                                   // 1293\n\t\t/gi, _DoAutoLinks_callback());                                                                                       // 1294\n\t*/                                                                                                                    // 1295\n\ttext = text.replace(/<(?:mailto:)?([-.\\w]+\\@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi,                                   // 1296\n\t\tfunction(wholeMatch,m1) {                                                                                            // 1297\n\t\t\treturn _EncodeEmailAddress( _UnescapeSpecialChars(m1) );                                                            // 1298\n\t\t}                                                                                                                    // 1299\n\t);                                                                                                                    // 1300\n                                                                                                                       // 1301\n\treturn text;                                                                                                          // 1302\n}                                                                                                                      // 1303\n                                                                                                                       // 1304\n                                                                                                                       // 1305\nvar _EncodeEmailAddress = function(addr) {                                                                             // 1306\n//                                                                                                                     // 1307\n//  Input: an email address, e.g. \"foo@example.com\"                                                                    // 1308\n//                                                                                                                     // 1309\n//  Output: the email address as a mailto link, with each character                                                    // 1310\n//\tof the address encoded as either a decimal or hex entity, in                                                        // 1311\n//\tthe hopes of foiling most address harvesting spam bots. E.g.:                                                       // 1312\n//                                                                                                                     // 1313\n//\t<a href=\"&#x6D;&#97;&#105;&#108;&#x74;&#111;:&#102;&#111;&#111;&#64;&#101;                                          // 1314\n//\t   x&#x61;&#109;&#x70;&#108;&#x65;&#x2E;&#99;&#111;&#109;\">&#102;&#111;&#111;                                       // 1315\n//\t   &#64;&#101;x&#x61;&#109;&#x70;&#108;&#x65;&#x2E;&#99;&#111;&#109;</a>                                            // 1316\n//                                                                                                                     // 1317\n//  Based on a filter by Matthew Wickline, posted to the BBEdit-Talk                                                   // 1318\n//  mailing list: <http://tinyurl.com/yu7ue>                                                                           // 1319\n//                                                                                                                     // 1320\n                                                                                                                       // 1321\n\tvar encode = [                                                                                                        // 1322\n\t\tfunction(ch){return \"&#\"+ch.charCodeAt(0)+\";\";},                                                                     // 1323\n\t\tfunction(ch){return \"&#x\"+ch.charCodeAt(0).toString(16)+\";\";},                                                       // 1324\n\t\tfunction(ch){return ch;}                                                                                             // 1325\n\t];                                                                                                                    // 1326\n                                                                                                                       // 1327\n\taddr = \"mailto:\" + addr;                                                                                              // 1328\n                                                                                                                       // 1329\n\taddr = addr.replace(/./g, function(ch) {                                                                              // 1330\n\t\tif (ch == \"@\") {                                                                                                     // 1331\n\t\t   \t// this *must* be encoded. I insist.                                                                             // 1332\n\t\t\tch = encode[Math.floor(Math.random()*2)](ch);                                                                       // 1333\n\t\t} else if (ch !=\":\") {                                                                                               // 1334\n\t\t\t// leave ':' alone (to spot mailto: later)                                                                          // 1335\n\t\t\tvar r = Math.random();                                                                                              // 1336\n\t\t\t// roughly 10% raw, 45% hex, 45% dec                                                                                // 1337\n\t\t\tch =  (                                                                                                             // 1338\n\t\t\t\t\tr > .9  ?\tencode[2](ch)   :                                                                                       // 1339\n\t\t\t\t\tr > .45 ?\tencode[1](ch)   :                                                                                       // 1340\n\t\t\t\t\t\t\t\tencode[0](ch)                                                                                                  // 1341\n\t\t\t\t);                                                                                                                 // 1342\n\t\t}                                                                                                                    // 1343\n\t\treturn ch;                                                                                                           // 1344\n\t});                                                                                                                   // 1345\n                                                                                                                       // 1346\n\taddr = \"<a href=\\\"\" + addr + \"\\\">\" + addr + \"</a>\";                                                                   // 1347\n\taddr = addr.replace(/\">.+:/g,\"\\\">\"); // strip the mailto: from the visible part                                       // 1348\n                                                                                                                       // 1349\n\treturn addr;                                                                                                          // 1350\n}                                                                                                                      // 1351\n                                                                                                                       // 1352\n                                                                                                                       // 1353\nvar _UnescapeSpecialChars = function(text) {                                                                           // 1354\n//                                                                                                                     // 1355\n// Swap back in all the special characters we've hidden.                                                               // 1356\n//                                                                                                                     // 1357\n\ttext = text.replace(/~E(\\d+)E/g,                                                                                      // 1358\n\t\tfunction(wholeMatch,m1) {                                                                                            // 1359\n\t\t\tvar charCodeToReplace = parseInt(m1);                                                                               // 1360\n\t\t\treturn String.fromCharCode(charCodeToReplace);                                                                      // 1361\n\t\t}                                                                                                                    // 1362\n\t);                                                                                                                    // 1363\n\treturn text;                                                                                                          // 1364\n}                                                                                                                      // 1365\n                                                                                                                       // 1366\n                                                                                                                       // 1367\nvar _Outdent = function(text) {                                                                                        // 1368\n//                                                                                                                     // 1369\n// Remove one level of line-leading tabs or spaces                                                                     // 1370\n//                                                                                                                     // 1371\n                                                                                                                       // 1372\n\t// attacklab: hack around Konqueror 3.5.4 bug:                                                                        // 1373\n\t// \"----------bug\".replace(/^-/g,\"\") == \"bug\"                                                                         // 1374\n                                                                                                                       // 1375\n\ttext = text.replace(/^(\\t|[ ]{1,4})/gm,\"~0\"); // attacklab: g_tab_width                                               // 1376\n                                                                                                                       // 1377\n\t// attacklab: clean up hack                                                                                           // 1378\n\ttext = text.replace(/~0/g,\"\")                                                                                         // 1379\n                                                                                                                       // 1380\n\treturn text;                                                                                                          // 1381\n}                                                                                                                      // 1382\n                                                                                                                       // 1383\nvar _Detab = function(text) {                                                                                          // 1384\n// attacklab: Detab's completely rewritten for speed.                                                                  // 1385\n// In perl we could fix it by anchoring the regexp with \\G.                                                            // 1386\n// In javascript we're less fortunate.                                                                                 // 1387\n                                                                                                                       // 1388\n\t// expand first n-1 tabs                                                                                              // 1389\n\ttext = text.replace(/\\t(?=\\t)/g,\"    \"); // attacklab: g_tab_width                                                    // 1390\n                                                                                                                       // 1391\n\t// replace the nth with two sentinels                                                                                 // 1392\n\ttext = text.replace(/\\t/g,\"~A~B\");                                                                                    // 1393\n                                                                                                                       // 1394\n\t// use the sentinel to anchor our regex so it doesn't explode                                                         // 1395\n\ttext = text.replace(/~B(.+?)~A/g,                                                                                     // 1396\n\t\tfunction(wholeMatch,m1,m2) {                                                                                         // 1397\n\t\t\tvar leadingText = m1;                                                                                               // 1398\n\t\t\tvar numSpaces = 4 - leadingText.length % 4;  // attacklab: g_tab_width                                              // 1399\n                                                                                                                       // 1400\n\t\t\t// there *must* be a better way to do this:                                                                         // 1401\n\t\t\tfor (var i=0; i<numSpaces; i++) leadingText+=\" \";                                                                   // 1402\n                                                                                                                       // 1403\n\t\t\treturn leadingText;                                                                                                 // 1404\n\t\t}                                                                                                                    // 1405\n\t);                                                                                                                    // 1406\n                                                                                                                       // 1407\n\t// clean up sentinels                                                                                                 // 1408\n\ttext = text.replace(/~A/g,\"    \");  // attacklab: g_tab_width                                                         // 1409\n\ttext = text.replace(/~B/g,\"\");                                                                                        // 1410\n                                                                                                                       // 1411\n\treturn text;                                                                                                          // 1412\n}                                                                                                                      // 1413\n                                                                                                                       // 1414\n                                                                                                                       // 1415\n//                                                                                                                     // 1416\n//  attacklab: Utility functions                                                                                       // 1417\n//                                                                                                                     // 1418\n                                                                                                                       // 1419\n                                                                                                                       // 1420\nvar escapeCharacters = function(text, charsToEscape, afterBackslash) {                                                 // 1421\n\t// First we have to escape the escape characters so that                                                              // 1422\n\t// we can build a character class out of them                                                                         // 1423\n\tvar regexString = \"([\" + charsToEscape.replace(/([\\[\\]\\\\])/g,\"\\\\$1\") + \"])\";                                          // 1424\n                                                                                                                       // 1425\n\tif (afterBackslash) {                                                                                                 // 1426\n\t\tregexString = \"\\\\\\\\\" + regexString;                                                                                  // 1427\n\t}                                                                                                                     // 1428\n                                                                                                                       // 1429\n\tvar regex = new RegExp(regexString,\"g\");                                                                              // 1430\n\ttext = text.replace(regex,escapeCharacters_callback);                                                                 // 1431\n                                                                                                                       // 1432\n\treturn text;                                                                                                          // 1433\n}                                                                                                                      // 1434\n                                                                                                                       // 1435\n                                                                                                                       // 1436\nvar escapeCharacters_callback = function(wholeMatch,m1) {                                                              // 1437\n\tvar charCodeToEscape = m1.charCodeAt(0);                                                                              // 1438\n\treturn \"~E\"+charCodeToEscape+\"E\";                                                                                     // 1439\n}                                                                                                                      // 1440\n                                                                                                                       // 1441\n} // end of Showdown.converter                                                                                         // 1442\n                                                                                                                       // 1443\n                                                                                                                       // 1444\n// export                                                                                                              // 1445\nif (typeof module !== 'undefined') module.exports = Showdown;                                                          // 1446\n                                                                                                                       // 1447\n// stolen from AMD branch of underscore                                                                                // 1448\n// AMD define happens at the end for compatibility with AMD loaders                                                    // 1449\n// that don't enforce next-turn semantics on modules.                                                                  // 1450\nif (typeof define === 'function' && define.amd) {                                                                      // 1451\n    define('showdown', function() {                                                                                    // 1452\n        return Showdown;                                                                                               // 1453\n    });                                                                                                                // 1454\n}                                                                                                                      // 1455\n                                                                                                                       // 1456\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/markdown/template-integration.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nif (Package.templating) {                                                                                              // 1\n  var Template = Package.templating.Template;                                                                          // 2\n  var Blaze = Package.blaze.Blaze; // implied by `templating`                                                          // 3\n  var HTML = Package.htmljs.HTML; // implied by `blaze`                                                                // 4\n                                                                                                                       // 5\n  Blaze.Template.registerHelper(\"markdown\", new Template('markdown', function () {                                     // 6\n    var view = this;                                                                                                   // 7\n    var content = '';                                                                                                  // 8\n    if (view.templateContentBlock) {                                                                                   // 9\n      content = Blaze._toText(view.templateContentBlock, HTML.TEXTMODE.STRING);                                        // 10\n    }                                                                                                                  // 11\n    var converter = new Showdown.converter();                                                                          // 12\n    return HTML.Raw(converter.makeHtml(content));                                                                      // 13\n  }));                                                                                                                 // 14\n}                                                                                                                      // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.markdown = {}, {\n  Showdown: Showdown\n});\n\n})();\n","servePath":"/packages/markdown.js"}]