{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../imports/models","imported":["Tellers","Stories","Subjects"],"specifiers":[{"kind":"named","imported":"Tellers","local":"Tellers"},{"kind":"named","imported":"Stories","local":"Stories"},{"kind":"named","imported":"Subjects","local":"Subjects"}]},{"source":"slugify","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"slugify"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"server/main.js","filenameRelative":"server/main.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"useNativeAsyncAwait":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"server/main.js.map","sourceFileName":"server/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"main"},"ignored":false,"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Tellers, Stories, Subjects;\nmodule.watch(require(\"../imports/models\"), {\n  Tellers(v) {\n    Tellers = v;\n  },\n\n  Stories(v) {\n    Stories = v;\n  },\n\n  Subjects(v) {\n    Subjects = v;\n  }\n\n}, 1);\nlet slugify;\nmodule.watch(require(\"slugify\"), {\n  default(v) {\n    slugify = v;\n  }\n\n}, 2);\nMeteor.startup(() => {// code to run on server at startup\n});\nMeteor.methods({\n  'register.teller'(teller) {\n    teller.subjects = [];\n    teller._id = Tellers.insert(teller);\n    return teller;\n  },\n\n  'login.teller'(teller) {\n    var teller = Tellers.findOne(teller);\n    return teller;\n  },\n\n  'panel.newStory'(story) {\n    // var subjects = resolveSubjects(story.subjects);\n    var subject_ids = [];\n    story.subjects.forEach((subject, i) => {\n      if (!('_id' in subject)) {\n        subject = findOrCreateSubject(subject);\n      }\n\n      subject_ids.push(subject._id);\n    });\n    story.subjects = subject_ids;\n    story._id = Stories.insert(story);\n    return story;\n  },\n\n  'panel.updateSubjects'({\n    teller_id,\n    subjects\n  }) {\n    var subject_ids = [],\n        subject_object;\n    console.log(subjects);\n    subjects.forEach((subject, i) => {\n      if (!('_id' in subject)) {\n        subject = findOrCreateSubject(subject);\n      }\n\n      subjects[i] = subject;\n      subject_ids.push(subject._id);\n    }); // Atualiza os subjects com os _ids\n\n    Tellers.update({\n      _id: teller_id\n    }, {\n      $set: {\n        subjects: subject_ids\n      }\n    });\n    return subjects;\n  },\n\n  'timeline.getStories'({\n    subjects,\n    story_ids\n  }) {\n    // Pega 20 histórias dos assuntos E que não estejam entre as histórias passadas\n    // Se não completou 20 histórias, pegue 20 histórias quaisquer que não estejam entre as histórias passadas\n    var amount = 20;\n    var stories = Stories.find({\n      $and: [{\n        subjects: {\n          $in: subjects\n        }\n      }, {\n        _id: {\n          $nin: story_ids\n        }\n      }]\n    }, {\n      limit: amount\n    }).fetch();\n\n    if (stories.length < amount) {\n      stories.forEach(story => {\n        story_ids.push(story._id);\n      });\n      var more_stories = Stories.find({\n        _id: {\n          $nin: story_ids\n        }\n      }, {\n        limit: amount - stories.length\n      }).fetch();\n      stories = stories.concat(more_stories);\n    }\n\n    return stories;\n  }\n\n});\n\nfunction findOrCreateSubject(subject) {\n  subject.slug = slugifySubject(subject.name);\n  subject_object = Subjects.findOne({\n    slug: subject.slug\n  });\n\n  if (!subject_object) {\n    subject._id = Subjects.insert(subject);\n  } else subject = subject_object;\n\n  return subject;\n}\n\nfunction slugifySubject(subject) {\n  return slugify(subject.trim(), '-', /[^a-zA-Z0-9 -]/g, true);\n}\n\nfunction resolveSubjects(subjects) {\n  return subjects.split(',').map(function (subject) {\n    return slugifySubject(subject);\n  });\n}","map":{"version":3,"sources":["server/main.js"],"names":["Meteor","module","watch","require","v","Tellers","Stories","Subjects","slugify","default","startup","methods","teller","subjects","_id","insert","findOne","story","subject_ids","forEach","subject","i","findOrCreateSubject","push","teller_id","subject_object","console","log","update","$set","story_ids","amount","stories","find","$and","$in","$nin","limit","fetch","length","more_stories","concat","slug","slugifySubject","name","trim","resolveSubjects","split","map"],"mappings":"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","file":"server/main.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Tellers, Stories, Subjects } from '../imports/models';\nimport slugify from 'slugify';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n\nMeteor.methods({\n  'register.teller'(teller){\n    teller.subjects = [];\n    teller._id = Tellers.insert(teller);\n\n    return teller;\n  },\n  'login.teller'(teller){\n    var teller = Tellers.findOne(teller);\n\n    return teller;\n  },\n  'panel.newStory'(story){\n    // var subjects = resolveSubjects(story.subjects);\n    var subject_ids = [];\n    story.subjects.forEach((subject, i)=>{\n      if(!('_id' in subject)){\n        subject = findOrCreateSubject(subject);\n      }\n\n      subject_ids.push(subject._id);\n    });\n\n    story.subjects = subject_ids;\n\n    story._id = Stories.insert(story);\n\n    return story;\n  },\n  'panel.updateSubjects'({teller_id, subjects}){\n    var subject_ids = [], subject_object;\n    console.log(subjects)\n\n    subjects.forEach((subject, i)=>{\n      if(!('_id' in subject)){\n        subject = findOrCreateSubject(subject);\n      }\n\n      subjects[i] = subject;\n      subject_ids.push(subject._id);\n    });\n\n    // Atualiza os subjects com os _ids\n    Tellers.update({_id: teller_id}, {$set: {subjects: subject_ids}});\n\n    return subjects;\n  },\n  'timeline.getStories'({subjects, story_ids}){\n    // Pega 20 histórias dos assuntos E que não estejam entre as histórias passadas\n    // Se não completou 20 histórias, pegue 20 histórias quaisquer que não estejam entre as histórias passadas\n    var amount = 20;\n    var stories = Stories.find({$and: [{subjects: {$in: subjects}}, {_id: {$nin: story_ids}}]}, {limit: amount}).fetch();\n    if(stories.length < amount){\n      stories.forEach((story)=>{\n        story_ids.push(story._id);\n      });\n\n      var more_stories = Stories.find({_id: {$nin: story_ids}}, {limit: amount-stories.length}).fetch();\n      stories = stories.concat(more_stories);\n    }\n\n    return stories;\n  }\n});\n\nfunction findOrCreateSubject(subject){\n  subject.slug = slugifySubject(subject.name);\n  subject_object = Subjects.findOne({slug: subject.slug});\n  if(!subject_object){\n    subject._id = Subjects.insert(subject);\n  }else subject = subject_object;\n\n  return subject;\n}\n\nfunction slugifySubject(subject){\n  return slugify(subject.trim(),'-',/[^a-zA-Z0-9 -]/g, true);\n}\n\nfunction resolveSubjects(subjects){\n  return subjects.split(',').map(function(subject){\n    return slugifySubject(subject);\n  });\n}\n"]},"hash":"36671eaa485b9c5b20b59f3e322a2ffb475fbd35"}
